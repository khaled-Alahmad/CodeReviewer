{"file_contents":{"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, date, timestamp, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const studentStatusEnum = pgEnum('student_status', ['active', 'suspended', 'graduated', 'transferred']);\nexport const teacherStatusEnum = pgEnum('teacher_status', ['active', 'on_leave', 'resigned']);\nexport const attendanceStatusEnum = pgEnum('attendance_status', ['present', 'absent', 'late', 'excused']);\nexport const paymentStatusEnum = pgEnum('payment_status', ['paid', 'pending', 'overdue', 'partial']);\nexport const genderEnum = pgEnum('gender', ['male', 'female']);\nexport const assessmentTypeEnum = pgEnum('assessment_type', ['مذاكرة', 'امتحان نهائي', 'واجب', 'مشاركة', 'اختبار قصير', 'مشروع', 'نشاط']);\nexport const dateTypeEnum = pgEnum('date_type', ['gregorian', 'hijri']);\nexport const teacherAttendanceStatusEnum = pgEnum('teacher_attendance_status', ['present', 'absent', 'paid_leave', 'unpaid_leave', 'sick_leave']);\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'teacher', 'parent']);\n\n// Users table (for authentication)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('admin'),\n  fullName: text(\"full_name\"),\n  email: text(\"email\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Linking table for teacher users\nexport const teacherUsers = pgTable(\"teacher_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id).unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Linking table for parent users with their children\nexport const parentStudents = pgTable(\"parent_students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id), // Parent user\n  studentId: varchar(\"student_id\").notNull().references(() => students.id), // Child student\n  relationship: text(\"relationship\").notNull().default('parent'), // parent, guardian, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  arabicName: text(\"arabic_name\").notNull(),\n  dateOfBirth: date(\"date_of_birth\").notNull(),\n  gender: genderEnum(\"gender\").notNull(),\n  nationalId: text(\"national_id\").unique(),\n  enrollmentDate: date(\"enrollment_date\").notNull(),\n  classId: varchar(\"class_id\").references(() => classes.id),\n  parentName: text(\"parent_name\").notNull(),\n  parentPhone: text(\"parent_phone\").notNull(),\n  parentEmail: text(\"parent_email\"),\n  address: text(\"address\"),\n  medicalNotes: text(\"medical_notes\"),\n  status: studentStatusEnum(\"status\").notNull().default('active'),\n  photoUrl: text(\"photo_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Teachers table\nexport const teachers = pgTable(\"teachers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  arabicName: text(\"arabic_name\").notNull(),\n  email: text(\"email\").unique().notNull(),\n  phone: text(\"phone\").notNull(),\n  gender: genderEnum(\"gender\").notNull(),\n  dateOfBirth: date(\"date_of_birth\"),\n  hireDate: date(\"hire_date\").notNull(),\n  qualification: text(\"qualification\"),\n  specialization: text(\"specialization\"),\n  monthlySalary: decimal(\"monthly_salary\", { precision: 10, scale: 2 }).notNull().default('0'),\n  status: teacherStatusEnum(\"status\").notNull().default('active'),\n  photoUrl: text(\"photo_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subjects table\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  arabicName: text(\"arabic_name\").notNull(),\n  code: text(\"code\").unique().notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Education Levels table (المراحل الدراسية)\nexport const educationLevels = pgTable(\"education_levels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // e.g., \"الابتدائية\", \"المتوسطة\", \"الثانوية\"\n  order: integer(\"order\").notNull(), // للترتيب\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Classes/Sections table\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  educationLevelId: varchar(\"education_level_id\").references(() => educationLevels.id), // المرحلة الدراسية\n  name: text(\"name\").notNull(), // e.g., \"الصف الأول\"\n  grade: text(\"grade\").notNull(), // e.g., \"الأول\", \"الثاني\"\n  section: text(\"section\").notNull(), // أ، ب، ج\n  academicYear: text(\"academic_year\").notNull(), // e.g., \"2024-2025\"\n  capacity: integer(\"capacity\").notNull().default(30),\n  roomNumber: text(\"room_number\"),\n  teacherId: varchar(\"teacher_id\").references(() => teachers.id), // Class teacher\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Grade-Subject Assignment (which subjects are taught in which grade)\nexport const classSubjects = pgTable(\"class_subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  educationLevelId: varchar(\"education_level_id\").notNull().references(() => educationLevels.id),\n  grade: text(\"grade\").notNull(),\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id),\n  teacherId: varchar(\"teacher_id\").references(() => teachers.id),\n  weeklyHours: integer(\"weekly_hours\").notNull().default(2),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Section-Subject-Teacher Assignment (assigns teachers to specific subjects in specific sections)\nexport const sectionSubjectTeachers = pgTable(\"section_subject_teachers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id), // الشعبة المحددة\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id), // المادة\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id), // المدرس\n  isLead: boolean(\"is_lead\").notNull().default(false), // هل هو المدرس الأساسي\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Grades/Assessments table\nexport const grades = pgTable(\"grades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  semester: text(\"semester\").notNull(), // e.g., \"الفصل الأول\", \"الفصل الثاني\", \"الفصل الثالث\"\n  assessmentType: assessmentTypeEnum(\"assessment_type\").notNull(),\n  score: decimal(\"score\", { precision: 5, scale: 2 }).notNull(),\n  maxScore: decimal(\"max_score\", { precision: 5, scale: 2 }).notNull().default('100'),\n  date: date(\"date\").notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => teachers.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Attendance table\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  date: date(\"date\").notNull(),\n  status: attendanceStatusEnum(\"status\").notNull(),\n  notes: text(\"notes\"),\n  recordedBy: varchar(\"recorded_by\").references(() => teachers.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Fees/Payments table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  dueDate: date(\"due_date\").notNull(),\n  paymentDate: date(\"payment_date\"),\n  status: paymentStatusEnum(\"status\").notNull().default('pending'),\n  paymentType: text(\"payment_type\").notNull(), // tuition, registration, transport, etc.\n  academicYear: text(\"academic_year\").notNull(),\n  month: text(\"month\"), // for monthly fees\n  notes: text(\"notes\"),\n  receiptNumber: text(\"receipt_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Student Accounts table (for tracking financial obligations and balance)\nexport const studentAccounts = pgTable(\"student_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().unique().references(() => students.id),\n  totalAmountDue: decimal(\"total_amount_due\", { precision: 10, scale: 2 }).notNull().default('0'),\n  totalPaid: decimal(\"total_paid\", { precision: 10, scale: 2 }).notNull().default('0'),\n  currentBalance: decimal(\"current_balance\", { precision: 10, scale: 2 }).notNull().default('0'),\n  academicYear: text(\"academic_year\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payment Transactions table (for recording individual payments)\nexport const paymentTransactions = pgTable(\"payment_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentAccountId: varchar(\"student_account_id\").notNull().references(() => studentAccounts.id),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentDate: date(\"payment_date\").notNull(),\n  paymentMethod: text(\"payment_method\"), // cash, bank_transfer, card, etc.\n  receiptNumber: text(\"receipt_number\"),\n  notes: text(\"notes\"),\n  recordedBy: varchar(\"recorded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notifications/Communications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // announcement, alert, reminder, event\n  targetAudience: text(\"target_audience\").notNull(), // all, students, parents, teachers, specific_class\n  targetClassId: varchar(\"target_class_id\").references(() => classes.id),\n  priority: text(\"priority\").notNull().default('normal'), // low, normal, high, urgent\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// School Settings table\nexport const schoolSettings = pgTable(\"school_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolName: text(\"school_name\").notNull(),\n  schoolNameArabic: text(\"school_name_arabic\").notNull(),\n  currentAcademicYear: text(\"current_academic_year\").notNull(),\n  currency: text(\"currency\").notNull().default('SAR'),\n  dateType: dateTypeEnum(\"date_type\").notNull().default('gregorian'),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  logoUrl: text(\"logo_url\"),\n  primaryColor: text(\"primary_color\").default('#3b82f6'),\n  accentColor: text(\"accent_color\").default('#10b981'),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Teacher Salaries table (monthly salary payments)\nexport const teacherSalaries = pgTable(\"teacher_salaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id),\n  month: text(\"month\").notNull(), // e.g., \"2025-01\"\n  baseSalary: decimal(\"base_salary\", { precision: 10, scale: 2 }).notNull(),\n  bonuses: decimal(\"bonuses\", { precision: 10, scale: 2 }).notNull().default('0'),\n  deductions: decimal(\"deductions\", { precision: 10, scale: 2 }).notNull().default('0'),\n  advancesDeducted: decimal(\"advances_deducted\", { precision: 10, scale: 2 }).notNull().default('0'),\n  netSalary: decimal(\"net_salary\", { precision: 10, scale: 2 }).notNull(),\n  paymentDate: date(\"payment_date\"),\n  status: text(\"status\").notNull().default('pending'), // pending, paid\n  notes: text(\"notes\"),\n  recordedBy: varchar(\"recorded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Teacher Advances table (salary advances)\nexport const teacherAdvances = pgTable(\"teacher_advances\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  advanceDate: date(\"advance_date\").notNull(),\n  deductionMonth: text(\"deduction_month\"), // e.g., \"2025-02\" - when it will be deducted\n  status: text(\"status\").notNull().default('pending'), // pending, deducted\n  notes: text(\"notes\"),\n  recordedBy: varchar(\"recorded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// School Expenses table (daily expenses)\nexport const schoolExpenses = pgTable(\"school_expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: text(\"category\").notNull(), // utilities, maintenance, supplies, transportation, etc.\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  expenseDate: date(\"expense_date\").notNull(),\n  paymentMethod: text(\"payment_method\"), // cash, bank_transfer, card\n  receiptNumber: text(\"receipt_number\"),\n  vendorName: text(\"vendor_name\"),\n  notes: text(\"notes\"),\n  recordedBy: varchar(\"recorded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Teacher Attendance table (حضور وغياب المعلمين)\nexport const teacherAttendance = pgTable(\"teacher_attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id),\n  date: date(\"date\").notNull(),\n  status: teacherAttendanceStatusEnum(\"status\").notNull(),\n  deductFromSalary: boolean(\"deduct_from_salary\").notNull().default(false), // true for unpaid_leave\n  notes: text(\"notes\"),\n  recordedBy: varchar(\"recorded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  class: one(classes, {\n    fields: [students.classId],\n    references: [classes.id],\n  }),\n  grades: many(grades),\n  attendance: many(attendance),\n  payments: many(payments),\n  account: one(studentAccounts),\n  paymentTransactions: many(paymentTransactions),\n}));\n\nexport const teachersRelations = relations(teachers, ({ many }) => ({\n  classes: many(classes),\n  classSubjects: many(classSubjects),\n  grades: many(grades),\n  attendanceRecords: many(attendance),\n  salaries: many(teacherSalaries),\n  advances: many(teacherAdvances),\n  teacherAttendance: many(teacherAttendance),\n}));\n\nexport const educationLevelsRelations = relations(educationLevels, ({ many }) => ({\n  classes: many(classes),\n  classSubjects: many(classSubjects),\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  educationLevel: one(educationLevels, {\n    fields: [classes.educationLevelId],\n    references: [educationLevels.id],\n  }),\n  teacher: one(teachers, {\n    fields: [classes.teacherId],\n    references: [teachers.id],\n  }),\n  students: many(students),\n  grades: many(grades),\n  attendance: many(attendance),\n  notifications: many(notifications),\n}));\n\nexport const subjectsRelations = relations(subjects, ({ many }) => ({\n  classSubjects: many(classSubjects),\n  grades: many(grades),\n}));\n\nexport const classSubjectsRelations = relations(classSubjects, ({ one }) => ({\n  educationLevel: one(educationLevels, {\n    fields: [classSubjects.educationLevelId],\n    references: [educationLevels.id],\n  }),\n  subject: one(subjects, {\n    fields: [classSubjects.subjectId],\n    references: [subjects.id],\n  }),\n  teacher: one(teachers, {\n    fields: [classSubjects.teacherId],\n    references: [teachers.id],\n  }),\n}));\n\nexport const gradesRelations = relations(grades, ({ one }) => ({\n  student: one(students, {\n    fields: [grades.studentId],\n    references: [students.id],\n  }),\n  subject: one(subjects, {\n    fields: [grades.subjectId],\n    references: [subjects.id],\n  }),\n  class: one(classes, {\n    fields: [grades.classId],\n    references: [classes.id],\n  }),\n  teacher: one(teachers, {\n    fields: [grades.teacherId],\n    references: [teachers.id],\n  }),\n}));\n\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  student: one(students, {\n    fields: [attendance.studentId],\n    references: [students.id],\n  }),\n  class: one(classes, {\n    fields: [attendance.classId],\n    references: [classes.id],\n  }),\n  recordedByTeacher: one(teachers, {\n    fields: [attendance.recordedBy],\n    references: [teachers.id],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  student: one(students, {\n    fields: [payments.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const studentAccountsRelations = relations(studentAccounts, ({ one, many }) => ({\n  student: one(students, {\n    fields: [studentAccounts.studentId],\n    references: [students.id],\n  }),\n  transactions: many(paymentTransactions),\n}));\n\nexport const paymentTransactionsRelations = relations(paymentTransactions, ({ one }) => ({\n  studentAccount: one(studentAccounts, {\n    fields: [paymentTransactions.studentAccountId],\n    references: [studentAccounts.id],\n  }),\n  student: one(students, {\n    fields: [paymentTransactions.studentId],\n    references: [students.id],\n  }),\n  recordedByUser: one(users, {\n    fields: [paymentTransactions.recordedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  targetClass: one(classes, {\n    fields: [notifications.targetClassId],\n    references: [classes.id],\n  }),\n  creator: one(users, {\n    fields: [notifications.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const teacherSalariesRelations = relations(teacherSalaries, ({ one }) => ({\n  teacher: one(teachers, {\n    fields: [teacherSalaries.teacherId],\n    references: [teachers.id],\n  }),\n  recordedByUser: one(users, {\n    fields: [teacherSalaries.recordedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const teacherAdvancesRelations = relations(teacherAdvances, ({ one }) => ({\n  teacher: one(teachers, {\n    fields: [teacherAdvances.teacherId],\n    references: [teachers.id],\n  }),\n  recordedByUser: one(users, {\n    fields: [teacherAdvances.recordedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const schoolExpensesRelations = relations(schoolExpenses, ({ one }) => ({\n  recordedByUser: one(users, {\n    fields: [schoolExpenses.recordedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const teacherAttendanceRelations = relations(teacherAttendance, ({ one }) => ({\n  teacher: one(teachers, {\n    fields: [teacherAttendance.teacherId],\n    references: [teachers.id],\n  }),\n  recordedByUser: one(users, {\n    fields: [teacherAttendance.recordedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeacherUserSchema = createInsertSchema(teacherUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertParentStudentSchema = createInsertSchema(parentStudents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeacherSchema = createInsertSchema(teachers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubjectSchema = createInsertSchema(subjects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEducationLevelSchema = createInsertSchema(educationLevels).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassSubjectSchema = createInsertSchema(classSubjects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSectionSubjectTeacherSchema = createInsertSchema(sectionSubjectTeachers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGradeSchema = createInsertSchema(grades).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSchoolSettingsSchema = createInsertSchema(schoolSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertStudentAccountSchema = createInsertSchema(studentAccounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentTransactionSchema = createInsertSchema(paymentTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeacherSalarySchema = createInsertSchema(teacherSalaries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeacherAdvanceSchema = createInsertSchema(teacherAdvances).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSchoolExpenseSchema = createInsertSchema(schoolExpenses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeacherAttendanceSchema = createInsertSchema(teacherAttendance).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Student = typeof students.$inferSelect;\n\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\nexport type Teacher = typeof teachers.$inferSelect;\n\nexport type InsertSubject = z.infer<typeof insertSubjectSchema>;\nexport type Subject = typeof subjects.$inferSelect;\n\nexport type InsertEducationLevel = z.infer<typeof insertEducationLevelSchema>;\nexport type EducationLevel = typeof educationLevels.$inferSelect;\n\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type Class = typeof classes.$inferSelect;\n\nexport type InsertClassSubject = z.infer<typeof insertClassSubjectSchema>;\nexport type ClassSubject = typeof classSubjects.$inferSelect;\n\nexport type InsertSectionSubjectTeacher = z.infer<typeof insertSectionSubjectTeacherSchema>;\nexport type SectionSubjectTeacher = typeof sectionSubjectTeachers.$inferSelect;\n\nexport type InsertGrade = z.infer<typeof insertGradeSchema>;\nexport type Grade = typeof grades.$inferSelect;\n\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\n\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n\nexport type InsertSchoolSettings = z.infer<typeof insertSchoolSettingsSchema>;\nexport type SchoolSettings = typeof schoolSettings.$inferSelect;\n\nexport type InsertStudentAccount = z.infer<typeof insertStudentAccountSchema>;\nexport type StudentAccount = typeof studentAccounts.$inferSelect;\n\nexport type InsertPaymentTransaction = z.infer<typeof insertPaymentTransactionSchema>;\nexport type PaymentTransaction = typeof paymentTransactions.$inferSelect;\n\nexport type InsertTeacherSalary = z.infer<typeof insertTeacherSalarySchema>;\nexport type TeacherSalary = typeof teacherSalaries.$inferSelect;\n\nexport type InsertTeacherAdvance = z.infer<typeof insertTeacherAdvanceSchema>;\nexport type TeacherAdvance = typeof teacherAdvances.$inferSelect;\n\nexport type InsertSchoolExpense = z.infer<typeof insertSchoolExpenseSchema>;\nexport type SchoolExpense = typeof schoolExpenses.$inferSelect;\n\nexport type InsertTeacherAttendance = z.infer<typeof insertTeacherAttendanceSchema>;\nexport type TeacherAttendance = typeof teacherAttendance.$inferSelect;\n\nexport type InsertTeacherUser = z.infer<typeof insertTeacherUserSchema>;\nexport type TeacherUser = typeof teacherUsers.$inferSelect;\n\nexport type InsertParentStudent = z.infer<typeof insertParentStudentSchema>;\nexport type ParentStudent = typeof parentStudents.$inferSelect;\n","size_bytes":25331},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"DEPLOY_GUIDE_AR.md":{"content":"# 🚀 دليل النشر المباشر على HestiaCP\n\n## ✅ ما تم إعداده:\n\nتم إنشاء سكريبتات نشر تلقائية:\n\n1. **`deploy.sh`** - النشر الكامل (أول مرة أو عند تغيير قاعدة البيانات)\n2. **`deploy-quick.sh`** - تحديث سريع (فقط الكود)\n\n---\n\n## 📋 الخطوات المطلوبة:\n\n### **المرحلة 1: إعداد VPS (مرة واحدة)**\n\n#### 1. اتصل بـ VPS عبر SSH:\n```bash\nssh root@your-vps-ip\n```\n\n#### 2. ثبّت إضافة Node.js:\n```bash\ncd /usr/local/src\ngit clone https://github.com/cristiancosano/hestiacp-nodejs.git\ncd hestiacp-nodejs\nchmod +x install.sh\n./install.sh\n```\n\n#### 3. أنشئ قاعدة بيانات PostgreSQL:\n\n**من واجهة HestiaCP:**\n- اذهب إلى **Databases** → **PostgreSQL**\n- اضغط **Add Database**\n- املأ:\n  - Database: `school_db`\n  - User: `school_user`\n  - Password: (كلمة مرور قوية - احفظها!)\n\n**أو من Terminal:**\n```bash\nv-add-database admin school_db school_user YourStrongPass123 postgresql\n```\n\n#### 4. أنشئ النطاق (Domain) في HestiaCP:\n- اذهب إلى **Web**\n- اضغط **Add Web Domain**\n- أدخل النطاق: `yourdomain.com`\n- احفظ\n\n#### 5. أنشئ مجلد التطبيق:\n```bash\nmkdir -p /home/admin/web/yourdomain.com/nodeapp\nchown -R admin:admin /home/admin/web/yourdomain.com/nodeapp\n```\n\n---\n\n### **المرحلة 2: إعداد SSH من Replit (مرة واحدة)**\n\n#### 1. إنشاء SSH Key في Replit:\n```bash\n# في Shell الخاص بـ Replit\nssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N \"\"\ncat ~/.ssh/id_rsa.pub\n```\n\n#### 2. انسخ المفتاح العام واذهب لـ VPS:\n```bash\n# على VPS\nnano /home/admin/.ssh/authorized_keys\n# الصق المفتاح العام واحفظ\n```\n\n#### 3. اختبر الاتصال من Replit:\n```bash\nssh admin@your-vps-ip\n# يجب أن يدخل مباشرة بدون كلمة مرور\n```\n\n---\n\n### **المرحلة 3: تعديل سكريبت النشر**\n\nافتح ملف `deploy.sh` وعدّل:\n\n```bash\nVPS_USER=\"admin\"                    # مستخدم HestiaCP\nVPS_HOST=\"123.45.67.89\"            # IP الخاص بـ VPS (أو النطاق)\nDOMAIN=\"yourdomain.com\"             # النطاق الخاص بك\nDB_NAME=\"school_db\"                 # اسم قاعدة البيانات\nDB_USER=\"school_user\"               # مستخدم قاعدة البيانات\nDB_PASS=\"YourStrongPass123\"         # كلمة مرور قاعدة البيانات\n```\n\nافعل نفس الشيء لـ `deploy-quick.sh`\n\n---\n\n### **المرحلة 4: النشر! 🚀**\n\n#### **النشر الكامل (أول مرة):**\n```bash\n# في Replit Shell\nchmod +x deploy.sh\n./deploy.sh\n```\n\nهذا سيقوم بـ:\n- ✅ بناء المشروع\n- ✅ رفع الملفات\n- ✅ استيراد قاعدة البيانات\n- ✅ تثبيت الحزم\n- ✅ تشغيل التطبيق مع PM2\n\n#### **تحديث سريع (بعد تعديل الكود):**\n```bash\nchmod +x deploy-quick.sh\n./deploy-quick.sh\n```\n\n---\n\n### **المرحلة 5: تفعيل Node.js في HestiaCP**\n\n**مهم جداً - آخر خطوة!**\n\n1. افتح لوحة HestiaCP\n2. اذهب إلى **Web** → اختر `yourdomain.com`\n3. اضغط **Edit**\n4. **Advanced Options** → **Proxy Template** → اختر **\"NodeJS\"**\n5. اضغط **Save**\n\nالآن موقعك يعمل! 🎉\n\n---\n\n## 🔍 فحص الحالة والسجلات\n\n### على VPS:\n```bash\n# حالة التطبيق\npm2 status\n\n# السجلات المباشرة\npm2 logs yourdomain.com\n\n# إعادة تشغيل\npm2 restart yourdomain.com\n\n# إيقاف\npm2 stop yourdomain.com\n```\n\n### في HestiaCP:\n- **Web** → النطاق → **Statistics**\n- **Logs** → سجلات Nginx\n\n---\n\n## 🛠️ استكشاف الأخطاء\n\n### المشكلة: لا يمكن الاتصال بـ VPS\n**الحل:**\n```bash\n# تأكد من SSH key\nssh-add ~/.ssh/id_rsa\nssh -v admin@your-vps-ip\n```\n\n### المشكلة: 502 Bad Gateway\n**الحل:**\n1. تحقق من أن PM2 يعمل: `pm2 status`\n2. تحقق من Port في `.env`: `PORT=5000`\n3. أعد تطبيق Proxy Template في HestiaCP\n\n### المشكلة: خطأ في قاعدة البيانات\n**الحل:**\n```bash\n# على VPS\npsql -U school_user -d school_db\n# اختبر الاتصال\n\\dt  # عرض الجداول\n```\n\n---\n\n## 🎯 النشر التلقائي (اختياري)\n\nلنشر تلقائي عند كل تحديث:\n\n1. ارفع المشروع على GitHub\n2. أنشئ GitHub Action (ملف `.github/workflows/deploy.yml`)\n3. كل مرة تدفع تحديث، سيُنشر تلقائياً!\n\n---\n\n## 📝 ملخص الأوامر السريعة\n\n```bash\n# النشر الكامل (أول مرة)\n./deploy.sh\n\n# تحديث سريع\n./deploy-quick.sh\n\n# فحص الحالة (على VPS)\nssh admin@vps \"pm2 status\"\n\n# السجلات (على VPS)\nssh admin@vps \"pm2 logs yourdomain.com --lines 50\"\n```\n\n---\n\n## ✅ قائمة التحقق النهائية\n\n- [ ] تثبيت إضافة hestiacp-nodejs على VPS\n- [ ] إنشاء قاعدة بيانات PostgreSQL\n- [ ] إنشاء النطاق في HestiaCP\n- [ ] إعداد SSH key بين Replit و VPS\n- [ ] تعديل `deploy.sh` بمعلوماتك\n- [ ] تشغيل `./deploy.sh`\n- [ ] تفعيل Proxy Template \"NodeJS\" في HestiaCP\n- [ ] فتح الموقع: `https://yourdomain.com`\n\n---\n\n**🎉 مبروك! موقعك الآن على الهواء مباشرة!**\n","size_bytes":5474},"server/storage.ts":{"content":"import { \n  users, students, teachers, subjects, classes, classSubjects, educationLevels,\n  grades, attendance, payments, notifications, schoolSettings,\n  studentAccounts, paymentTransactions, teacherSalaries, teacherAdvances, schoolExpenses,\n  teacherAttendance, teacherUsers, parentStudents, sectionSubjectTeachers,\n  type User, type InsertUser,\n  type Student, type InsertStudent,\n  type Teacher, type InsertTeacher,\n  type Subject, type InsertSubject,\n  type EducationLevel, type InsertEducationLevel,\n  type Class, type InsertClass,\n  type ClassSubject, type InsertClassSubject,\n  type SectionSubjectTeacher, type InsertSectionSubjectTeacher,\n  type Grade, type InsertGrade,\n  type Attendance, type InsertAttendance,\n  type Payment, type InsertPayment,\n  type Notification, type InsertNotification,\n  type SchoolSettings, type InsertSchoolSettings,\n  type StudentAccount, type InsertStudentAccount,\n  type PaymentTransaction, type InsertPaymentTransaction,\n  type TeacherSalary, type InsertTeacherSalary,\n  type TeacherAdvance, type InsertTeacherAdvance,\n  type SchoolExpense, type InsertSchoolExpense,\n  type TeacherAttendance, type InsertTeacherAttendance,\n  type TeacherUser, type InsertTeacherUser,\n  type ParentStudent, type InsertParentStudent,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, gte, lte, like, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Teacher Users (linking)\n  createTeacherUser(teacherUser: InsertTeacherUser): Promise<TeacherUser>;\n  getTeacherUserByUserId(userId: string): Promise<TeacherUser | undefined>;\n  deleteTeacherUserByUserId(userId: string): Promise<void>;\n  deleteTeacherUserByTeacherId(teacherId: string): Promise<void>;\n  canTeacherAccessStudent(teacherId: string, studentId: string, subjectId?: string): Promise<boolean>;\n  canTeacherAccessClass(teacherId: string, classId: string): Promise<boolean>;\n  \n  // Parent Students (linking)\n  createParentStudent(parentStudent: InsertParentStudent): Promise<ParentStudent>;\n  getParentStudentsByUserId(userId: string): Promise<ParentStudent[]>;\n  deleteParentStudentsByUserId(userId: string): Promise<void>;\n  \n  // Students\n  getAllStudents(): Promise<Student[]>;\n  getStudent(id: string): Promise<Student | undefined>;\n  getStudentsByClass(classId: string): Promise<Student[]>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student>;\n  deleteStudent(id: string): Promise<void>;\n  searchStudents(query: string): Promise<Student[]>;\n  \n  // Teachers\n  getAllTeachers(): Promise<Teacher[]>;\n  getTeacher(id: string): Promise<Teacher | undefined>;\n  createTeacher(teacher: InsertTeacher): Promise<Teacher>;\n  updateTeacher(id: string, teacher: Partial<InsertTeacher>): Promise<Teacher>;\n  deleteTeacher(id: string): Promise<void>;\n  \n  // Subjects\n  getAllSubjects(): Promise<Subject[]>;\n  getSubject(id: string): Promise<Subject | undefined>;\n  createSubject(subject: InsertSubject): Promise<Subject>;\n  updateSubject(id: string, subject: Partial<InsertSubject>): Promise<Subject>;\n  deleteSubject(id: string): Promise<void>;\n  \n  // Education Levels (المراحل الدراسية)\n  getAllEducationLevels(): Promise<EducationLevel[]>;\n  getEducationLevel(id: string): Promise<EducationLevel | undefined>;\n  createEducationLevel(level: InsertEducationLevel): Promise<EducationLevel>;\n  updateEducationLevel(id: string, level: Partial<InsertEducationLevel>): Promise<EducationLevel>;\n  deleteEducationLevel(id: string): Promise<void>;\n  \n  // Classes\n  getAllClasses(): Promise<Class[]>;\n  getClass(id: string): Promise<Class | undefined>;\n  getClassesByEducationLevel(levelId: string): Promise<Class[]>;\n  createClass(classData: InsertClass): Promise<Class>;\n  updateClass(id: string, classData: Partial<InsertClass>): Promise<Class>;\n  deleteClass(id: string): Promise<void>;\n  \n  // Class Subjects (Grade-level)\n  getGradeSubjects(educationLevelId: string, grade: string): Promise<ClassSubject[]>;\n  getAllClassSubjects(): Promise<ClassSubject[]>;\n  createClassSubject(classSubject: InsertClassSubject): Promise<ClassSubject>;\n  deleteClassSubject(id: string): Promise<void>;\n  \n  // Section Subject Teachers (Teacher Assignments)\n  getTeacherAssignments(teacherId: string): Promise<SectionSubjectTeacher[]>;\n  getClassSubjectTeachers(classId: string, subjectId: string): Promise<SectionSubjectTeacher[]>;\n  getTeacherClasses(teacherId: string): Promise<Class[]>;\n  getTeacherSubjectsInClass(teacherId: string, classId: string): Promise<Subject[]>;\n  createSectionSubjectTeacher(assignment: InsertSectionSubjectTeacher): Promise<SectionSubjectTeacher>;\n  deleteSectionSubjectTeacher(id: string): Promise<void>;\n  canTeacherAccessSubjectInClass(teacherId: string, classId: string, subjectId: string): Promise<boolean>;\n  \n  // Grades\n  getAllGrades(): Promise<Grade[]>;\n  getStudentGrades(studentId: string): Promise<Grade[]>;\n  getClassGrades(classId: string): Promise<Grade[]>;\n  createGrade(grade: InsertGrade): Promise<Grade>;\n  updateGrade(id: string, grade: Partial<InsertGrade>): Promise<Grade>;\n  deleteGrade(id: string): Promise<void>;\n  \n  // Attendance\n  getStudentAttendance(studentId: string, startDate?: string, endDate?: string): Promise<Attendance[]>;\n  getClassAttendance(classId: string, date: string): Promise<Attendance[]>;\n  getAllAttendance(): Promise<Attendance[]>;\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  updateAttendance(id: string, attendance: Partial<InsertAttendance>): Promise<Attendance>;\n  \n  // Payments\n  getStudentPayments(studentId: string): Promise<Payment[]>;\n  getAllPayments(): Promise<Payment[]>;\n  getPendingPayments(): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment>;\n  \n  // Notifications\n  getAllNotifications(): Promise<Notification[]>;\n  getNotification(id: string): Promise<Notification | undefined>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n  \n  // School Settings\n  getSchoolSettings(): Promise<SchoolSettings | undefined>;\n  updateSchoolSettings(settings: Partial<InsertSchoolSettings>): Promise<SchoolSettings>;\n  \n  // Student Accounts (Accounting)\n  getStudentAccount(studentId: string): Promise<StudentAccount | undefined>;\n  createStudentAccount(account: InsertStudentAccount): Promise<StudentAccount>;\n  updateStudentAccount(id: string, account: Partial<InsertStudentAccount>): Promise<StudentAccount>;\n  getAllStudentAccounts(): Promise<StudentAccount[]>;\n  \n  // Payment Transactions\n  getStudentTransactions(studentId: string): Promise<PaymentTransaction[]>;\n  createPaymentTransaction(transaction: InsertPaymentTransaction): Promise<PaymentTransaction>;\n  getAllTransactions(): Promise<PaymentTransaction[]>;\n  deletePaymentTransaction(id: string): Promise<void>;\n  \n  // Teacher Salaries\n  getTeacherSalaries(teacherId: string): Promise<TeacherSalary[]>;\n  getAllTeacherSalaries(month?: string): Promise<TeacherSalary[]>;\n  createTeacherSalary(salary: InsertTeacherSalary): Promise<TeacherSalary>;\n  updateTeacherSalary(id: string, salary: Partial<InsertTeacherSalary>): Promise<TeacherSalary>;\n  deleteTeacherSalary(id: string): Promise<void>;\n  \n  // Teacher Advances\n  getTeacherAdvances(teacherId: string): Promise<TeacherAdvance[]>;\n  getAllTeacherAdvances(status?: string): Promise<TeacherAdvance[]>;\n  createTeacherAdvance(advance: InsertTeacherAdvance): Promise<TeacherAdvance>;\n  updateTeacherAdvance(id: string, advance: Partial<InsertTeacherAdvance>): Promise<TeacherAdvance>;\n  deleteTeacherAdvance(id: string): Promise<void>;\n  \n  // School Expenses\n  getAllSchoolExpenses(startDate?: string, endDate?: string): Promise<SchoolExpense[]>;\n  getSchoolExpensesByCategory(category: string): Promise<SchoolExpense[]>;\n  createSchoolExpense(expense: InsertSchoolExpense): Promise<SchoolExpense>;\n  updateSchoolExpense(id: string, expense: Partial<InsertSchoolExpense>): Promise<SchoolExpense>;\n  deleteSchoolExpense(id: string): Promise<void>;\n  \n  // Teacher Attendance\n  getTeacherAttendance(teacherId: string, startDate?: string, endDate?: string): Promise<TeacherAttendance[]>;\n  getAllTeacherAttendance(date?: string): Promise<TeacherAttendance[]>;\n  createTeacherAttendance(attendance: InsertTeacherAttendance): Promise<TeacherAttendance>;\n  updateTeacherAttendance(id: string, attendance: Partial<InsertTeacherAttendance>): Promise<TeacherAttendance>;\n  deleteTeacherAttendance(id: string): Promise<void>;\n  getTeacherUnpaidLeaveDays(teacherId: string, month: string): Promise<number>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db.update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Teacher Users (linking)\n  async createTeacherUser(teacherUser: InsertTeacherUser): Promise<TeacherUser> {\n    const [created] = await db.insert(teacherUsers).values(teacherUser).returning();\n    return created;\n  }\n\n  async getTeacherUserByUserId(userId: string): Promise<TeacherUser | undefined> {\n    const result = await db.select().from(teacherUsers).where(eq(teacherUsers.userId, userId));\n    return result[0];\n  }\n\n  async deleteTeacherUserByUserId(userId: string): Promise<void> {\n    await db.delete(teacherUsers).where(eq(teacherUsers.userId, userId));\n  }\n\n  async deleteTeacherUserByTeacherId(teacherId: string): Promise<void> {\n    await db.delete(teacherUsers).where(eq(teacherUsers.teacherId, teacherId));\n  }\n\n  async canTeacherAccessStudent(teacherId: string, studentId: string, subjectId?: string): Promise<boolean> {\n    const student = await this.getStudent(studentId);\n    if (!student || !student.classId) return false;\n\n    const studentClass = await this.getClass(student.classId);\n    if (!studentClass) return false;\n\n    if (studentClass.teacherId === teacherId) {\n      return true;\n    }\n\n    if (subjectId && studentClass.educationLevelId && studentClass.grade) {\n      const [classSubject] = await db\n        .select()\n        .from(classSubjects)\n        .where(\n          and(\n            eq(classSubjects.teacherId, teacherId),\n            eq(classSubjects.subjectId, subjectId),\n            eq(classSubjects.educationLevelId, studentClass.educationLevelId),\n            eq(classSubjects.grade, studentClass.grade)\n          )\n        );\n      \n      if (classSubject) return true;\n    }\n\n    return false;\n  }\n\n  async canTeacherAccessClass(teacherId: string, classId: string): Promise<boolean> {\n    const classData = await this.getClass(classId);\n    if (!classData) return false;\n\n    if (classData.teacherId === teacherId) {\n      return true;\n    }\n\n    if (classData.educationLevelId && classData.grade) {\n      const [classSubject] = await db\n        .select()\n        .from(classSubjects)\n        .where(\n          and(\n            eq(classSubjects.teacherId, teacherId),\n            eq(classSubjects.educationLevelId, classData.educationLevelId),\n            eq(classSubjects.grade, classData.grade)\n          )\n        );\n      \n      if (classSubject) return true;\n    }\n\n    return false;\n  }\n\n  // Parent Students (linking)\n  async createParentStudent(parentStudent: InsertParentStudent): Promise<ParentStudent> {\n    const [created] = await db.insert(parentStudents).values(parentStudent).returning();\n    return created;\n  }\n\n  async getParentStudentsByUserId(userId: string): Promise<ParentStudent[]> {\n    return await db.select().from(parentStudents).where(eq(parentStudents.userId, userId));\n  }\n\n  async deleteParentStudentsByUserId(userId: string): Promise<void> {\n    await db.delete(parentStudents).where(eq(parentStudents.userId, userId));\n  }\n\n  // Students\n  async getAllStudents(): Promise<Student[]> {\n    return await db.select().from(students).orderBy(desc(students.createdAt));\n  }\n\n  async getStudent(id: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.id, id));\n    return student || undefined;\n  }\n\n  async getStudentsByClass(classId: string): Promise<Student[]> {\n    return await db.select().from(students).where(eq(students.classId, classId));\n  }\n\n  async createStudent(student: InsertStudent): Promise<Student> {\n    const [newStudent] = await db.insert(students).values(student).returning();\n    return newStudent;\n  }\n\n  async updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student> {\n    const [updated] = await db.update(students)\n      .set({ ...student, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteStudent(id: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      await tx.delete(paymentTransactions).where(eq(paymentTransactions.studentId, id));\n      await tx.delete(studentAccounts).where(eq(studentAccounts.studentId, id));\n      await tx.delete(payments).where(eq(payments.studentId, id));\n      await tx.delete(attendance).where(eq(attendance.studentId, id));\n      await tx.delete(grades).where(eq(grades.studentId, id));\n      await tx.delete(students).where(eq(students.id, id));\n    });\n  }\n\n  async searchStudents(query: string): Promise<Student[]> {\n    return await db.select().from(students)\n      .where(like(students.arabicName, `%${query}%`))\n      .orderBy(desc(students.createdAt));\n  }\n\n  // Teachers\n  async getAllTeachers(): Promise<Teacher[]> {\n    return await db.select().from(teachers).orderBy(desc(teachers.createdAt));\n  }\n\n  async getTeacher(id: string): Promise<Teacher | undefined> {\n    const [teacher] = await db.select().from(teachers).where(eq(teachers.id, id));\n    return teacher || undefined;\n  }\n\n  async createTeacher(teacher: InsertTeacher): Promise<Teacher> {\n    const [newTeacher] = await db.insert(teachers).values(teacher).returning();\n    return newTeacher;\n  }\n\n  async updateTeacher(id: string, teacher: Partial<InsertTeacher>): Promise<Teacher> {\n    const [updated] = await db.update(teachers)\n      .set({ ...teacher, updatedAt: new Date() })\n      .where(eq(teachers.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTeacher(id: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      await tx.delete(teacherAdvances).where(eq(teacherAdvances.teacherId, id));\n      await tx.delete(teacherSalaries).where(eq(teacherSalaries.teacherId, id));\n      await tx.delete(classSubjects).where(eq(classSubjects.teacherId, id));\n      await tx.update(classes).set({ teacherId: null }).where(eq(classes.teacherId, id));\n      await tx.update(grades).set({ teacherId: null }).where(eq(grades.teacherId, id));\n      await tx.update(attendance).set({ recordedBy: null }).where(eq(attendance.recordedBy, id));\n      await tx.delete(teachers).where(eq(teachers.id, id));\n    });\n  }\n\n  // Subjects\n  async getAllSubjects(): Promise<Subject[]> {\n    return await db.select().from(subjects).orderBy(subjects.arabicName);\n  }\n\n  async getSubject(id: string): Promise<Subject | undefined> {\n    const [subject] = await db.select().from(subjects).where(eq(subjects.id, id));\n    return subject || undefined;\n  }\n\n  async createSubject(subject: InsertSubject): Promise<Subject> {\n    const [newSubject] = await db.insert(subjects).values(subject).returning();\n    return newSubject;\n  }\n\n  async updateSubject(id: string, subject: Partial<InsertSubject>): Promise<Subject> {\n    const [updated] = await db.update(subjects)\n      .set(subject)\n      .where(eq(subjects.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteSubject(id: string): Promise<void> {\n    await db.delete(subjects).where(eq(subjects.id, id));\n  }\n\n  // Education Levels\n  async getAllEducationLevels(): Promise<EducationLevel[]> {\n    return await db.select().from(educationLevels).orderBy(educationLevels.order);\n  }\n\n  async getEducationLevel(id: string): Promise<EducationLevel | undefined> {\n    const [level] = await db.select().from(educationLevels).where(eq(educationLevels.id, id));\n    return level || undefined;\n  }\n\n  async createEducationLevel(level: InsertEducationLevel): Promise<EducationLevel> {\n    const [newLevel] = await db.insert(educationLevels).values(level).returning();\n    return newLevel;\n  }\n\n  async updateEducationLevel(id: string, level: Partial<InsertEducationLevel>): Promise<EducationLevel> {\n    const [updated] = await db.update(educationLevels)\n      .set(level)\n      .where(eq(educationLevels.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteEducationLevel(id: string): Promise<void> {\n    await db.delete(educationLevels).where(eq(educationLevels.id, id));\n  }\n\n  // Classes\n  async getAllClasses(): Promise<Class[]> {\n    return await db.select().from(classes).orderBy(classes.grade, classes.section);\n  }\n\n  async getClass(id: string): Promise<Class | undefined> {\n    const [classData] = await db.select().from(classes).where(eq(classes.id, id));\n    return classData || undefined;\n  }\n\n  async getClassesByEducationLevel(levelId: string): Promise<Class[]> {\n    return await db.select().from(classes).where(eq(classes.educationLevelId, levelId)).orderBy(classes.grade, classes.section);\n  }\n\n  async createClass(classData: InsertClass): Promise<Class> {\n    const [newClass] = await db.insert(classes).values(classData).returning();\n    return newClass;\n  }\n\n  async updateClass(id: string, classData: Partial<InsertClass>): Promise<Class> {\n    const [updated] = await db.update(classes)\n      .set(classData)\n      .where(eq(classes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteClass(id: string): Promise<void> {\n    await db.delete(classes).where(eq(classes.id, id));\n  }\n\n  // Class Subjects (Grade-level)\n  async getGradeSubjects(educationLevelId: string, grade: string): Promise<ClassSubject[]> {\n    return await db.select().from(classSubjects)\n      .where(and(\n        eq(classSubjects.educationLevelId, educationLevelId),\n        eq(classSubjects.grade, grade)\n      ));\n  }\n\n  async getAllClassSubjects(): Promise<ClassSubject[]> {\n    return await db.select().from(classSubjects);\n  }\n\n  async createClassSubject(classSubject: InsertClassSubject): Promise<ClassSubject> {\n    const [newClassSubject] = await db.insert(classSubjects).values(classSubject).returning();\n    return newClassSubject;\n  }\n\n  async deleteClassSubject(id: string): Promise<void> {\n    await db.delete(classSubjects).where(eq(classSubjects.id, id));\n  }\n\n  // Section Subject Teachers (Teacher Assignments)\n  async getTeacherAssignments(teacherId: string): Promise<SectionSubjectTeacher[]> {\n    return await db.select().from(sectionSubjectTeachers).where(eq(sectionSubjectTeachers.teacherId, teacherId));\n  }\n\n  async getClassSubjectTeachers(classId: string, subjectId: string): Promise<SectionSubjectTeacher[]> {\n    return await db.select().from(sectionSubjectTeachers)\n      .where(and(\n        eq(sectionSubjectTeachers.classId, classId),\n        eq(sectionSubjectTeachers.subjectId, subjectId)\n      ));\n  }\n\n  async getTeacherClasses(teacherId: string): Promise<Class[]> {\n    const assignments = await db.select().from(sectionSubjectTeachers)\n      .where(eq(sectionSubjectTeachers.teacherId, teacherId));\n    \n    const classIds = Array.from(new Set(assignments.map(a => a.classId)));\n    if (classIds.length === 0) return [];\n    \n    return await db.select().from(classes)\n      .where(sql`${classes.id} IN ${sql.raw(`(${classIds.map(id => `'${id}'`).join(',')})`)}`);\n  }\n\n  async getTeacherSubjectsInClass(teacherId: string, classId: string): Promise<Subject[]> {\n    const assignments = await db.select().from(sectionSubjectTeachers)\n      .where(and(\n        eq(sectionSubjectTeachers.teacherId, teacherId),\n        eq(sectionSubjectTeachers.classId, classId)\n      ));\n    \n    const subjectIds = assignments.map(a => a.subjectId);\n    if (subjectIds.length === 0) return [];\n    \n    return await db.select().from(subjects)\n      .where(sql`${subjects.id} IN ${sql.raw(`(${subjectIds.map(id => `'${id}'`).join(',')})`)}`);\n  }\n\n  async createSectionSubjectTeacher(assignment: InsertSectionSubjectTeacher): Promise<SectionSubjectTeacher> {\n    const [newAssignment] = await db.insert(sectionSubjectTeachers).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async deleteSectionSubjectTeacher(id: string): Promise<void> {\n    await db.delete(sectionSubjectTeachers).where(eq(sectionSubjectTeachers.id, id));\n  }\n\n  async canTeacherAccessSubjectInClass(teacherId: string, classId: string, subjectId: string): Promise<boolean> {\n    const assignment = await db.select().from(sectionSubjectTeachers)\n      .where(and(\n        eq(sectionSubjectTeachers.teacherId, teacherId),\n        eq(sectionSubjectTeachers.classId, classId),\n        eq(sectionSubjectTeachers.subjectId, subjectId)\n      ))\n      .limit(1);\n    \n    return assignment.length > 0;\n  }\n\n  // Grades\n  async getAllGrades(): Promise<Grade[]> {\n    return await db.select().from(grades)\n      .orderBy(desc(grades.date));\n  }\n\n  async getStudentGrades(studentId: string): Promise<Grade[]> {\n    return await db.select().from(grades)\n      .where(eq(grades.studentId, studentId))\n      .orderBy(desc(grades.date));\n  }\n\n  async getClassGrades(classId: string): Promise<Grade[]> {\n    return await db.select().from(grades)\n      .where(eq(grades.classId, classId))\n      .orderBy(desc(grades.date));\n  }\n\n  async createGrade(grade: InsertGrade): Promise<Grade> {\n    const [newGrade] = await db.insert(grades)\n      .values(grade)\n      .returning();\n    return newGrade;\n  }\n\n  async updateGrade(id: string, grade: Partial<InsertGrade>): Promise<Grade> {\n    const [updated] = await db.update(grades)\n      .set(grade)\n      .where(eq(grades.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteGrade(id: string): Promise<void> {\n    await db.delete(grades).where(eq(grades.id, id));\n  }\n\n  // Attendance\n  async getStudentAttendance(studentId: string, startDate?: string, endDate?: string): Promise<Attendance[]> {\n    if (startDate && endDate) {\n      return await db.select().from(attendance)\n        .where(\n          and(\n            eq(attendance.studentId, studentId),\n            gte(attendance.date, startDate),\n            lte(attendance.date, endDate)\n          )\n        )\n        .orderBy(desc(attendance.date));\n    }\n    \n    return await db.select().from(attendance)\n      .where(eq(attendance.studentId, studentId))\n      .orderBy(desc(attendance.date));\n  }\n\n  async getClassAttendance(classId: string, date: string): Promise<Attendance[]> {\n    return await db.select().from(attendance)\n      .where(and(\n        eq(attendance.classId, classId),\n        eq(attendance.date, date)\n      ));\n  }\n\n  async getAllAttendance(): Promise<Attendance[]> {\n    return await db.select().from(attendance);\n  }\n\n  async createAttendance(attendanceData: InsertAttendance): Promise<Attendance> {\n    const [newAttendance] = await db.insert(attendance).values(attendanceData).returning();\n    return newAttendance;\n  }\n\n  async updateAttendance(id: string, attendanceData: Partial<InsertAttendance>): Promise<Attendance> {\n    const [updated] = await db.update(attendance)\n      .set(attendanceData)\n      .where(eq(attendance.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Payments\n  async getStudentPayments(studentId: string): Promise<Payment[]> {\n    return await db.select().from(payments)\n      .where(eq(payments.studentId, studentId))\n      .orderBy(desc(payments.dueDate));\n  }\n\n  async getAllPayments(): Promise<Payment[]> {\n    return await db.select().from(payments).orderBy(desc(payments.dueDate));\n  }\n\n  async getPendingPayments(): Promise<Payment[]> {\n    return await db.select().from(payments)\n      .where(eq(payments.status, 'pending'))\n      .orderBy(desc(payments.dueDate));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db.insert(payments).values(payment).returning();\n    return newPayment;\n  }\n\n  async updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment> {\n    const [updated] = await db.update(payments)\n      .set({ ...payment, updatedAt: new Date() })\n      .where(eq(payments.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Notifications\n  async getAllNotifications(): Promise<Notification[]> {\n    return await db.select().from(notifications).orderBy(desc(notifications.createdAt));\n  }\n\n  async getNotification(id: string): Promise<Notification | undefined> {\n    const [notification] = await db.select().from(notifications).where(eq(notifications.id, id));\n    return notification || undefined;\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db.update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n  }\n\n  // School Settings\n  async getSchoolSettings(): Promise<SchoolSettings | undefined> {\n    const [settings] = await db.select().from(schoolSettings).limit(1);\n    return settings || undefined;\n  }\n\n  async updateSchoolSettings(settings: Partial<InsertSchoolSettings>): Promise<SchoolSettings> {\n    const existing = await this.getSchoolSettings();\n    \n    if (existing) {\n      const [updated] = await db.update(schoolSettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(schoolSettings.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(schoolSettings)\n        .values(settings as InsertSchoolSettings)\n        .returning();\n      return created;\n    }\n  }\n\n  // Student Accounts\n  async getStudentAccount(studentId: string): Promise<StudentAccount | undefined> {\n    const [account] = await db.select().from(studentAccounts)\n      .where(eq(studentAccounts.studentId, studentId));\n    return account || undefined;\n  }\n\n  async createStudentAccount(account: InsertStudentAccount): Promise<StudentAccount> {\n    const [newAccount] = await db.insert(studentAccounts).values(account).returning();\n    return newAccount;\n  }\n\n  async updateStudentAccount(id: string, account: Partial<InsertStudentAccount>): Promise<StudentAccount> {\n    const [updated] = await db.update(studentAccounts)\n      .set({ ...account, updatedAt: new Date() })\n      .where(eq(studentAccounts.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getAllStudentAccounts(): Promise<StudentAccount[]> {\n    return await db.select().from(studentAccounts).orderBy(desc(studentAccounts.createdAt));\n  }\n\n  // Payment Transactions\n  async getStudentTransactions(studentId: string): Promise<PaymentTransaction[]> {\n    return await db.select().from(paymentTransactions)\n      .where(eq(paymentTransactions.studentId, studentId))\n      .orderBy(desc(paymentTransactions.paymentDate));\n  }\n\n  async createPaymentTransaction(transaction: InsertPaymentTransaction): Promise<PaymentTransaction> {\n    const [newTransaction] = await db.insert(paymentTransactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getAllTransactions(): Promise<PaymentTransaction[]> {\n    return await db.select().from(paymentTransactions).orderBy(desc(paymentTransactions.paymentDate));\n  }\n\n  async deletePaymentTransaction(id: string): Promise<void> {\n    const [transaction] = await db.select().from(paymentTransactions).where(eq(paymentTransactions.id, id));\n    if (!transaction) return;\n\n    await db.delete(paymentTransactions).where(eq(paymentTransactions.id, id));\n\n    const account = await this.getStudentAccount(transaction.studentId);\n    if (account) {\n      const newTotalPaid = Number(account.totalPaid) - Number(transaction.amount);\n      const newBalance = Number(account.totalAmountDue) - newTotalPaid;\n      await this.updateStudentAccount(account.id, {\n        totalPaid: newTotalPaid.toFixed(2),\n        currentBalance: newBalance.toFixed(2),\n      });\n    }\n  }\n\n  // Teacher Salaries\n  async getTeacherSalaries(teacherId: string): Promise<TeacherSalary[]> {\n    return await db.select().from(teacherSalaries)\n      .where(eq(teacherSalaries.teacherId, teacherId))\n      .orderBy(desc(teacherSalaries.month));\n  }\n\n  async getAllTeacherSalaries(month?: string): Promise<TeacherSalary[]> {\n    if (month) {\n      return await db.select().from(teacherSalaries)\n        .where(eq(teacherSalaries.month, month))\n        .orderBy(desc(teacherSalaries.createdAt));\n    }\n    return await db.select().from(teacherSalaries).orderBy(desc(teacherSalaries.month));\n  }\n\n  async createTeacherSalary(salary: InsertTeacherSalary): Promise<TeacherSalary> {\n    const [newSalary] = await db.insert(teacherSalaries).values(salary).returning();\n    return newSalary;\n  }\n\n  async updateTeacherSalary(id: string, salary: Partial<InsertTeacherSalary>): Promise<TeacherSalary> {\n    const [updated] = await db.update(teacherSalaries)\n      .set({ ...salary, updatedAt: new Date() })\n      .where(eq(teacherSalaries.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTeacherSalary(id: string): Promise<void> {\n    await db.delete(teacherSalaries).where(eq(teacherSalaries.id, id));\n  }\n\n  // Teacher Advances\n  async getTeacherAdvances(teacherId: string): Promise<TeacherAdvance[]> {\n    return await db.select().from(teacherAdvances)\n      .where(eq(teacherAdvances.teacherId, teacherId))\n      .orderBy(desc(teacherAdvances.advanceDate));\n  }\n\n  async getAllTeacherAdvances(status?: string): Promise<TeacherAdvance[]> {\n    if (status) {\n      return await db.select().from(teacherAdvances)\n        .where(eq(teacherAdvances.status, status))\n        .orderBy(desc(teacherAdvances.advanceDate));\n    }\n    return await db.select().from(teacherAdvances).orderBy(desc(teacherAdvances.advanceDate));\n  }\n\n  async createTeacherAdvance(advance: InsertTeacherAdvance): Promise<TeacherAdvance> {\n    const [newAdvance] = await db.insert(teacherAdvances).values(advance).returning();\n    return newAdvance;\n  }\n\n  async updateTeacherAdvance(id: string, advance: Partial<InsertTeacherAdvance>): Promise<TeacherAdvance> {\n    const [updated] = await db.update(teacherAdvances)\n      .set(advance)\n      .where(eq(teacherAdvances.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTeacherAdvance(id: string): Promise<void> {\n    await db.delete(teacherAdvances).where(eq(teacherAdvances.id, id));\n  }\n\n  // School Expenses\n  async getAllSchoolExpenses(startDate?: string, endDate?: string): Promise<SchoolExpense[]> {\n    if (startDate && endDate) {\n      return await db.select().from(schoolExpenses)\n        .where(and(\n          gte(schoolExpenses.expenseDate, startDate),\n          lte(schoolExpenses.expenseDate, endDate)\n        ))\n        .orderBy(desc(schoolExpenses.expenseDate));\n    }\n    return await db.select().from(schoolExpenses).orderBy(desc(schoolExpenses.expenseDate));\n  }\n\n  async getSchoolExpensesByCategory(category: string): Promise<SchoolExpense[]> {\n    return await db.select().from(schoolExpenses)\n      .where(eq(schoolExpenses.category, category))\n      .orderBy(desc(schoolExpenses.expenseDate));\n  }\n\n  async createSchoolExpense(expense: InsertSchoolExpense): Promise<SchoolExpense> {\n    const [newExpense] = await db.insert(schoolExpenses).values(expense).returning();\n    return newExpense;\n  }\n\n  async updateSchoolExpense(id: string, expense: Partial<InsertSchoolExpense>): Promise<SchoolExpense> {\n    const [updated] = await db.update(schoolExpenses)\n      .set(expense)\n      .where(eq(schoolExpenses.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteSchoolExpense(id: string): Promise<void> {\n    await db.delete(schoolExpenses).where(eq(schoolExpenses.id, id));\n  }\n\n  // Teacher Attendance\n  async getTeacherAttendance(teacherId: string, startDate?: string, endDate?: string): Promise<TeacherAttendance[]> {\n    let conditions = [eq(teacherAttendance.teacherId, teacherId)];\n    \n    if (startDate && endDate) {\n      conditions.push(gte(teacherAttendance.date, startDate));\n      conditions.push(lte(teacherAttendance.date, endDate));\n    }\n    \n    return await db.select().from(teacherAttendance)\n      .where(and(...conditions))\n      .orderBy(desc(teacherAttendance.date));\n  }\n\n  async getAllTeacherAttendance(date?: string): Promise<TeacherAttendance[]> {\n    if (date) {\n      return await db.select().from(teacherAttendance)\n        .where(eq(teacherAttendance.date, date))\n        .orderBy(teacherAttendance.teacherId);\n    }\n    return await db.select().from(teacherAttendance).orderBy(desc(teacherAttendance.date));\n  }\n\n  async createTeacherAttendance(attendance: InsertTeacherAttendance): Promise<TeacherAttendance> {\n    const [newAttendance] = await db.insert(teacherAttendance).values(attendance).returning();\n    return newAttendance;\n  }\n\n  async updateTeacherAttendance(id: string, attendance: Partial<InsertTeacherAttendance>): Promise<TeacherAttendance> {\n    const [updated] = await db.update(teacherAttendance)\n      .set(attendance)\n      .where(eq(teacherAttendance.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTeacherAttendance(id: string): Promise<void> {\n    await db.delete(teacherAttendance).where(eq(teacherAttendance.id, id));\n  }\n\n  async getTeacherUnpaidLeaveDays(teacherId: string, month: string): Promise<number> {\n    // Calculate start and end dates for the month\n    const [year, monthNum] = month.split('-');\n    const startDate = `${year}-${monthNum}-01`;\n    const endDate = new Date(parseInt(year), parseInt(monthNum), 0).toISOString().split('T')[0];\n    \n    const result = await db.select({ count: sql<number>`count(*)` })\n      .from(teacherAttendance)\n      .where(and(\n        eq(teacherAttendance.teacherId, teacherId),\n        eq(teacherAttendance.deductFromSalary, true),\n        gte(teacherAttendance.date, startDate),\n        lte(teacherAttendance.date, endDate)\n      ));\n    \n    return Number(result[0]?.count || 0);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":35374},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ReportsSection.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Student, Teacher, Class, Grade, Payment, TeacherSalary, SchoolExpense, PaymentTransaction } from '@shared/schema';\n\nexport default function ReportsSection() {\n  const { toast } = useToast();\n  const [isGeneratingStudent, setIsGeneratingStudent] = useState(false);\n  const [isGeneratingFinancial, setIsGeneratingFinancial] = useState(false);\n\n  const { data: students = [] } = useQuery<Student[]>({ queryKey: ['/api/students'] });\n  const { data: teachers = [] } = useQuery<Teacher[]>({ queryKey: ['/api/teachers'] });\n  const { data: classes = [] } = useQuery<Class[]>({ queryKey: ['/api/classes'] });\n  const { data: grades = [] } = useQuery<Grade[]>({ queryKey: ['/api/grades'] });\n  const { data: payments = [] } = useQuery<Payment[]>({ queryKey: ['/api/payments'] });\n  const { data: teacherSalaries = [] } = useQuery<TeacherSalary[]>({ queryKey: ['/api/teacher-salaries'] });\n  const { data: expenses = [] } = useQuery<SchoolExpense[]>({ queryKey: ['/api/school-expenses'] });\n  const { data: paymentTransactions = [] } = useQuery<PaymentTransaction[]>({ queryKey: ['/api/accounting/transactions'] });\n\n  const generateStudentReport = () => {\n    setIsGeneratingStudent(true);\n    try {\n      const workbook = XLSX.utils.book_new();\n\n      const studentsData = students.map(student => {\n        const studentClass = classes.find(c => c.id === student.classId);\n        const studentGrades = grades.filter(g => g.studentId === student.id);\n        const studentPayments = payments.filter(p => p.studentId === student.id);\n        \n        return {\n          'الرقم التعريفي': student.id,\n          'الاسم': student.arabicName,\n          'الجنس': student.gender === 'male' ? 'ذكر' : 'أنثى',\n          'تاريخ الميلاد': student.dateOfBirth,\n          'الرقم الوطني': student.nationalId || '',\n          'تاريخ التسجيل': student.enrollmentDate,\n          'الصف': studentClass ? `${studentClass.grade} - ${studentClass.section}` : 'غير مسجل',\n          'ولي الأمر': student.parentName,\n          'هاتف ولي الأمر': student.parentPhone,\n          'البريد الإلكتروني': student.parentEmail || '',\n          'العنوان': student.address || '',\n          'الحالة': student.status === 'active' ? 'نشط' : student.status === 'suspended' ? 'موقوف' : student.status === 'graduated' ? 'متخرج' : 'محول',\n          'عدد الدرجات': studentGrades.length,\n          'عدد المدفوعات': studentPayments.length,\n        };\n      });\n\n      const studentsSheet = XLSX.utils.json_to_sheet(studentsData);\n      XLSX.utils.book_append_sheet(workbook, studentsSheet, 'الطلاب');\n\n      const gradesData = grades.map(grade => {\n        const student = students.find(s => s.id === grade.studentId);\n        const classInfo = classes.find(c => c.id === grade.classId);\n        const teacher = teachers.find(t => t.id === grade.teacherId);\n        \n        return {\n          'الطالب': student?.arabicName || '',\n          'الصف': classInfo ? `${classInfo.grade} - ${classInfo.section}` : '',\n          'المادة': grade.assessmentName,\n          'الفصل الدراسي': grade.semester,\n          'نوع التقييم': grade.assessmentType === 'exam' ? 'امتحان' : grade.assessmentType === 'quiz' ? 'اختبار' : grade.assessmentType === 'homework' ? 'واجب' : 'مشروع',\n          'اسم التقييم': grade.assessmentName,\n          'الدرجة': grade.score,\n          'الدرجة الكلية': grade.maxScore,\n          'النسبة المئوية': grade.percentage ? `${grade.percentage}%` : '',\n          'التاريخ': grade.date,\n          'المعلم': teacher?.arabicName || '',\n          'ملاحظات': grade.notes || '',\n        };\n      });\n\n      if (gradesData.length > 0) {\n        const gradesSheet = XLSX.utils.json_to_sheet(gradesData);\n        XLSX.utils.book_append_sheet(workbook, gradesSheet, 'الدرجات');\n      }\n\n      const paymentsData = payments.map(payment => {\n        const student = students.find(s => s.id === payment.studentId);\n        \n        return {\n          'الطالب': student?.arabicName || '',\n          'المبلغ': payment.amount,\n          'تاريخ الاستحقاق': payment.dueDate,\n          'تاريخ الدفع': payment.paymentDate || 'لم يتم الدفع',\n          'الحالة': payment.status === 'paid' ? 'مدفوع' : payment.status === 'pending' ? 'معلق' : payment.status === 'overdue' ? 'متأخر' : 'جزئي',\n          'نوع الدفع': payment.paymentType,\n          'العام الدراسي': payment.academicYear,\n          'الشهر': payment.month || '',\n          'رقم الإيصال': payment.receiptNumber || '',\n          'ملاحظات': payment.notes || '',\n        };\n      });\n\n      if (paymentsData.length > 0) {\n        const paymentsSheet = XLSX.utils.json_to_sheet(paymentsData);\n        XLSX.utils.book_append_sheet(workbook, paymentsSheet, 'المدفوعات');\n      }\n\n      const classesData = classes.map(classItem => {\n        const classStudents = students.filter(s => s.classId === classItem.id);\n        const classTeacher = teachers.find(t => t.id === classItem.teacherId);\n        \n        return {\n          'الصف': `${classItem.grade} - ${classItem.section}`,\n          'العام الدراسي': classItem.academicYear,\n          'السعة': classItem.capacity,\n          'عدد الطلاب': classStudents.length,\n          'رقم القاعة': classItem.roomNumber || '',\n          'المعلم': classTeacher?.arabicName || 'غير محدد',\n        };\n      });\n\n      if (classesData.length > 0) {\n        const classesSheet = XLSX.utils.json_to_sheet(classesData);\n        XLSX.utils.book_append_sheet(workbook, classesSheet, 'الصفوف');\n      }\n\n      const fileName = `تقرير_الطلاب_${new Date().toISOString().split('T')[0]}.xlsx`;\n      XLSX.writeFile(workbook, fileName);\n\n      toast({\n        title: 'تم إنشاء التقرير',\n        description: 'تم تصدير تقرير الطلاب بنجاح',\n      });\n    } catch (error) {\n      toast({\n        title: 'خطأ',\n        description: 'حدث خطأ أثناء إنشاء التقرير',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsGeneratingStudent(false);\n    }\n  };\n\n  const generateFinancialReport = () => {\n    setIsGeneratingFinancial(true);\n    try {\n      const workbook = XLSX.utils.book_new();\n\n      const totalRevenue = payments\n        .filter(p => p.status === 'paid' && p.paymentDate)\n        .reduce((sum, p) => sum + parseFloat(p.amount), 0);\n\n      const totalSalaries = teacherSalaries\n        .filter(s => s.status === 'paid')\n        .reduce((sum, s) => sum + parseFloat(s.netSalary), 0);\n\n      const totalExpenses = expenses.reduce((sum, e) => sum + parseFloat(e.amount), 0);\n\n      const summary = [\n        { 'البيان': 'إجمالي الإيرادات', 'المبلغ': totalRevenue.toFixed(2) },\n        { 'البيان': 'إجمالي رواتب المعلمين', 'المبلغ': totalSalaries.toFixed(2) },\n        { 'البيان': 'إجمالي المصروفات', 'المبلغ': totalExpenses.toFixed(2) },\n        { 'البيان': 'صافي الربح/الخسارة', 'المبلغ': (totalRevenue - totalSalaries - totalExpenses).toFixed(2) },\n      ];\n\n      const summarySheet = XLSX.utils.json_to_sheet(summary);\n      XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص مالي');\n\n      const revenueData = payments\n        .filter(p => p.status === 'paid' && p.paymentDate)\n        .map(payment => {\n          const student = students.find(s => s.id === payment.studentId);\n          return {\n            'الطالب': student?.arabicName || '',\n            'المبلغ': payment.amount,\n            'تاريخ الدفع': payment.paymentDate,\n            'نوع الدفع': payment.paymentType,\n            'العام الدراسي': payment.academicYear,\n            'الشهر': payment.month || '',\n            'رقم الإيصال': payment.receiptNumber || '',\n          };\n        });\n\n      if (revenueData.length > 0) {\n        const revenueSheet = XLSX.utils.json_to_sheet(revenueData);\n        XLSX.utils.book_append_sheet(workbook, revenueSheet, 'الإيرادات');\n      }\n\n      const salariesData = teacherSalaries.map(salary => {\n        const teacher = teachers.find(t => t.id === salary.teacherId);\n        return {\n          'المعلم': teacher?.arabicName || '',\n          'الشهر': salary.month,\n          'الراتب الأساسي': salary.baseSalary,\n          'المكافآت': salary.bonuses,\n          'الخصومات': salary.deductions,\n          'السلف المخصومة': salary.advancesDeducted,\n          'صافي الراتب': salary.netSalary,\n          'تاريخ الدفع': salary.paymentDate || 'لم يتم الدفع',\n          'الحالة': salary.status === 'paid' ? 'مدفوع' : 'معلق',\n          'ملاحظات': salary.notes || '',\n        };\n      });\n\n      if (salariesData.length > 0) {\n        const salariesSheet = XLSX.utils.json_to_sheet(salariesData);\n        XLSX.utils.book_append_sheet(workbook, salariesSheet, 'الرواتب');\n      }\n\n      const expensesData = expenses.map(expense => {\n        return {\n          'الفئة': expense.category,\n          'الوصف': expense.description,\n          'المبلغ': expense.amount,\n          'التاريخ': expense.expenseDate,\n          'طريقة الدفع': expense.paymentMethod || '',\n          'رقم الإيصال': expense.receiptNumber || '',\n          'اسم المورد': expense.vendorName || '',\n          'ملاحظات': expense.notes || '',\n        };\n      });\n\n      if (expensesData.length > 0) {\n        const expensesSheet = XLSX.utils.json_to_sheet(expensesData);\n        XLSX.utils.book_append_sheet(workbook, expensesSheet, 'المصروفات');\n      }\n\n      const transactionsData = paymentTransactions.map(transaction => {\n        const student = students.find(s => s.id === transaction.studentId);\n        return {\n          'الطالب': student?.arabicName || '',\n          'المبلغ': transaction.amount,\n          'تاريخ الدفع': transaction.paymentDate,\n          'طريقة الدفع': transaction.paymentMethod || '',\n          'رقم الإيصال': transaction.receiptNumber || '',\n          'ملاحظات': transaction.notes || '',\n        };\n      });\n\n      if (transactionsData.length > 0) {\n        const transactionsSheet = XLSX.utils.json_to_sheet(transactionsData);\n        XLSX.utils.book_append_sheet(workbook, transactionsSheet, 'حركات الدفع');\n      }\n\n      const fileName = `التقرير_المالي_${new Date().toISOString().split('T')[0]}.xlsx`;\n      XLSX.writeFile(workbook, fileName);\n\n      toast({\n        title: 'تم إنشاء التقرير',\n        description: 'تم تصدير التقرير المالي بنجاح',\n      });\n    } catch (error) {\n      toast({\n        title: 'خطأ',\n        description: 'حدث خطأ أثناء إنشاء التقرير',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsGeneratingFinancial(false);\n    }\n  };\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">التقارير والإحصائيات</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">تقارير شاملة عن أداء المدرسة</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        <div className=\"glass-card rounded-2xl p-6 text-center card-hover-effect\">\n          <div className=\"text-4xl mb-4\">📊</div>\n          <h3 className=\"text-lg font-bold text-gray-900 dark:text-white mb-2\">تقارير الطلاب</h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">تقارير شاملة عن أداء الطلاب</p>\n          <Button \n            className=\"w-full\" \n            onClick={generateStudentReport}\n            disabled={isGeneratingStudent}\n            data-testid=\"button-student-report\"\n          >\n            {isGeneratingStudent ? 'جاري إنشاء التقرير...' : 'إنشاء تقرير'}\n          </Button>\n        </div>\n\n        <div className=\"glass-card rounded-2xl p-6 text-center card-hover-effect\">\n          <div className=\"text-4xl mb-4\">💰</div>\n          <h3 className=\"text-lg font-bold text-gray-900 dark:text-white mb-2\">التقارير المالية</h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">تقارير الإيرادات والمصروفات</p>\n          <Button \n            className=\"w-full bg-green-600 hover:bg-green-700\" \n            onClick={generateFinancialReport}\n            disabled={isGeneratingFinancial}\n            data-testid=\"button-financial-report\"\n          >\n            {isGeneratingFinancial ? 'جاري إنشاء التقرير...' : 'إنشاء تقرير'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13475},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/StatCard.tsx":{"content":"interface StatCardProps {\n  title: string;\n  value: string | number;\n  subtitle: string;\n  icon: string;\n  gradient: 'primary' | 'success' | 'warning' | 'info' | 'glass';\n}\n\nexport default function StatCard({ title, value, subtitle, icon, gradient }: StatCardProps) {\n  if (gradient === 'glass') {\n    return (\n      <div className=\"glass-card p-6 rounded-2xl card-hover-effect transition-colors\" data-testid=\"stat-glass\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold\">{title}</p>\n            <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{value}</p>\n          </div>\n          <div className=\"text-4xl\">{icon}</div>\n        </div>\n      </div>\n    );\n  }\n\n  const gradientClasses = {\n    primary: 'gradient-primary-bg',\n    success: 'gradient-success-bg',\n    warning: 'gradient-warning-bg',\n    info: 'gradient-info-bg',\n  };\n\n  const gradientClass = gradientClasses[gradient] || '';\n\n  return (\n    <div className={`${gradientClass} text-white p-6 rounded-2xl card-hover-effect`} data-testid={`stat-${gradient}`}>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-white/80 text-sm font-bold\">{title}</p>\n          <p className=\"text-3xl font-bold\">{value}</p>\n        </div>\n        <div className=\"text-4xl\">{icon}</div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1433},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"deploy.sh":{"content":"#!/bin/bash\n\n# =====================================\n# سكريبت النشر المباشر إلى HestiaCP\n# =====================================\n\nset -e  # إيقاف عند أي خطأ\n\n# ====== التكوين - عدّل هذه القيم ======\nVPS_USER=\"admin\"                    # مستخدم HestiaCP (غالباً admin)\nVPS_HOST=\"your-vps-ip.com\"         # IP أو Domain الخاص بـ VPS\nDOMAIN=\"yourdomain.com\"             # النطاق الخاص بك\nDB_NAME=\"school_db\"                 # اسم قاعدة البيانات\nDB_USER=\"school_user\"               # مستخدم قاعدة البيانات\nDB_PASS=\"yourStrongPassword\"        # كلمة مرور قاعدة البيانات\n# =======================================\n\nREMOTE_PATH=\"/home/$VPS_USER/web/$DOMAIN/nodeapp\"\n\necho \"🔨 بناء المشروع...\"\nnpm run build\n\necho \"📦 تجهيز الملفات...\"\n# إنشاء مجلد مؤقت للنشر\nrm -rf deploy_temp\nmkdir -p deploy_temp\n\n# نسخ الملفات الضرورية\ncp -r dist deploy_temp/\ncp -r shared deploy_temp/\ncp package.json package-lock.json deploy_temp/\ncp drizzle.config.ts deploy_temp/\n\n# إنشاء ملف .env للإنتاج\ncat > deploy_temp/.env << EOF\nNODE_ENV=production\nPORT=\\${PORT:-5000}\nDATABASE_URL=postgresql://$DB_USER:$DB_PASS@localhost:5432/$DB_NAME\nSESSION_SECRET=$(openssl rand -base64 32)\nEOF\n\necho \"🚀 نشر الملفات إلى VPS...\"\n# رفع الملفات (بدون node_modules)\nrsync -avz --delete \\\n  --exclude 'node_modules' \\\n  --exclude '.git' \\\n  --exclude 'client' \\\n  --exclude 'server' \\\n  --exclude 'deploy_temp' \\\n  deploy_temp/ $VPS_USER@$VPS_HOST:$REMOTE_PATH/\n\necho \"📊 نشر قاعدة البيانات...\"\n# رفع قاعدة البيانات إذا كانت موجودة\nif [ -f \"database_backup.sql\" ]; then\n  scp database_backup.sql $VPS_USER@$VPS_HOST:/tmp/db_backup.sql\n  \n  # تمرير المتغيرات عبر ssh\n  ssh $VPS_USER@$VPS_HOST \"DB_USER='$DB_USER' DB_NAME='$DB_NAME' DB_PASS='$DB_PASS' bash -s\" << 'ENDSSH'\n    # استيراد البيانات (فقط إذا كانت القاعدة فارغة)\n    export PGPASSWORD=\"$DB_PASS\"\n    if ! psql -U \"$DB_USER\" -d \"$DB_NAME\" -c \"SELECT 1 FROM students LIMIT 1\" 2>/dev/null; then\n      echo \"استيراد البيانات...\"\n      psql -U \"$DB_USER\" -d \"$DB_NAME\" < /tmp/db_backup.sql\n      rm /tmp/db_backup.sql\n    else\n      echo \"⚠️  القاعدة تحتوي على بيانات، تم تخطي الاستيراد\"\n    fi\n    unset PGPASSWORD\nENDSSH\nfi\n\necho \"📥 تثبيت الحزم على VPS...\"\nssh $VPS_USER@$VPS_HOST << ENDSSH\n  cd $REMOTE_PATH\n  \n  # تثبيت الحزم\n  npm install --production\n  \n  # إعادة تشغيل التطبيق مع PM2\n  if pm2 describe $DOMAIN &>/dev/null; then\n    echo \"إعادة تشغيل التطبيق...\"\n    pm2 restart $DOMAIN\n  else\n    echo \"تشغيل التطبيق لأول مرة...\"\n    pm2 start dist/index.js --name $DOMAIN\n    pm2 save\n  fi\n  \n  # عرض الحالة\n  pm2 status\nENDSSH\n\necho \"🧹 تنظيف الملفات المؤقتة...\"\nrm -rf deploy_temp\n\necho \"\"\necho \"✅ =============================================\"\necho \"✅  تم النشر بنجاح! 🎉\"\necho \"✅ =============================================\"\necho \"\"\necho \"📍 الخطوة التالية في لوحة HestiaCP:\"\necho \"   1. اذهب إلى Web → $DOMAIN → Edit\"\necho \"   2. Advanced Options → Proxy Template → NodeJS\"\necho \"   3. Save\"\necho \"\"\necho \"🌐 موقعك: https://$DOMAIN\"\necho \"📊 سجلات التطبيق: pm2 logs $DOMAIN\"\necho \"\"\n","size_bytes":3605},"client/src/components/GradesSection.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { Class, Student, Subject, ClassSubject, Grade } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { BookOpen, Save, Search } from 'lucide-react';\n\nexport default function GradesSection() {\n  const { toast } = useToast();\n  const [selectedClass, setSelectedClass] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [editingGrades, setEditingGrades] = useState<Record<string, { midterm: number; final: number }>>({});\n\n  const { data: classes = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: students = [] } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n  });\n\n  const { data: allSubjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/subjects'],\n  });\n\n  const { data: gradeSubjects = [] } = useQuery<ClassSubject[]>({\n    queryKey: ['/api/class-subjects'],\n  });\n\n  const { data: grades = [] } = useQuery<Grade[]>({\n    queryKey: ['/api/grades'],\n  });\n\n  const classStudents = useMemo(() => {\n    if (!selectedClass) return [];\n    return students.filter(s => s.classId === selectedClass);\n  }, [students, selectedClass]);\n\n  const selectedClassData = useMemo(() => {\n    return classes.find(c => c.id === selectedClass);\n  }, [classes, selectedClass]);\n\n  const classSubjectsForSelected = useMemo(() => {\n    if (!selectedClass || !selectedClassData) return [];\n    return gradeSubjects.filter(cs => \n      cs.educationLevelId === selectedClassData.educationLevelId && \n      cs.grade === selectedClassData.grade\n    );\n  }, [gradeSubjects, selectedClass, selectedClassData]);\n\n  const filteredStudents = useMemo(() => {\n    if (!searchQuery) return classStudents;\n    const query = searchQuery.toLowerCase();\n    return classStudents.filter(student => \n      student.arabicName.toLowerCase().includes(query) ||\n      (student.nationalId && student.nationalId.toLowerCase().includes(query))\n    );\n  }, [classStudents, searchQuery]);\n\n  const updateGradeMutation = useMutation({\n    mutationFn: async (data: { \n      studentId: string; \n      subjectId: string; \n      classId: string;\n      midtermGrade: number; \n      finalGrade: number;\n      semester: string;\n    }) => {\n      const midtermGrade = grades.find(g => \n        g.studentId === data.studentId && \n        g.subjectId === data.subjectId && \n        g.classId === data.classId &&\n        g.assessmentType === 'midterm'\n      );\n      \n      const finalGrade = grades.find(g => \n        g.studentId === data.studentId && \n        g.subjectId === data.subjectId && \n        g.classId === data.classId &&\n        g.assessmentType === 'final'\n      );\n\n      const promises = [];\n\n      if (midtermGrade) {\n        promises.push(\n          apiRequest('PATCH', `/api/grades/${midtermGrade.id}`, {\n            score: data.midtermGrade.toString(),\n            maxScore: '100',\n          })\n        );\n      } else {\n        promises.push(\n          apiRequest('POST', '/api/grades', {\n            studentId: data.studentId,\n            subjectId: data.subjectId,\n            classId: data.classId,\n            semester: data.semester,\n            assessmentType: 'midterm',\n            assessmentName: 'مذاكرة نصفية',\n            score: data.midtermGrade.toString(),\n            maxScore: '100',\n            date: new Date().toISOString().split('T')[0],\n          })\n        );\n      }\n\n      if (finalGrade) {\n        promises.push(\n          apiRequest('PATCH', `/api/grades/${finalGrade.id}`, {\n            score: data.finalGrade.toString(),\n            maxScore: '100',\n          })\n        );\n      } else {\n        promises.push(\n          apiRequest('POST', '/api/grades', {\n            studentId: data.studentId,\n            subjectId: data.subjectId,\n            classId: data.classId,\n            semester: data.semester,\n            assessmentType: 'final',\n            assessmentName: 'امتحان نهائي',\n            score: data.finalGrade.toString(),\n            maxScore: '100',\n            date: new Date().toISOString().split('T')[0],\n          })\n        );\n      }\n\n      return Promise.all(promises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/grades'] });\n      toast({\n        title: 'تم حفظ الدرجة',\n        description: 'تم حفظ درجة الطالب بنجاح',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'خطأ',\n        description: 'حدث خطأ أثناء حفظ الدرجة',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const getGradesForStudent = (studentId: string, subjectId: string, classId: string) => {\n    const midtermGrade = grades.find(g => \n      g.studentId === studentId && \n      g.subjectId === subjectId && \n      g.classId === classId &&\n      g.assessmentType === 'midterm'\n    );\n    \n    const finalGrade = grades.find(g => \n      g.studentId === studentId && \n      g.subjectId === subjectId && \n      g.classId === classId &&\n      g.assessmentType === 'final'\n    );\n\n    return {\n      midterm: midtermGrade ? parseFloat(midtermGrade.score) : 0,\n      final: finalGrade ? parseFloat(finalGrade.score) : 0,\n    };\n  };\n\n  const handleGradeChange = (studentId: string, subjectId: string, type: 'midterm' | 'final', value: string) => {\n    const key = `${studentId}-${subjectId}`;\n    const numValue = parseFloat(value) || 0;\n    \n    setEditingGrades(prev => ({\n      ...prev,\n      [key]: {\n        midterm: type === 'midterm' ? numValue : (prev[key]?.midterm ?? 0),\n        final: type === 'final' ? numValue : (prev[key]?.final ?? 0),\n      }\n    }));\n  };\n\n  const handleSaveGrade = (studentId: string, subjectId: string, classId: string, semester: string) => {\n    const key = `${studentId}-${subjectId}`;\n    const editedGrade = editingGrades[key];\n    \n    if (!editedGrade) return;\n\n    updateGradeMutation.mutate({\n      studentId,\n      subjectId,\n      classId,\n      midtermGrade: editedGrade.midterm,\n      finalGrade: editedGrade.final,\n      semester,\n    });\n\n    setEditingGrades(prev => {\n      const newGrades = { ...prev };\n      delete newGrades[key];\n      return newGrades;\n    });\n  };\n\n  const getTotalGrade = (midterm: number, final: number) => {\n    return midterm + final;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <BookOpen className=\"h-8 w-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">الدرجات الدراسية</h1>\n          <p className=\"text-muted-foreground mt-1\">إدارة درجات الطلاب في المذاكرات النصفية والامتحانات النهائية</p>\n        </div>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>اختيار الصف</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Select value={selectedClass || ''} onValueChange={setSelectedClass}>\n                <SelectTrigger data-testid=\"select-class\">\n                  <SelectValue placeholder=\"اختر الصف والشعبة\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {classes.map((classItem) => (\n                    <SelectItem key={classItem.id} value={classItem.id}>\n                      {classItem.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            {selectedClass && (\n              <div className=\"relative\">\n                <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"بحث عن طالب...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pr-10\"\n                  data-testid=\"input-search-student\"\n                />\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {selectedClass && classSubjectsForSelected.length === 0 && (\n        <Card>\n          <CardContent className=\"py-8\">\n            <div className=\"text-center text-muted-foreground\">\n              <BookOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-semibold mb-2\">لا توجد مواد دراسية</p>\n              <p>يجب إضافة مواد دراسية للصف أولاً من قسم \"المراحل الدراسية والصفوف\"</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {selectedClass && classSubjectsForSelected.length > 0 && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between gap-2 flex-wrap\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5\" />\n                {selectedClassData?.name}\n              </CardTitle>\n              <div className=\"flex gap-2\">\n                <Badge variant=\"secondary\" data-testid=\"badge-students-count\">\n                  {filteredStudents.length} طالب\n                </Badge>\n                <Badge variant=\"secondary\" data-testid=\"badge-subjects-count\">\n                  {classSubjectsForSelected.length} مادة\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-8\">\n              {classSubjectsForSelected.map((classSubject) => {\n                const subject = allSubjects.find(s => s.id === classSubject.subjectId);\n                if (!subject) return null;\n\n                return (\n                  <div key={classSubject.id} className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 pb-2 border-b\">\n                      <h3 className=\"text-lg font-semibold\">{subject.arabicName}</h3>\n                    </div>\n                    \n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead className=\"text-right\">الرقم الوطني</TableHead>\n                            <TableHead className=\"text-right\">اسم الطالب</TableHead>\n                            <TableHead className=\"text-center\">المذاكرة النصفية (100)</TableHead>\n                            <TableHead className=\"text-center\">الامتحان النهائي (100)</TableHead>\n                            <TableHead className=\"text-center\">المجموع (200)</TableHead>\n                            <TableHead className=\"text-center\">الإجراءات</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {filteredStudents.length === 0 ? (\n                            <TableRow>\n                              <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                                {searchQuery ? 'لا توجد نتائج للبحث' : 'لا يوجد طلاب في هذا الصف'}\n                              </TableCell>\n                            </TableRow>\n                          ) : (\n                            filteredStudents.map((student) => {\n                              const storedGrades = getGradesForStudent(student.id, classSubject.subjectId, selectedClass);\n                              const key = `${student.id}-${classSubject.subjectId}`;\n                              const editedGrade = editingGrades[key];\n                              const midtermValue = editedGrade?.midterm ?? storedGrades.midterm;\n                              const finalValue = editedGrade?.final ?? storedGrades.final;\n                              const total = getTotalGrade(midtermValue, finalValue);\n\n                              return (\n                                <TableRow key={key} data-testid={`row-student-${student.id}`}>\n                                  <TableCell className=\"font-medium\">{student.nationalId || '-'}</TableCell>\n                                  <TableCell>{student.arabicName}</TableCell>\n                                  <TableCell className=\"text-center\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.5\"\n                                      value={(editedGrade?.midterm ?? storedGrades.midterm) || ''}\n                                      onChange={(e) => handleGradeChange(student.id, classSubject.subjectId, 'midterm', e.target.value)}\n                                      className=\"w-20 text-center mx-auto\"\n                                      placeholder=\"0\"\n                                      data-testid={`input-midterm-${student.id}-${classSubject.id}`}\n                                    />\n                                  </TableCell>\n                                  <TableCell className=\"text-center\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.5\"\n                                      value={(editedGrade?.final ?? storedGrades.final) || ''}\n                                      onChange={(e) => handleGradeChange(student.id, classSubject.subjectId, 'final', e.target.value)}\n                                      className=\"w-20 text-center mx-auto\"\n                                      placeholder=\"0\"\n                                      data-testid={`input-final-${student.id}-${classSubject.id}`}\n                                    />\n                                  </TableCell>\n                                  <TableCell className=\"text-center\">\n                                    <span className=\"font-semibold\" data-testid={`text-total-${student.id}-${classSubject.id}`}>\n                                      {total > 0 ? total.toFixed(1) : '-'}\n                                    </span>\n                                  </TableCell>\n                                  <TableCell className=\"text-center\">\n                                    {editedGrade && (\n                                      <Button\n                                        size=\"sm\"\n                                        onClick={() => handleSaveGrade(student.id, classSubject.subjectId, selectedClass, 'الفصل الأول')}\n                                        disabled={updateGradeMutation.isPending}\n                                        data-testid={`button-save-${student.id}-${classSubject.id}`}\n                                      >\n                                        <Save className=\"h-3 w-3 ml-1\" />\n                                        حفظ\n                                      </Button>\n                                    )}\n                                  </TableCell>\n                                </TableRow>\n                              );\n                            })\n                          )}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":16228},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, hashPassword } from \"./auth\";\nimport { \n  insertStudentSchema, insertTeacherSchema, insertSubjectSchema, \n  insertEducationLevelSchema, insertClassSchema, insertClassSubjectSchema, insertGradeSchema,\n  insertAttendanceSchema, insertPaymentSchema, insertNotificationSchema,\n  insertSchoolSettingsSchema, insertStudentAccountSchema, insertPaymentTransactionSchema,\n  insertTeacherSalarySchema, insertTeacherAdvanceSchema, insertSchoolExpenseSchema,\n  insertTeacherAttendanceSchema, insertUserSchema, insertSectionSubjectTeacherSchema,\n  type InsertUser\n} from \"@shared/schema\";\n\n// Middleware للتأكد من تسجيل الدخول\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"يجب تسجيل الدخول أولاً\" });\n  }\n  next();\n}\n\n// Middleware للتأكد من صلاحيات الإدارة\nfunction requireAdmin(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"يجب تسجيل الدخول أولاً\" });\n  }\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ error: \"غير مصرح بهذا الإجراء\" });\n  }\n  next();\n}\n\n// Middleware للتأكد من صلاحيات الإدارة أو المعلم\nfunction requireAdminOrTeacher(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"يجب تسجيل الدخول أولاً\" });\n  }\n  if (req.user.role !== 'admin' && req.user.role !== 'teacher') {\n    return res.status(403).json({ error: \"غير مصرح بهذا الإجراء\" });\n  }\n  next();\n}\n\n// Middleware للتأكد من صلاحيات الإدارة أو ولي الأمر\nfunction requireAdminOrParent(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"يجب تسجيل الدخول أولاً\" });\n  }\n  if (req.user.role !== 'admin' && req.user.role !== 'parent') {\n    return res.status(403).json({ error: \"غير مصرح بهذا الإجراء\" });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Setup authentication\n  setupAuth(app);\n  \n  // ==================== USERS ROUTES (ADMIN ONLY) ====================\n  \n  // Get current logged-in user\n  app.get(\"/api/user\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ error: \"المستخدم غير موجود\" });\n      }\n      // Remove password from response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n  \n  app.get(\"/api/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remove passwords from response\n      const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAdmin, async (req, res) => {\n    try {\n      // Validate input with schema\n      const validationResult = insertUserSchema.safeParse({\n        username: req.body.username,\n        password: req.body.password,\n        fullName: req.body.fullName,\n        email: req.body.email,\n        role: req.body.role,\n      });\n\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"بيانات غير صحيحة\",\n          details: validationResult.error.errors \n        });\n      }\n\n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(validationResult.data.username);\n      if (existingUser) {\n        return res.status(400).send(\"اسم المستخدم موجود مسبقاً\");\n      }\n\n      // Hash password and create user\n      const userData = {\n        ...validationResult.data,\n        password: await hashPassword(validationResult.data.password),\n      };\n\n      const user = await storage.createUser(userData);\n\n      // Remove password from response\n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      // Prevent admin from deleting themselves\n      if (req.params.id === req.user!.id) {\n        return res.status(400).json({ error: \"لا يمكنك حذف حسابك الخاص\" });\n      }\n      \n      await storage.deleteUser(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Update user (admin only)\n  app.patch(\"/api/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { username, fullName, email, role } = req.body;\n      const updateData: Partial<InsertUser> = {};\n      \n      // Check if username is being changed and if it already exists\n      if (username) {\n        const existingUser = await storage.getUserByUsername(username);\n        if (existingUser && existingUser.id !== req.params.id) {\n          return res.status(400).json({ error: \"اسم المستخدم موجود مسبقاً\" });\n        }\n        updateData.username = username;\n      }\n      if (fullName) updateData.fullName = fullName;\n      if (email) updateData.email = email;\n      if (role) updateData.role = role;\n\n      const user = await storage.updateUser(req.params.id, updateData);\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  // Reset user password (admin only)\n  app.post(\"/api/users/:id/reset-password\", requireAdmin, async (req, res) => {\n    try {\n      const { newPassword } = req.body;\n      if (!newPassword || newPassword.length < 6) {\n        return res.status(400).json({ error: \"كلمة المرور يجب أن تكون 6 أحرف على الأقل\" });\n      }\n\n      const hashedPassword = await hashPassword(newPassword);\n      await storage.updateUser(req.params.id, { password: hashedPassword });\n      res.json({ message: \"تم إعادة تعيين كلمة المرور بنجاح\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reset password\" });\n    }\n  });\n\n  // Link teacher to user (admin only)\n  app.post(\"/api/teacher-users\", requireAdmin, async (req, res) => {\n    try {\n      const { userId, teacherId } = req.body;\n      \n      // Delete existing link for this user (if changing teacher)\n      await storage.deleteTeacherUserByUserId(userId);\n      \n      // Delete existing link for this teacher (if reassigning to different user)\n      await storage.deleteTeacherUserByTeacherId(teacherId);\n      \n      // Create new link\n      const teacherUser = await storage.createTeacherUser({ userId, teacherId });\n      res.status(201).json(teacherUser);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to link teacher to user\" });\n    }\n  });\n\n  // Get teacher linked to user\n  app.get(\"/api/teacher-users/:userId\", requireAdmin, async (req, res) => {\n    try {\n      const teacherUser = await storage.getTeacherUserByUserId(req.params.userId);\n      res.json(teacherUser || null);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teacher user\" });\n    }\n  });\n\n  // Link parent to students (admin only)\n  app.post(\"/api/parent-students\", requireAdmin, async (req, res) => {\n    try {\n      const { userId, studentIds, relationship } = req.body;\n      \n      // Delete existing links\n      await storage.deleteParentStudentsByUserId(userId);\n      \n      // Create new links for all students\n      const links = [];\n      for (const studentId of studentIds) {\n        const link = await storage.createParentStudent({\n          userId,\n          studentId,\n          relationship: relationship || 'parent'\n        });\n        links.push(link);\n      }\n      \n      res.status(201).json(links);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to link parent to students\" });\n    }\n  });\n\n  // Get students linked to parent\n  app.get(\"/api/parent-students/:userId\", requireAdmin, async (req, res) => {\n    try {\n      const parentStudents = await storage.getParentStudentsByUserId(req.params.userId);\n      res.json(parentStudents);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch parent students\" });\n    }\n  });\n  \n  // ==================== STUDENTS ROUTES (ADMIN ONLY) ====================\n  app.get(\"/api/students\", requireAdmin, async (req, res) => {\n    try {\n      const students = await storage.getAllStudents();\n      res.json(students);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch students\" });\n    }\n  });\n\n  app.get(\"/api/students/:id\", requireAdmin, async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ error: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student\" });\n    }\n  });\n\n  app.get(\"/api/students/class/:classId\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      if (req.user!.role === 'teacher') {\n        const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n        if (!teacherUser) {\n          return res.status(403).json({ error: \"لم يتم ربط حسابك بمعلم\" });\n        }\n        \n        const canAccess = await storage.canTeacherAccessClass(\n          teacherUser.teacherId,\n          req.params.classId\n        );\n        \n        if (!canAccess) {\n          return res.status(403).json({ error: \"غير مصرح لك بالوصول لطلاب هذا الصف\" });\n        }\n      }\n      \n      const students = await storage.getStudentsByClass(req.params.classId);\n      res.json(students);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch students by class\" });\n    }\n  });\n\n  app.post(\"/api/students\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(validatedData);\n      res.status(201).json(student);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid student data\" });\n    }\n  });\n\n  app.patch(\"/api/students/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, updatedAt, ...updateData } = req.body;\n      const updateSchema = insertStudentSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const student = await storage.updateStudent(req.params.id, validatedData);\n      res.json(student);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update student\" });\n    }\n  });\n\n  app.delete(\"/api/students/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteStudent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete student\" });\n    }\n  });\n\n  app.get(\"/api/students/search/:query\", requireAdmin, async (req, res) => {\n    try {\n      const students = await storage.searchStudents(req.params.query);\n      res.json(students);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to search students\" });\n    }\n  });\n\n  // ==================== TEACHERS ROUTES ====================\n  app.get(\"/api/teachers\", async (req, res) => {\n    try {\n      const teachers = await storage.getAllTeachers();\n      res.json(teachers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teachers\" });\n    }\n  });\n\n  app.get(\"/api/teachers/:id\", requireAdmin, async (req, res) => {\n    try {\n      const teacher = await storage.getTeacher(req.params.id);\n      if (!teacher) {\n        return res.status(404).json({ error: \"Teacher not found\" });\n      }\n      res.json(teacher);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teacher\" });\n    }\n  });\n\n  app.post(\"/api/teachers\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertTeacherSchema.parse(req.body);\n      const teacher = await storage.createTeacher(validatedData);\n      res.status(201).json(teacher);\n    } catch (error: any) {\n      console.error(\"Teacher creation error:\", error);\n      \n      if (error.code === '23505' && error.constraint === 'teachers_email_unique') {\n        return res.status(400).json({ error: \"البريد الإلكتروني موجود بالفعل. الرجاء استخدام بريد آخر.\" });\n      }\n      \n      res.status(400).json({ error: \"خطأ في البيانات المدخلة\" });\n    }\n  });\n\n  app.patch(\"/api/teachers/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, updatedAt, ...updateData } = req.body;\n      const updateSchema = insertTeacherSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const teacher = await storage.updateTeacher(req.params.id, validatedData);\n      res.json(teacher);\n    } catch (error: any) {\n      console.error(\"Teacher update error:\", error);\n      \n      if (error.code === '23505' && error.constraint === 'teachers_email_unique') {\n        return res.status(400).json({ error: \"البريد الإلكتروني موجود بالفعل. الرجاء استخدام بريد آخر.\" });\n      }\n      \n      res.status(400).json({ error: \"فشل تحديث بيانات المعلم\" });\n    }\n  });\n\n  app.delete(\"/api/teachers/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteTeacher(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete teacher\" });\n    }\n  });\n\n  // Get teacher's assigned classes\n  app.get(\"/api/teachers/my-classes\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      // If admin, return all classes\n      if (req.user!.role === 'admin') {\n        const classes = await storage.getAllClasses();\n        return res.json(classes);\n      }\n\n      // Get teacher user link\n      const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n      if (!teacherUser) {\n        return res.status(404).json({ error: \"المعلم غير موجود\" });\n      }\n\n      const classes = await storage.getTeacherClasses(teacherUser.teacherId);\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching teacher classes:\", error);\n      res.status(500).json({ error: \"فشل جلب الشعب المعينة للمعلم\" });\n    }\n  });\n\n  // Get teacher's subjects in a specific class\n  app.get(\"/api/teachers/my-subjects/:classId\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      const { classId } = req.params;\n\n      // If admin, return all subjects for that class's grade\n      if (req.user!.role === 'admin') {\n        const classData = await storage.getClass(classId);\n        if (!classData || !classData.grade || !classData.educationLevelId) {\n          return res.status(404).json({ error: \"الشعبة غير موجودة\" });\n        }\n        const classSubjects = await storage.getGradeSubjects(classData.educationLevelId, classData.grade);\n        \n        // Get full subject details\n        const subjectIds = classSubjects.map(cs => cs.subjectId);\n        const subjects = [];\n        for (const subjectId of subjectIds) {\n          const subject = await storage.getSubject(subjectId);\n          if (subject) {\n            subjects.push(subject);\n          }\n        }\n        \n        res.json(subjects);\n        return;\n      }\n\n      // Get teacher user link\n      const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n      if (!teacherUser) {\n        return res.status(404).json({ error: \"المعلم غير موجود\" });\n      }\n\n      const subjects = await storage.getTeacherSubjectsInClass(teacherUser.teacherId, classId);\n      res.json(subjects);\n    } catch (error) {\n      console.error(\"Error fetching teacher subjects:\", error);\n      res.status(500).json({ error: \"فشل جلب المواد المعينة للمعلم\" });\n    }\n  });\n\n  // Get students in a class (for teachers - only if assigned to that class)\n  app.get(\"/api/teachers/my-students/:classId\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      const { classId } = req.params;\n\n      // If admin, return all students in class\n      if (req.user!.role === 'admin') {\n        const students = await storage.getStudentsByClass(classId);\n        return res.json(students);\n      }\n\n      // Get teacher user link\n      const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n      if (!teacherUser) {\n        return res.status(404).json({ error: \"المعلم غير موجود\" });\n      }\n\n      // Check if teacher has access to this class\n      const canAccess = await storage.canTeacherAccessClass(teacherUser.teacherId, classId);\n      if (!canAccess) {\n        return res.status(403).json({ error: \"غير مصرح لك بالوصول لهذه الشعبة\" });\n      }\n\n      const students = await storage.getStudentsByClass(classId);\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ error: \"فشل جلب الطلاب\" });\n    }\n  });\n\n  // ==================== SECTION SUBJECT TEACHERS (TEACHER ASSIGNMENTS) ====================\n  \n  // Create teacher assignment (Admin only)\n  app.post(\"/api/section-subject-teachers\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSectionSubjectTeacherSchema.parse(req.body);\n      const assignment = await storage.createSectionSubjectTeacher(validatedData);\n      res.status(201).json(assignment);\n    } catch (error) {\n      console.error(\"Error creating teacher assignment:\", error);\n      res.status(400).json({ error: \"فشل تعيين المعلم للمادة\" });\n    }\n  });\n\n  // Get all teacher assignments (Admin only)\n  app.get(\"/api/section-subject-teachers\", requireAdmin, async (req, res) => {\n    try {\n      const assignments = await storage.getAllTeachers();\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching assignments:\", error);\n      res.status(500).json({ error: \"فشل جلب التعيينات\" });\n    }\n  });\n\n  // Get assignments for a specific teacher (Admin only)\n  app.get(\"/api/section-subject-teachers/teacher/:teacherId\", requireAdmin, async (req, res) => {\n    try {\n      const assignments = await storage.getTeacherAssignments(req.params.teacherId);\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching teacher assignments:\", error);\n      res.status(500).json({ error: \"فشل جلب تعيينات المعلم\" });\n    }\n  });\n\n  // Delete teacher assignment (Admin only)\n  app.delete(\"/api/section-subject-teachers/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteSectionSubjectTeacher(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting teacher assignment:\", error);\n      res.status(500).json({ error: \"فشل حذف التعيين\" });\n    }\n  });\n\n  // ==================== SUBJECTS ROUTES ====================\n  app.get(\"/api/subjects\", requireAdmin, async (req, res) => {\n    try {\n      const subjects = await storage.getAllSubjects();\n      res.json(subjects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch subjects\" });\n    }\n  });\n\n  app.post(\"/api/subjects\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSubjectSchema.parse(req.body);\n      const subject = await storage.createSubject(validatedData);\n      res.status(201).json(subject);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid subject data\" });\n    }\n  });\n\n  app.patch(\"/api/subjects/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, ...updateData } = req.body;\n      const updateSchema = insertSubjectSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const subject = await storage.updateSubject(req.params.id, validatedData);\n      res.json(subject);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update subject\" });\n    }\n  });\n\n  app.delete(\"/api/subjects/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteSubject(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete subject\" });\n    }\n  });\n\n  // ==================== EDUCATION LEVELS ROUTES ====================\n  app.get(\"/api/education-levels\", requireAdmin, async (req, res) => {\n    try {\n      const levels = await storage.getAllEducationLevels();\n      res.json(levels);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch education levels\" });\n    }\n  });\n\n  app.get(\"/api/education-levels/:id\", requireAdmin, async (req, res) => {\n    try {\n      const level = await storage.getEducationLevel(req.params.id);\n      if (!level) {\n        return res.status(404).json({ error: \"Education level not found\" });\n      }\n      res.json(level);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch education level\" });\n    }\n  });\n\n  app.post(\"/api/education-levels\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertEducationLevelSchema.parse(req.body);\n      const level = await storage.createEducationLevel(validatedData);\n      res.status(201).json(level);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid education level data\" });\n    }\n  });\n\n  app.patch(\"/api/education-levels/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, ...updateData } = req.body;\n      const updateSchema = insertEducationLevelSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const level = await storage.updateEducationLevel(req.params.id, validatedData);\n      res.json(level);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update education level\" });\n    }\n  });\n\n  app.delete(\"/api/education-levels/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteEducationLevel(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete education level\" });\n    }\n  });\n\n  // ==================== CLASSES ROUTES ====================\n  app.get(\"/api/classes\", requireAdmin, async (req, res) => {\n    try {\n      const classes = await storage.getAllClasses();\n      res.json(classes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch classes\" });\n    }\n  });\n\n  app.get(\"/api/classes/:id\", requireAdmin, async (req, res) => {\n    try {\n      const classData = await storage.getClass(req.params.id);\n      if (!classData) {\n        return res.status(404).json({ error: \"Class not found\" });\n      }\n      res.json(classData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch class\" });\n    }\n  });\n\n  app.get(\"/api/classes/level/:levelId\", requireAdmin, async (req, res) => {\n    try {\n      const classes = await storage.getClassesByEducationLevel(req.params.levelId);\n      res.json(classes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch classes by education level\" });\n    }\n  });\n\n  app.post(\"/api/classes\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertClassSchema.parse(req.body);\n      const classData = await storage.createClass(validatedData);\n      res.status(201).json(classData);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid class data\" });\n    }\n  });\n\n  app.patch(\"/api/classes/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, ...updateData } = req.body;\n      const updateSchema = insertClassSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const classData = await storage.updateClass(req.params.id, validatedData);\n      res.json(classData);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update class\" });\n    }\n  });\n\n  app.delete(\"/api/classes/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteClass(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete class\" });\n    }\n  });\n\n  // ==================== CLASS SUBJECTS ROUTES ====================\n  app.get(\"/api/class-subjects\", requireAdmin, async (req, res) => {\n    try {\n      const classSubjects = await storage.getAllClassSubjects();\n      res.json(classSubjects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch class subjects\" });\n    }\n  });\n\n  app.get(\"/api/grade-subjects/:educationLevelId/:grade\", requireAdmin, async (req, res) => {\n    try {\n      const classSubjects = await storage.getGradeSubjects(req.params.educationLevelId, req.params.grade);\n      res.json(classSubjects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch grade subjects\" });\n    }\n  });\n\n  app.post(\"/api/class-subjects\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertClassSubjectSchema.parse(req.body);\n      const classSubject = await storage.createClassSubject(validatedData);\n      res.status(201).json(classSubject);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid class subject data\" });\n    }\n  });\n\n  app.delete(\"/api/class-subjects/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteClassSubject(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete class subject\" });\n    }\n  });\n\n  // ==================== GRADES ROUTES ====================\n  app.get(\"/api/grades\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      const grades = await storage.getAllGrades();\n      res.json(grades);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch all grades\" });\n    }\n  });\n\n  app.get(\"/api/grades/class/all\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      const grades = await storage.getAllGrades();\n      res.json(grades);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch all grades\" });\n    }\n  });\n\n  app.get(\"/api/grades/student/:studentId\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      if (req.user!.role === 'teacher') {\n        const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n        if (!teacherUser) {\n          return res.status(403).json({ error: \"لم يتم ربط حسابك بمعلم\" });\n        }\n        \n        const canAccess = await storage.canTeacherAccessStudent(\n          teacherUser.teacherId,\n          req.params.studentId\n        );\n        \n        if (!canAccess) {\n          return res.status(403).json({ error: \"غير مصرح لك بالوصول لعلامات هذا الطالب\" });\n        }\n      }\n      \n      const grades = await storage.getStudentGrades(req.params.studentId);\n      res.json(grades);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student grades\" });\n    }\n  });\n\n  app.get(\"/api/grades/class/:classId\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      if (req.user!.role === 'teacher') {\n        const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n        if (!teacherUser) {\n          return res.status(403).json({ error: \"لم يتم ربط حسابك بمعلم\" });\n        }\n        \n        const canAccess = await storage.canTeacherAccessClass(\n          teacherUser.teacherId,\n          req.params.classId\n        );\n        \n        if (!canAccess) {\n          return res.status(403).json({ error: \"غير مصرح لك بالوصول لعلامات هذا الصف\" });\n        }\n      }\n      \n      const grades = await storage.getClassGrades(req.params.classId);\n      res.json(grades);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch class grades\" });\n    }\n  });\n\n  app.post(\"/api/grades\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      const validatedData = insertGradeSchema.parse(req.body);\n      \n      if (req.user!.role === 'teacher') {\n        const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n        if (!teacherUser) {\n          return res.status(403).json({ error: \"لم يتم ربط حسابك بمعلم\" });\n        }\n        \n        const canAccess = await storage.canTeacherAccessStudent(\n          teacherUser.teacherId,\n          validatedData.studentId,\n          validatedData.subjectId\n        );\n        \n        if (!canAccess) {\n          return res.status(403).json({ error: \"غير مصرح لك بإضافة علامات لهذا الطالب\" });\n        }\n      }\n      \n      const scoreNum = parseFloat(validatedData.score as string);\n      const maxScoreNum = parseFloat(validatedData.maxScore as string);\n      \n      if (scoreNum > maxScoreNum) {\n        return res.status(400).json({ \n          error: `العلامة التي حصل عليها الطالب (${validatedData.score}) لا يمكن أن تزيد عن العلامة النهائية (${validatedData.maxScore})` \n        });\n      }\n      \n      const grade = await storage.createGrade(validatedData);\n      res.status(201).json(grade);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid grade data\" });\n    }\n  });\n\n  app.patch(\"/api/grades/:id\", requireAdminOrTeacher, async (req, res) => {\n    try {\n      const { id, createdAt, ...updateData } = req.body;\n      const updateSchema = insertGradeSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      \n      if (req.user!.role === 'teacher') {\n        const teacherUser = await storage.getTeacherUserByUserId(req.user!.id);\n        if (!teacherUser) {\n          return res.status(403).json({ error: \"لم يتم ربط حسابك بمعلم\" });\n        }\n        \n        if (validatedData.studentId) {\n          const canAccess = await storage.canTeacherAccessStudent(\n            teacherUser.teacherId,\n            validatedData.studentId,\n            validatedData.subjectId\n          );\n          \n          if (!canAccess) {\n            return res.status(403).json({ error: \"غير مصرح لك بتعديل علامات هذا الطالب\" });\n          }\n        }\n      }\n      \n      if (validatedData.score && validatedData.maxScore) {\n        const scoreNum = parseFloat(validatedData.score);\n        const maxScoreNum = parseFloat(validatedData.maxScore);\n        \n        if (scoreNum > maxScoreNum) {\n          return res.status(400).json({ \n            error: `العلامة التي حصل عليها الطالب (${validatedData.score}) لا يمكن أن تزيد عن العلامة النهائية (${validatedData.maxScore})` \n          });\n        }\n      }\n      \n      const grade = await storage.updateGrade(req.params.id, validatedData);\n      res.json(grade);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update grade\" });\n    }\n  });\n\n  app.delete(\"/api/grades/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteGrade(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete grade\" });\n    }\n  });\n\n  // ==================== ATTENDANCE ROUTES ====================\n  app.get(\"/api/attendance/student/:studentId\", requireAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const attendance = await storage.getStudentAttendance(\n        req.params.studentId, \n        startDate as string, \n        endDate as string\n      );\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student attendance\" });\n    }\n  });\n\n  app.get(\"/api/attendance/class/:classId/:date\", requireAdmin, async (req, res) => {\n    try {\n      const attendance = await storage.getClassAttendance(req.params.classId, req.params.date);\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch class attendance\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertAttendanceSchema.parse(req.body);\n      const attendance = await storage.createAttendance(validatedData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid attendance data\" });\n    }\n  });\n\n  app.patch(\"/api/attendance/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, ...updateData } = req.body;\n      const updateSchema = insertAttendanceSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const attendance = await storage.updateAttendance(req.params.id, validatedData);\n      res.json(attendance);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update attendance\" });\n    }\n  });\n\n  // ==================== PAYMENTS ROUTES ====================\n  app.get(\"/api/payments\", requireAdmin, async (req, res) => {\n    try {\n      const payments = await storage.getAllPayments();\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.get(\"/api/payments/student/:studentId\", requireAdmin, async (req, res) => {\n    try {\n      const payments = await storage.getStudentPayments(req.params.studentId);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student payments\" });\n    }\n  });\n\n  app.get(\"/api/payments/pending\", requireAdmin, async (req, res) => {\n    try {\n      const payments = await storage.getPendingPayments();\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pending payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(validatedData);\n      res.status(201).json(payment);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid payment data\" });\n    }\n  });\n\n  app.patch(\"/api/payments/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, updatedAt, ...updateData } = req.body;\n      const updateSchema = insertPaymentSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const payment = await storage.updatePayment(req.params.id, validatedData);\n      res.json(payment);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update payment\" });\n    }\n  });\n\n  // ==================== ACCOUNTING ROUTES ====================\n  app.get(\"/api/accounting/accounts\", async (req, res) => {\n    try {\n      const accounts = await storage.getAllStudentAccounts();\n      res.json(accounts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student accounts\" });\n    }\n  });\n\n  app.get(\"/api/accounting/accounts/:studentId\", async (req, res) => {\n    try {\n      const account = await storage.getStudentAccount(req.params.studentId);\n      if (!account) {\n        return res.status(404).json({ error: \"Student account not found\" });\n      }\n      res.json(account);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student account\" });\n    }\n  });\n\n  app.post(\"/api/accounting/accounts\", async (req, res) => {\n    try {\n      const validatedData = insertStudentAccountSchema.parse(req.body);\n      const account = await storage.createStudentAccount(validatedData);\n      res.status(201).json(account);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid account data\" });\n    }\n  });\n\n  app.patch(\"/api/accounting/accounts/:id\", async (req, res) => {\n    try {\n      const { id, createdAt, updatedAt, ...updateData } = req.body;\n      const updateSchema = insertStudentAccountSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const account = await storage.updateStudentAccount(req.params.id, validatedData);\n      res.json(account);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update account\" });\n    }\n  });\n\n  app.post(\"/api/accounting/payments\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertPaymentTransactionSchema.parse(req.body);\n      const transaction = await storage.createPaymentTransaction(validatedData);\n      \n      const account = await storage.getStudentAccount(validatedData.studentId);\n      if (account) {\n        const newTotalPaid = Number(account.totalPaid) + Number(validatedData.amount);\n        const newBalance = Number(account.totalAmountDue) - newTotalPaid;\n        \n        await storage.updateStudentAccount(account.id, {\n          totalPaid: newTotalPaid.toString(),\n          currentBalance: newBalance.toString(),\n        });\n      }\n      \n      res.status(201).json(transaction);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid payment transaction data\" });\n    }\n  });\n\n  app.get(\"/api/accounting/transactions/:studentId\", async (req, res) => {\n    try {\n      const transactions = await storage.getStudentTransactions(req.params.studentId);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student transactions\" });\n    }\n  });\n\n  app.get(\"/api/accounting/transactions\", async (req, res) => {\n    try {\n      const transactions = await storage.getAllTransactions();\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch all transactions\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/transactions/:id\", async (req, res) => {\n    try {\n      await storage.deletePaymentTransaction(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete payment transaction\" });\n    }\n  });\n\n  // ==================== NOTIFICATIONS ROUTES ====================\n  app.get(\"/api/notifications\", requireAdmin, async (req, res) => {\n    try {\n      const notifications = await storage.getAllNotifications();\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(validatedData);\n      res.status(201).json(notification);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid notification data\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", requireAdmin, async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // ==================== SCHOOL SETTINGS ROUTES ====================\n  app.get(\"/api/school-settings\", requireAuth, async (req, res) => {\n    try {\n      const settings = await storage.getSchoolSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch school settings\" });\n    }\n  });\n\n  app.patch(\"/api/school-settings\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSchoolSettingsSchema.partial().parse(req.body);\n      const settings = await storage.updateSchoolSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Failed to update school settings:\", error);\n      res.status(400).json({ error: \"Failed to update school settings\" });\n    }\n  });\n\n  // ==================== TEACHER SALARIES ROUTES ====================\n  app.get(\"/api/teacher-salaries/:teacherId\", async (req, res) => {\n    try {\n      const salaries = await storage.getTeacherSalaries(req.params.teacherId);\n      res.json(salaries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teacher salaries\" });\n    }\n  });\n\n  app.get(\"/api/teacher-salaries\", async (req, res) => {\n    try {\n      const { month } = req.query;\n      const salaries = await storage.getAllTeacherSalaries(month as string);\n      res.json(salaries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch all teacher salaries\" });\n    }\n  });\n\n  app.post(\"/api/teacher-salaries\", async (req, res) => {\n    try {\n      const validatedData = insertTeacherSalarySchema.parse(req.body);\n      \n      const pendingAdvances = (await storage.getTeacherAdvances(validatedData.teacherId))\n        .filter(advance => advance.status === 'pending');\n      \n      const totalAdvances = pendingAdvances.reduce((sum, advance) => \n        sum + Number(advance.amount), 0);\n      \n      // حساب عدد أيام الغياب بدون راتب في الشهر\n      const unpaidLeaveDays = await storage.getTeacherUnpaidLeaveDays(\n        validatedData.teacherId, \n        validatedData.month\n      );\n      \n      // حساب قيمة الخصم من الغياب (الراتب الشهري / 30 × عدد أيام الغياب)\n      const baseAmount = Number(validatedData.baseSalary);\n      const unpaidLeaveDeduction = unpaidLeaveDays > 0 \n        ? (baseAmount / 30) * unpaidLeaveDays \n        : 0;\n      \n      const bonusAmount = Number(validatedData.bonuses || 0);\n      const deductionAmount = Number(validatedData.deductions || 0);\n      \n      // إضافة خصم الغياب إلى الخصومات\n      const totalDeductions = deductionAmount + unpaidLeaveDeduction;\n      \n      const grossSalary = baseAmount + bonusAmount - totalDeductions;\n      const netSalary = Math.max(0, grossSalary - totalAdvances);\n      \n      const salaryData = {\n        ...validatedData,\n        deductions: totalDeductions.toFixed(2),\n        advancesDeducted: totalAdvances.toFixed(2),\n        netSalary: netSalary.toFixed(2),\n      };\n      \n      const salary = await storage.createTeacherSalary(salaryData);\n      \n      for (const advance of pendingAdvances) {\n        await storage.updateTeacherAdvance(advance.id, { status: 'deducted' });\n      }\n      \n      res.status(201).json(salary);\n    } catch (error) {\n      console.error('Teacher salary creation error:', error);\n      res.status(400).json({ error: \"Invalid teacher salary data\" });\n    }\n  });\n\n  app.patch(\"/api/teacher-salaries/:id\", async (req, res) => {\n    try {\n      const { id, createdAt, updatedAt, ...updateData } = req.body;\n      const updateSchema = insertTeacherSalarySchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const salary = await storage.updateTeacherSalary(req.params.id, validatedData);\n      res.json(salary);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update teacher salary\" });\n    }\n  });\n\n  app.delete(\"/api/teacher-salaries/:id\", async (req, res) => {\n    try {\n      await storage.deleteTeacherSalary(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete teacher salary\" });\n    }\n  });\n\n  // ==================== TEACHER ADVANCES ROUTES ====================\n  app.get(\"/api/teacher-advances/:teacherId\", async (req, res) => {\n    try {\n      const advances = await storage.getTeacherAdvances(req.params.teacherId);\n      res.json(advances);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teacher advances\" });\n    }\n  });\n\n  app.get(\"/api/teacher-advances\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      const advances = await storage.getAllTeacherAdvances(status as string);\n      res.json(advances);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch all teacher advances\" });\n    }\n  });\n\n  app.post(\"/api/teacher-advances\", async (req, res) => {\n    try {\n      console.log('[POST /api/teacher-advances] Request body:', req.body);\n      const validatedData = insertTeacherAdvanceSchema.parse(req.body);\n      \n      const teacher = await storage.getTeacher(validatedData.teacherId);\n      console.log('[POST /api/teacher-advances] Teacher found:', teacher ? `${teacher.arabicName} (${teacher.monthlySalary})` : 'not found');\n      \n      if (!teacher) {\n        return res.status(404).json({ error: \"المعلم غير موجود\" });\n      }\n      \n      const pendingAdvances = (await storage.getTeacherAdvances(validatedData.teacherId))\n        .filter(advance => advance.status === 'pending');\n      \n      console.log('[POST /api/teacher-advances] Pending advances:', pendingAdvances.length);\n      \n      const totalPendingAdvances = pendingAdvances.reduce((sum, advance) => \n        sum + Number(advance.amount), 0);\n      \n      const newAdvanceAmount = Number(validatedData.amount);\n      const totalWithNewAdvance = totalPendingAdvances + newAdvanceAmount;\n      const monthlySalary = Number(teacher.monthlySalary);\n      \n      console.log('[POST /api/teacher-advances] Check:', {\n        totalPendingAdvances,\n        newAdvanceAmount,\n        totalWithNewAdvance,\n        monthlySalary,\n        exceeds: totalWithNewAdvance > monthlySalary\n      });\n      \n      if (totalWithNewAdvance > monthlySalary) {\n        console.log('[POST /api/teacher-advances] REJECTED: Exceeds monthly salary');\n        return res.status(400).json({ \n          error: `لا يمكن إضافة هذه السلفة. مجموع السلف المعلقة (${totalPendingAdvances.toFixed(2)}) + السلفة الجديدة (${newAdvanceAmount.toFixed(2)}) = ${totalWithNewAdvance.toFixed(2)} يتجاوز الراتب الشهري (${monthlySalary.toFixed(2)})`\n        });\n      }\n      \n      console.log('[POST /api/teacher-advances] ACCEPTED: Creating advance');\n      const advance = await storage.createTeacherAdvance(validatedData);\n      res.status(201).json(advance);\n    } catch (error) {\n      console.error('[POST /api/teacher-advances] Error:', error);\n      if (error instanceof Error && 'error' in error) {\n        return res.status(400).json(error);\n      }\n      res.status(400).json({ error: \"بيانات السلفة غير صحيحة\" });\n    }\n  });\n\n  app.patch(\"/api/teacher-advances/:id\", async (req, res) => {\n    try {\n      const { id, createdAt, ...updateData } = req.body;\n      const updateSchema = insertTeacherAdvanceSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const advance = await storage.updateTeacherAdvance(req.params.id, validatedData);\n      res.json(advance);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update teacher advance\" });\n    }\n  });\n\n  app.delete(\"/api/teacher-advances/:id\", async (req, res) => {\n    try {\n      await storage.deleteTeacherAdvance(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete teacher advance\" });\n    }\n  });\n\n  // ==================== SCHOOL EXPENSES ROUTES ====================\n  app.get(\"/api/school-expenses\", requireAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const expenses = await storage.getAllSchoolExpenses(startDate as string, endDate as string);\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch school expenses\" });\n    }\n  });\n\n  app.get(\"/api/school-expenses/category/:category\", requireAdmin, async (req, res) => {\n    try {\n      const expenses = await storage.getSchoolExpensesByCategory(req.params.category);\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch expenses by category\" });\n    }\n  });\n\n  app.post(\"/api/school-expenses\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSchoolExpenseSchema.parse(req.body);\n      const expense = await storage.createSchoolExpense(validatedData);\n      res.status(201).json(expense);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid school expense data\" });\n    }\n  });\n\n  app.patch(\"/api/school-expenses/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, ...updateData } = req.body;\n      const updateSchema = insertSchoolExpenseSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const expense = await storage.updateSchoolExpense(req.params.id, validatedData);\n      res.json(expense);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update school expense\" });\n    }\n  });\n\n  app.delete(\"/api/school-expenses/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteSchoolExpense(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete school expense\" });\n    }\n  });\n\n  // ==================== TEACHER ATTENDANCE ROUTES ====================\n  app.get(\"/api/teacher-attendance\", requireAdmin, async (req, res) => {\n    try {\n      const { date } = req.query;\n      const attendance = await storage.getAllTeacherAttendance(date as string);\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teacher attendance\" });\n    }\n  });\n\n  app.get(\"/api/teacher-attendance/teacher/:teacherId\", requireAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const attendance = await storage.getTeacherAttendance(\n        req.params.teacherId, \n        startDate as string, \n        endDate as string\n      );\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teacher attendance\" });\n    }\n  });\n\n  app.get(\"/api/teacher-attendance/unpaid-days/:teacherId/:month\", requireAdmin, async (req, res) => {\n    try {\n      const unpaidDays = await storage.getTeacherUnpaidLeaveDays(\n        req.params.teacherId, \n        req.params.month\n      );\n      res.json({ unpaidDays });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to calculate unpaid leave days\" });\n    }\n  });\n\n  app.post(\"/api/teacher-attendance\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertTeacherAttendanceSchema.parse(req.body);\n      const attendance = await storage.createTeacherAttendance(validatedData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      res.status(400).json({ error: \"بيانات الحضور غير صحيحة\" });\n    }\n  });\n\n  app.patch(\"/api/teacher-attendance/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id, createdAt, ...updateData } = req.body;\n      const updateSchema = insertTeacherAttendanceSchema.partial();\n      const validatedData = updateSchema.parse(updateData);\n      const attendance = await storage.updateTeacherAttendance(req.params.id, validatedData);\n      res.json(attendance);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update teacher attendance\" });\n    }\n  });\n\n  app.delete(\"/api/teacher-attendance/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteTeacherAttendance(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete teacher attendance\" });\n    }\n  });\n\n  // ==================== DASHBOARD STATISTICS ROUTES ====================\n  app.get(\"/api/dashboard/stats\", requireAdmin, async (req, res) => {\n    try {\n      const { year, months } = req.query;\n      \n      const allStudents = await storage.getAllStudents();\n      const allTeachers = await storage.getAllTeachers();\n      const allClasses = await storage.getAllClasses();\n      const accounts = await storage.getAllStudentAccounts();\n      let transactions = await storage.getAllTransactions();\n      let salaries = await storage.getAllTeacherSalaries();\n      let advances = await storage.getAllTeacherAdvances();\n      \n      // Filter by year and months if provided\n      if (year && months) {\n        const selectedYear = parseInt(year as string);\n        const selectedMonths = (months as string).split(',').map((m: string) => parseInt(m));\n        \n        // Filter transactions\n        transactions = transactions.filter((t: any) => {\n          if (!t.paymentDate) return false;\n          const paymentDate = new Date(t.paymentDate);\n          const paymentYear = paymentDate.getFullYear();\n          const paymentMonth = paymentDate.getMonth() + 1;\n          return paymentYear === selectedYear && selectedMonths.includes(paymentMonth);\n        });\n        \n        // Filter salaries\n        salaries = salaries.filter((s: any) => {\n          const [yearStr, monthStr] = s.month.split('-');\n          const year = parseInt(yearStr);\n          const month = parseInt(monthStr);\n          return year === selectedYear && selectedMonths.includes(month);\n        });\n        \n        // Filter advances\n        advances = advances.filter((a: any) => {\n          if (!a.advanceDate) return false;\n          const advanceDate = new Date(a.advanceDate);\n          const advanceYear = advanceDate.getFullYear();\n          const advanceMonth = advanceDate.getMonth() + 1;\n          return advanceYear === selectedYear && selectedMonths.includes(advanceMonth);\n        });\n        \n        // Get unique student IDs from transactions\n        const studentIdsWithTransactions = new Set(transactions.map((t: any) => t.studentId));\n        const studentsWithActivity = allStudents.filter(s => studentIdsWithTransactions.has(s.id));\n        \n        // Get unique teacher IDs from salaries and advances\n        const teacherIdsWithActivity = new Set([\n          ...salaries.map((s: any) => s.teacherId),\n          ...advances.map((a: any) => a.teacherId)\n        ]);\n        const teachersWithActivity = allTeachers.filter(t => teacherIdsWithActivity.has(t.id));\n        \n        // Get classes that have students with transactions\n        const classIdsWithActivity = new Set(\n          studentsWithActivity.map(s => s.classId).filter(Boolean)\n        );\n        \n        // Calculate stats (filtered)\n        const totalStudents = studentsWithActivity.length;\n        const activeStudents = studentsWithActivity.filter(s => s.status === 'active').length;\n        const activeTeachers = teachersWithActivity.filter(t => t.status === 'active').length;\n        const totalRevenue = transactions.reduce((sum: number, t: any) => sum + Number(t.amount), 0);\n        const pendingPayments = accounts.filter(acc => Number(acc.currentBalance) > 0).length;\n\n        res.json({\n          totalStudents,\n          activeStudents,\n          activeTeachers,\n          totalRevenue,\n          pendingPayments,\n          totalClasses: classIdsWithActivity.size,\n        });\n      } else {\n        // No filter - return all data\n        const totalStudents = allStudents.length;\n        const activeStudents = allStudents.filter(s => s.status === 'active').length;\n        const activeTeachers = allTeachers.filter(t => t.status === 'active').length;\n        \n        // Get all school expenses\n        const allExpenses = await storage.getAllSchoolExpenses();\n        \n        // Calculate totals for all time\n        const revenue = transactions.reduce((sum: number, t: any) => sum + Number(t.amount), 0);\n        const expenses = allExpenses.reduce((sum: number, e: any) => sum + Number(e.amount), 0);\n        const salariesTotal = salaries.reduce((sum: number, s: any) => sum + Number(s.netSalary), 0);\n        const totalRevenue = revenue - expenses - salariesTotal; // Net profit\n        const pendingPayments = accounts.filter(acc => Number(acc.currentBalance) > 0).length;\n\n        res.json({\n          totalStudents,\n          activeStudents,\n          activeTeachers,\n          totalRevenue,\n          pendingPayments,\n          totalClasses: allClasses.length,\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // ==================== DATABASE BACKUP ROUTE ====================\n  app.get(\"/api/database/backup\", async (req, res) => {\n    try {\n      const students = await storage.getAllStudents();\n      const teachers = await storage.getAllTeachers();\n      const subjects = await storage.getAllSubjects();\n      const educationLevels = await storage.getAllEducationLevels();\n      const classes = await storage.getAllClasses();\n      const classSubjects = await storage.getAllClassSubjects();\n      const grades = await storage.getAllGrades();\n      const attendance = await storage.getAllAttendance();\n      const payments = await storage.getAllPayments();\n      const accounts = await storage.getAllStudentAccounts();\n      const transactions = await storage.getAllTransactions();\n      const notifications = await storage.getAllNotifications();\n      const settings = await storage.getSchoolSettings();\n      const salaries = await storage.getAllTeacherSalaries();\n      const advances = await storage.getAllTeacherAdvances();\n      const expenses = await storage.getAllSchoolExpenses();\n\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const filename = `school_backup_${timestamp}.sql`;\n\n      res.setHeader('Content-Type', 'application/sql');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n\n      // SQL Header (MySQL/phpMyAdmin compatible)\n      let sql = `-- School Management System Database Backup\\n`;\n      sql += `-- Generated: ${new Date().toISOString()}\\n`;\n      sql += `-- Database: MySQL/MariaDB Compatible\\n\\n`;\n      sql += `SET NAMES utf8mb4;\\n`;\n      sql += `SET CHARACTER SET utf8mb4;\\n\\n`;\n\n      // Helper function to escape SQL strings for MySQL\n      const escapeSql = (val: any): string => {\n        if (val === null || val === undefined) return 'NULL';\n        if (typeof val === 'boolean') return val ? '1' : '0';\n        if (typeof val === 'number') return val.toString();\n        if (typeof val === 'string') return `'${val.replace(/'/g, \"''\").replace(/\\\\/g, '\\\\\\\\')}'`;\n        if (val instanceof Date) return `'${val.toISOString().replace('T', ' ').replace('Z', '').substring(0, 19)}'`;\n        return `'${String(val).replace(/'/g, \"''\").replace(/\\\\/g, '\\\\\\\\')}'`;\n      };\n\n      // Education Levels\n      if (educationLevels.length > 0) {\n        sql += `-- Education Levels\\n`;\n        sql += `INSERT INTO \\`education_levels\\` (\\`id\\`, \\`name\\`, \\`order\\`, \\`description\\`, \\`created_at\\`) VALUES\\n`;\n        sql += educationLevels.map((level: any) => \n          `(${escapeSql(level.id)}, ${escapeSql(level.name)}, ${escapeSql(level.order)}, ${escapeSql(level.description)}, ${escapeSql(level.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Classes\n      if (classes.length > 0) {\n        sql += `-- Classes\\n`;\n        sql += `INSERT INTO \\`classes\\` (\\`id\\`, \\`education_level_id\\`, \\`name\\`, \\`grade\\`, \\`section\\`, \\`academic_year\\`, \\`capacity\\`, \\`room_number\\`, \\`teacher_id\\`, \\`created_at\\`) VALUES\\n`;\n        sql += classes.map((cls: any) => \n          `(${escapeSql(cls.id)}, ${escapeSql(cls.educationLevelId)}, ${escapeSql(cls.name)}, ${escapeSql(cls.grade)}, ${escapeSql(cls.section)}, ${escapeSql(cls.academicYear)}, ${escapeSql(cls.capacity)}, ${escapeSql(cls.roomNumber)}, ${escapeSql(cls.teacherId)}, ${escapeSql(cls.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Students\n      if (students.length > 0) {\n        sql += `-- Students\\n`;\n        sql += `INSERT INTO \\`students\\` (\\`id\\`, \\`arabic_name\\`, \\`date_of_birth\\`, \\`gender\\`, \\`national_id\\`, \\`enrollment_date\\`, \\`class_id\\`, \\`parent_name\\`, \\`parent_phone\\`, \\`parent_email\\`, \\`address\\`, \\`medical_notes\\`, \\`status\\`, \\`photo_url\\`, \\`created_at\\`, \\`updated_at\\`) VALUES\\n`;\n        sql += students.map((student: any) => \n          `(${escapeSql(student.id)}, ${escapeSql(student.arabicName)}, ${escapeSql(student.dateOfBirth)}, ${escapeSql(student.gender)}, ${escapeSql(student.nationalId)}, ${escapeSql(student.enrollmentDate)}, ${escapeSql(student.classId)}, ${escapeSql(student.parentName)}, ${escapeSql(student.parentPhone)}, ${escapeSql(student.parentEmail)}, ${escapeSql(student.address)}, ${escapeSql(student.medicalNotes)}, ${escapeSql(student.status)}, ${escapeSql(student.photoUrl)}, ${escapeSql(student.createdAt)}, ${escapeSql(student.updatedAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Teachers\n      if (teachers.length > 0) {\n        sql += `-- Teachers\\n`;\n        sql += `INSERT INTO \\`teachers\\` (\\`id\\`, \\`arabic_name\\`, \\`email\\`, \\`phone\\`, \\`gender\\`, \\`date_of_birth\\`, \\`hire_date\\`, \\`qualification\\`, \\`specialization\\`, \\`monthly_salary\\`, \\`status\\`, \\`photo_url\\`, \\`created_at\\`, \\`updated_at\\`) VALUES\\n`;\n        sql += teachers.map((teacher: any) => \n          `(${escapeSql(teacher.id)}, ${escapeSql(teacher.arabicName)}, ${escapeSql(teacher.email)}, ${escapeSql(teacher.phone)}, ${escapeSql(teacher.gender)}, ${escapeSql(teacher.dateOfBirth)}, ${escapeSql(teacher.hireDate)}, ${escapeSql(teacher.qualification)}, ${escapeSql(teacher.specialization)}, ${escapeSql(teacher.monthlySalary)}, ${escapeSql(teacher.status)}, ${escapeSql(teacher.photoUrl)}, ${escapeSql(teacher.createdAt)}, ${escapeSql(teacher.updatedAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Subjects\n      if (subjects.length > 0) {\n        sql += `-- Subjects\\n`;\n        sql += `INSERT INTO \\`subjects\\` (\\`id\\`, \\`name\\`, \\`arabic_name\\`, \\`code\\`, \\`description\\`, \\`created_at\\`) VALUES\\n`;\n        sql += subjects.map((subject: any) => \n          `(${escapeSql(subject.id)}, ${escapeSql(subject.name)}, ${escapeSql(subject.arabicName)}, ${escapeSql(subject.code)}, ${escapeSql(subject.description)}, ${escapeSql(subject.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Class Subjects\n      if (classSubjects.length > 0) {\n        sql += `-- Class Subjects\\n`;\n        sql += `INSERT INTO \\`class_subjects\\` (\\`id\\`, \\`class_id\\`, \\`subject_id\\`, \\`teacher_id\\`, \\`weekly_hours\\`, \\`created_at\\`) VALUES\\n`;\n        sql += classSubjects.map((cs: any) => \n          `(${escapeSql(cs.id)}, ${escapeSql(cs.classId)}, ${escapeSql(cs.subjectId)}, ${escapeSql(cs.teacherId)}, ${escapeSql(cs.weeklyHours)}, ${escapeSql(cs.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Grades\n      if (grades.length > 0) {\n        sql += `-- Grades\\n`;\n        sql += `INSERT INTO \\`grades\\` (\\`id\\`, \\`student_id\\`, \\`subject_id\\`, \\`class_id\\`, \\`semester\\`, \\`assessment_type\\`, \\`assessment_name\\`, \\`score\\`, \\`max_score\\`, \\`percentage\\`, \\`date\\`, \\`teacher_id\\`, \\`notes\\`, \\`created_at\\`) VALUES\\n`;\n        sql += grades.map((grade: any) => \n          `(${escapeSql(grade.id)}, ${escapeSql(grade.studentId)}, ${escapeSql(grade.subjectId)}, ${escapeSql(grade.classId)}, ${escapeSql(grade.semester)}, ${escapeSql(grade.assessmentType)}, ${escapeSql(grade.assessmentName)}, ${escapeSql(grade.score)}, ${escapeSql(grade.maxScore)}, ${escapeSql(grade.percentage)}, ${escapeSql(grade.date)}, ${escapeSql(grade.teacherId)}, ${escapeSql(grade.notes)}, ${escapeSql(grade.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Attendance\n      if (attendance.length > 0) {\n        sql += `-- Attendance\\n`;\n        sql += `INSERT INTO \\`attendance\\` (\\`id\\`, \\`student_id\\`, \\`class_id\\`, \\`date\\`, \\`status\\`, \\`notes\\`, \\`recorded_by\\`, \\`created_at\\`) VALUES\\n`;\n        sql += attendance.map((att: any) => \n          `(${escapeSql(att.id)}, ${escapeSql(att.studentId)}, ${escapeSql(att.classId)}, ${escapeSql(att.date)}, ${escapeSql(att.status)}, ${escapeSql(att.notes)}, ${escapeSql(att.recordedBy)}, ${escapeSql(att.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Student Accounts\n      if (accounts.length > 0) {\n        sql += `-- Student Accounts\\n`;\n        sql += `INSERT INTO \\`student_accounts\\` (\\`id\\`, \\`student_id\\`, \\`total_amount_due\\`, \\`total_paid\\`, \\`current_balance\\`, \\`academic_year\\`, \\`notes\\`, \\`created_at\\`, \\`updated_at\\`) VALUES\\n`;\n        sql += accounts.map((acc: any) => \n          `(${escapeSql(acc.id)}, ${escapeSql(acc.studentId)}, ${escapeSql(acc.totalAmountDue)}, ${escapeSql(acc.totalPaid)}, ${escapeSql(acc.currentBalance)}, ${escapeSql(acc.academicYear)}, ${escapeSql(acc.notes)}, ${escapeSql(acc.createdAt)}, ${escapeSql(acc.updatedAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Payment Transactions\n      if (transactions.length > 0) {\n        sql += `-- Payment Transactions\\n`;\n        sql += `INSERT INTO \\`payment_transactions\\` (\\`id\\`, \\`student_account_id\\`, \\`student_id\\`, \\`amount\\`, \\`payment_date\\`, \\`payment_method\\`, \\`receipt_number\\`, \\`notes\\`, \\`recorded_by\\`, \\`created_at\\`) VALUES\\n`;\n        sql += transactions.map((trans: any) => \n          `(${escapeSql(trans.id)}, ${escapeSql(trans.studentAccountId)}, ${escapeSql(trans.studentId)}, ${escapeSql(trans.amount)}, ${escapeSql(trans.paymentDate)}, ${escapeSql(trans.paymentMethod)}, ${escapeSql(trans.receiptNumber)}, ${escapeSql(trans.notes)}, ${escapeSql(trans.recordedBy)}, ${escapeSql(trans.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Teacher Salaries\n      if (salaries.length > 0) {\n        sql += `-- Teacher Salaries\\n`;\n        sql += `INSERT INTO \\`teacher_salaries\\` (\\`id\\`, \\`teacher_id\\`, \\`month\\`, \\`base_salary\\`, \\`bonuses\\`, \\`deductions\\`, \\`advances_deducted\\`, \\`net_salary\\`, \\`payment_date\\`, \\`status\\`, \\`notes\\`, \\`recorded_by\\`, \\`created_at\\`, \\`updated_at\\`) VALUES\\n`;\n        sql += salaries.map((sal: any) => \n          `(${escapeSql(sal.id)}, ${escapeSql(sal.teacherId)}, ${escapeSql(sal.month)}, ${escapeSql(sal.baseSalary)}, ${escapeSql(sal.bonuses)}, ${escapeSql(sal.deductions)}, ${escapeSql(sal.advancesDeducted)}, ${escapeSql(sal.netSalary)}, ${escapeSql(sal.paymentDate)}, ${escapeSql(sal.status)}, ${escapeSql(sal.notes)}, ${escapeSql(sal.recordedBy)}, ${escapeSql(sal.createdAt)}, ${escapeSql(sal.updatedAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // Teacher Advances\n      if (advances.length > 0) {\n        sql += `-- Teacher Advances\\n`;\n        sql += `INSERT INTO \\`teacher_advances\\` (\\`id\\`, \\`teacher_id\\`, \\`amount\\`, \\`advance_date\\`, \\`deduction_month\\`, \\`status\\`, \\`notes\\`, \\`recorded_by\\`, \\`created_at\\`) VALUES\\n`;\n        sql += advances.map((adv: any) => \n          `(${escapeSql(adv.id)}, ${escapeSql(adv.teacherId)}, ${escapeSql(adv.amount)}, ${escapeSql(adv.advanceDate)}, ${escapeSql(adv.deductionMonth)}, ${escapeSql(adv.status)}, ${escapeSql(adv.notes)}, ${escapeSql(adv.recordedBy)}, ${escapeSql(adv.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // School Expenses\n      if (expenses.length > 0) {\n        sql += `-- School Expenses\\n`;\n        sql += `INSERT INTO \\`school_expenses\\` (\\`id\\`, \\`category\\`, \\`description\\`, \\`amount\\`, \\`expense_date\\`, \\`payment_method\\`, \\`receipt_number\\`, \\`vendor_name\\`, \\`notes\\`, \\`recorded_by\\`, \\`created_at\\`) VALUES\\n`;\n        sql += expenses.map((exp: any) => \n          `(${escapeSql(exp.id)}, ${escapeSql(exp.category)}, ${escapeSql(exp.description)}, ${escapeSql(exp.amount)}, ${escapeSql(exp.expenseDate)}, ${escapeSql(exp.paymentMethod)}, ${escapeSql(exp.receiptNumber)}, ${escapeSql(exp.vendorName)}, ${escapeSql(exp.notes)}, ${escapeSql(exp.recordedBy)}, ${escapeSql(exp.createdAt)})`\n        ).join(',\\n') + ';\\n\\n';\n      }\n\n      // School Settings\n      if (settings) {\n        sql += `-- School Settings\\n`;\n        sql += `INSERT INTO \\`school_settings\\` (\\`id\\`, \\`school_name\\`, \\`school_name_arabic\\`, \\`current_academic_year\\`, \\`currency\\`, \\`phone\\`, \\`email\\`, \\`address\\`, \\`logo_url\\`, \\`updated_at\\`) VALUES\\n`;\n        sql += `(${escapeSql(settings.id)}, ${escapeSql(settings.schoolName)}, ${escapeSql(settings.schoolNameArabic)}, ${escapeSql(settings.currentAcademicYear)}, ${escapeSql(settings.currency)}, ${escapeSql(settings.phone)}, ${escapeSql(settings.email)}, ${escapeSql(settings.address)}, ${escapeSql(settings.logoUrl)}, ${escapeSql(settings.updatedAt)});\\n\\n`;\n      }\n\n      sql += `-- End of backup\\n`;\n\n      res.send(sql);\n    } catch (error) {\n      console.error(\"Database backup error:\", error);\n      res.status(500).json({ error: \"Failed to create database backup\" });\n    }\n  });\n\n  // ==================== EXPORT TO EXCEL ====================\n  app.get(\"/api/export/excel\", async (req, res) => {\n    try {\n      const XLSX = await import('xlsx');\n      \n      // جلب جميع البيانات\n      const students = await storage.getAllStudents();\n      const teachers = await storage.getAllTeachers();\n      const classes = await storage.getAllClasses();\n      const subjects = await storage.getAllSubjects();\n      const grades = await storage.getAllGrades();\n      const attendance = await storage.getAllAttendance();\n      const accounts = await storage.getAllStudentAccounts();\n      const transactions = await storage.getAllTransactions();\n      const salaries = await storage.getAllTeacherSalaries();\n      const advances = await storage.getAllTeacherAdvances();\n      const expenses = await storage.getAllSchoolExpenses();\n      const settings = await storage.getSchoolSettings();\n      const educationLevels = await storage.getAllEducationLevels();\n\n      // إنشاء workbook\n      const workbook = XLSX.utils.book_new();\n\n      // ورقة الطلاب\n      if (students.length > 0) {\n        const studentsData = students.map(s => ({\n          'الرقم التعريفي': s.id,\n          'الاسم بالعربي': s.arabicName,\n          'الجنس': s.gender === 'male' ? 'ذكر' : 'أنثى',\n          'تاريخ الميلاد': s.dateOfBirth,\n          'ولي الأمر': s.parentName,\n          'رقم ولي الأمر': s.parentPhone,\n          'العنوان': s.address || '',\n          'الحالة': s.status === 'active' ? 'نشط' : 'غير نشط',\n          'تاريخ التسجيل': s.enrollmentDate,\n        }));\n        const studentsSheet = XLSX.utils.json_to_sheet(studentsData);\n        XLSX.utils.book_append_sheet(workbook, studentsSheet, 'الطلاب');\n      }\n\n      // ورقة المعلمين\n      if (teachers.length > 0) {\n        const teachersData = teachers.map(t => ({\n          'الرقم التعريفي': t.id,\n          'الاسم بالعربي': t.arabicName,\n          'الجنس': t.gender === 'male' ? 'ذكر' : 'أنثى',\n          'رقم الهاتف': t.phone,\n          'البريد الإلكتروني': t.email || '',\n          'المؤهل': t.qualification || '',\n          'التخصص': t.specialization || '',\n          'الراتب الشهري': t.monthlySalary,\n          'الحالة': t.status === 'active' ? 'نشط' : 'غير نشط',\n          'تاريخ التعيين': t.hireDate,\n        }));\n        const teachersSheet = XLSX.utils.json_to_sheet(teachersData);\n        XLSX.utils.book_append_sheet(workbook, teachersSheet, 'المعلمين');\n      }\n\n      // ورقة الصفوف\n      if (classes.length > 0) {\n        const classesData = classes.map(c => ({\n          'الرقم التعريفي': c.id,\n          'اسم الصف': c.name,\n          'الصف': c.grade,\n          'الشعبة': c.section,\n          'السعة': c.capacity,\n          'غرفة الدراسة': c.roomNumber || '',\n        }));\n        const classesSheet = XLSX.utils.json_to_sheet(classesData);\n        XLSX.utils.book_append_sheet(workbook, classesSheet, 'الصفوف');\n      }\n\n      // ورقة الحسابات المالية للطلاب\n      if (accounts.length > 0) {\n        const accountsData = accounts.map(a => ({\n          'الرقم التعريفي': a.id,\n          'رقم الطالب': a.studentId,\n          'إجمالي المستحقات': a.totalAmountDue,\n          'المبلغ المدفوع': a.totalPaid,\n          'الرصيد الحالي': a.currentBalance,\n          'العام الدراسي': a.academicYear,\n        }));\n        const accountsSheet = XLSX.utils.json_to_sheet(accountsData);\n        XLSX.utils.book_append_sheet(workbook, accountsSheet, 'حسابات الطلاب');\n      }\n\n      // ورقة المعاملات المالية\n      if (transactions.length > 0) {\n        const transactionsData = transactions.map((t: any) => ({\n          'الرقم التعريفي': t.id,\n          'رقم الطالب': t.studentId,\n          'المبلغ': t.amount,\n          'تاريخ الدفع': t.paymentDate,\n          'طريقة الدفع': t.paymentMethod,\n          'رقم الإيصال': t.receiptNumber || '',\n          'ملاحظات': t.notes || '',\n        }));\n        const transactionsSheet = XLSX.utils.json_to_sheet(transactionsData);\n        XLSX.utils.book_append_sheet(workbook, transactionsSheet, 'المعاملات المالية');\n      }\n\n      // ورقة رواتب المعلمين\n      if (salaries.length > 0) {\n        const salariesData = salaries.map(s => ({\n          'الرقم التعريفي': s.id,\n          'رقم المعلم': s.teacherId,\n          'الشهر': s.month,\n          'الراتب الأساسي': s.baseSalary,\n          'المكافآت': s.bonuses || 0,\n          'الخصومات': s.deductions || 0,\n          'السلف المخصومة': s.advancesDeducted || 0,\n          'صافي الراتب': s.netSalary,\n          'تاريخ الدفع': s.paymentDate || '',\n          'الحالة': s.status,\n        }));\n        const salariesSheet = XLSX.utils.json_to_sheet(salariesData);\n        XLSX.utils.book_append_sheet(workbook, salariesSheet, 'رواتب المعلمين');\n      }\n\n      // ورقة المصروفات\n      if (expenses.length > 0) {\n        const expensesData = expenses.map(e => ({\n          'الرقم التعريفي': e.id,\n          'الفئة': e.category,\n          'الوصف': e.description,\n          'المبلغ': e.amount,\n          'تاريخ المصروف': e.expenseDate,\n          'طريقة الدفع': e.paymentMethod,\n          'رقم الإيصال': e.receiptNumber || '',\n          'اسم المورد': e.vendorName || '',\n        }));\n        const expensesSheet = XLSX.utils.json_to_sheet(expensesData);\n        XLSX.utils.book_append_sheet(workbook, expensesSheet, 'المصروفات');\n      }\n\n      // ورقة الحضور\n      if (attendance.length > 0) {\n        const attendanceData = attendance.map(a => ({\n          'الرقم التعريفي': a.id,\n          'رقم الطالب': a.studentId,\n          'رقم الصف': a.classId,\n          'التاريخ': a.date,\n          'الحالة': a.status === 'present' ? 'حاضر' : a.status === 'absent' ? 'غائب' : a.status === 'late' ? 'متأخر' : 'معذور',\n          'ملاحظات': a.notes || '',\n        }));\n        const attendanceSheet = XLSX.utils.json_to_sheet(attendanceData);\n        XLSX.utils.book_append_sheet(workbook, attendanceSheet, 'الحضور');\n      }\n\n      // ورقة الدرجات\n      if (grades.length > 0) {\n        const gradesData = grades.map(g => ({\n          'الرقم التعريفي': g.id,\n          'رقم الطالب': g.studentId,\n          'رقم المادة': g.subjectId,\n          'الدرجة': g.score,\n          'الدرجة الكلية': g.maxScore,\n          'النوع': g.assessmentType,\n          'التاريخ': g.date,\n        }));\n        const gradesSheet = XLSX.utils.json_to_sheet(gradesData);\n        XLSX.utils.book_append_sheet(workbook, gradesSheet, 'الدرجات');\n      }\n\n      // إنشاء الملف\n      const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n      \n      // تحديد اسم الملف بالتاريخ الحالي\n      const today = new Date().toISOString().split('T')[0];\n      const filename = `school_data_export_${today}.xlsx`;\n\n      // إرسال الملف\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.send(buffer);\n    } catch (error) {\n      console.error(\"Excel export error:\", error);\n      res.status(500).json({ error: \"Failed to export data to Excel\" });\n    }\n  });\n\n  // ==================== PARENT ROUTES - تقارير أبناء ولي الأمر ====================\n  // Get children's reports for logged in parent\n  app.get(\"/api/my-children-reports\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const userRole = req.user!.role;\n      \n      // إذا كان المستخدم admin، يمكنه رؤية كل شيء\n      if (userRole === 'admin') {\n        const students = await storage.getAllStudents();\n        const reports = [];\n        \n        for (const student of students) {\n          const grades = await storage.getStudentGrades(student.id);\n          const attendance = await storage.getStudentAttendance(student.id);\n          reports.push({\n            student,\n            grades,\n            attendance\n          });\n        }\n        \n        return res.json(reports);\n      }\n      \n      // إذا كان المستخدم parent، جلب أبنائه فقط\n      if (userRole === 'parent') {\n        const parentStudents = await storage.getParentStudentsByUserId(userId);\n        const reports = [];\n        \n        for (const ps of parentStudents) {\n          const student = await storage.getStudent(ps.studentId);\n          if (student) {\n            const grades = await storage.getStudentGrades(student.id);\n            const attendance = await storage.getStudentAttendance(student.id);\n            const account = await storage.getStudentAccount(student.id);\n            const transactions = await storage.getStudentTransactions(student.id);\n            reports.push({\n              student,\n              grades,\n              attendance,\n              account,\n              transactions,\n              relationship: ps.relationship\n            });\n          }\n        }\n        \n        return res.json(reports);\n      }\n      \n      // إذا كان معلم، لا يمكنه الوصول\n      return res.status(403).json({ error: \"غير مصرح لك برؤية هذه التقارير\" });\n    } catch (error) {\n      console.error(\"Error fetching children reports:\", error);\n      res.status(500).json({ error: \"Failed to fetch children reports\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":79335},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/StudentsSection.tsx":{"content":"import { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { Student, Class, SchoolSettings, StudentAccount, EducationLevel } from '@shared/schema';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useSchoolSettings } from '@/contexts/SchoolSettingsContext';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Check, ChevronsUpDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { SiWhatsapp } from 'react-icons/si';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\n\nconst convertArabicToEnglishNumbers = (str: string): string => {\n  const arabicNumbers = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];\n  const englishNumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  \n  return str.split('').map(char => {\n    const index = arabicNumbers.indexOf(char);\n    return index !== -1 ? englishNumbers[index] : char;\n  }).join('');\n};\n\nconst countryCodes = [\n  { code: '+93', country: 'أفغانستان', name: 'Afghanistan' },\n  { code: '+355', country: 'ألبانيا', name: 'Albania' },\n  { code: '+213', country: 'الجزائر', name: 'Algeria' },\n  { code: '+1-684', country: 'ساموا الأمريكية', name: 'American Samoa' },\n  { code: '+376', country: 'أندورا', name: 'Andorra' },\n  { code: '+244', country: 'أنغولا', name: 'Angola' },\n  { code: '+54', country: 'الأرجنتين', name: 'Argentina' },\n  { code: '+374', country: 'أرمينيا', name: 'Armenia' },\n  { code: '+61', country: 'أستراليا', name: 'Australia' },\n  { code: '+43', country: 'النمسا', name: 'Austria' },\n  { code: '+994', country: 'أذربيجان', name: 'Azerbaijan' },\n  { code: '+973', country: 'البحرين', name: 'Bahrain' },\n  { code: '+880', country: 'بنغلاديش', name: 'Bangladesh' },\n  { code: '+375', country: 'بيلاروسيا', name: 'Belarus' },\n  { code: '+32', country: 'بلجيكا', name: 'Belgium' },\n  { code: '+501', country: 'بليز', name: 'Belize' },\n  { code: '+229', country: 'بنين', name: 'Benin' },\n  { code: '+975', country: 'بوتان', name: 'Bhutan' },\n  { code: '+591', country: 'بوليفيا', name: 'Bolivia' },\n  { code: '+387', country: 'البوسنة والهرسك', name: 'Bosnia' },\n  { code: '+55', country: 'البرازيل', name: 'Brazil' },\n  { code: '+673', country: 'بروناي', name: 'Brunei' },\n  { code: '+359', country: 'بلغاريا', name: 'Bulgaria' },\n  { code: '+855', country: 'كمبوديا', name: 'Cambodia' },\n  { code: '+237', country: 'الكاميرون', name: 'Cameroon' },\n  { code: '+1', country: 'كندا', name: 'Canada' },\n  { code: '+56', country: 'تشيلي', name: 'Chile' },\n  { code: '+86', country: 'الصين', name: 'China' },\n  { code: '+57', country: 'كولومبيا', name: 'Colombia' },\n  { code: '+506', country: 'كوستاريكا', name: 'Costa Rica' },\n  { code: '+385', country: 'كرواتيا', name: 'Croatia' },\n  { code: '+53', country: 'كوبا', name: 'Cuba' },\n  { code: '+357', country: 'قبرص', name: 'Cyprus' },\n  { code: '+420', country: 'التشيك', name: 'Czech Republic' },\n  { code: '+45', country: 'الدنمارك', name: 'Denmark' },\n  { code: '+593', country: 'الإكوادور', name: 'Ecuador' },\n  { code: '+20', country: 'مصر', name: 'Egypt' },\n  { code: '+503', country: 'السلفادور', name: 'El Salvador' },\n  { code: '+372', country: 'إستونيا', name: 'Estonia' },\n  { code: '+251', country: 'إثيوبيا', name: 'Ethiopia' },\n  { code: '+358', country: 'فنلندا', name: 'Finland' },\n  { code: '+33', country: 'فرنسا', name: 'France' },\n  { code: '+995', country: 'جورجيا', name: 'Georgia' },\n  { code: '+49', country: 'ألمانيا', name: 'Germany' },\n  { code: '+233', country: 'غانا', name: 'Ghana' },\n  { code: '+30', country: 'اليونان', name: 'Greece' },\n  { code: '+502', country: 'غواتيمالا', name: 'Guatemala' },\n  { code: '+509', country: 'هايتي', name: 'Haiti' },\n  { code: '+504', country: 'هندوراس', name: 'Honduras' },\n  { code: '+852', country: 'هونغ كونغ', name: 'Hong Kong' },\n  { code: '+36', country: 'المجر', name: 'Hungary' },\n  { code: '+354', country: 'آيسلندا', name: 'Iceland' },\n  { code: '+91', country: 'الهند', name: 'India' },\n  { code: '+62', country: 'إندونيسيا', name: 'Indonesia' },\n  { code: '+98', country: 'إيران', name: 'Iran' },\n  { code: '+964', country: 'العراق', name: 'Iraq' },\n  { code: '+353', country: 'أيرلندا', name: 'Ireland' },\n  { code: '+972', country: 'إسرائيل', name: 'Israel' },\n  { code: '+39', country: 'إيطاليا', name: 'Italy' },\n  { code: '+81', country: 'اليابان', name: 'Japan' },\n  { code: '+962', country: 'الأردن', name: 'Jordan' },\n  { code: '+7', country: 'كازاخستان', name: 'Kazakhstan' },\n  { code: '+254', country: 'كينيا', name: 'Kenya' },\n  { code: '+965', country: 'الكويت', name: 'Kuwait' },\n  { code: '+996', country: 'قرغيزستان', name: 'Kyrgyzstan' },\n  { code: '+856', country: 'لاوس', name: 'Laos' },\n  { code: '+371', country: 'لاتفيا', name: 'Latvia' },\n  { code: '+961', country: 'لبنان', name: 'Lebanon' },\n  { code: '+218', country: 'ليبيا', name: 'Libya' },\n  { code: '+370', country: 'ليتوانيا', name: 'Lithuania' },\n  { code: '+352', country: 'لوكسمبورغ', name: 'Luxembourg' },\n  { code: '+60', country: 'ماليزيا', name: 'Malaysia' },\n  { code: '+960', country: 'المالديف', name: 'Maldives' },\n  { code: '+356', country: 'مالطا', name: 'Malta' },\n  { code: '+52', country: 'المكسيك', name: 'Mexico' },\n  { code: '+373', country: 'مولدوفا', name: 'Moldova' },\n  { code: '+377', country: 'موناكو', name: 'Monaco' },\n  { code: '+976', country: 'منغوليا', name: 'Mongolia' },\n  { code: '+382', country: 'الجبل الأسود', name: 'Montenegro' },\n  { code: '+212', country: 'المغرب', name: 'Morocco' },\n  { code: '+95', country: 'ميانمار', name: 'Myanmar' },\n  { code: '+977', country: 'نيبال', name: 'Nepal' },\n  { code: '+31', country: 'هولندا', name: 'Netherlands' },\n  { code: '+64', country: 'نيوزيلندا', name: 'New Zealand' },\n  { code: '+505', country: 'نيكاراغوا', name: 'Nicaragua' },\n  { code: '+234', country: 'نيجيريا', name: 'Nigeria' },\n  { code: '+850', country: 'كوريا الشمالية', name: 'North Korea' },\n  { code: '+47', country: 'النرويج', name: 'Norway' },\n  { code: '+968', country: 'عمان', name: 'Oman' },\n  { code: '+92', country: 'باكستان', name: 'Pakistan' },\n  { code: '+970', country: 'فلسطين', name: 'Palestine' },\n  { code: '+507', country: 'بنما', name: 'Panama' },\n  { code: '+595', country: 'باراغواي', name: 'Paraguay' },\n  { code: '+51', country: 'بيرو', name: 'Peru' },\n  { code: '+63', country: 'الفلبين', name: 'Philippines' },\n  { code: '+48', country: 'بولندا', name: 'Poland' },\n  { code: '+351', country: 'البرتغال', name: 'Portugal' },\n  { code: '+974', country: 'قطر', name: 'Qatar' },\n  { code: '+40', country: 'رومانيا', name: 'Romania' },\n  { code: '+7', country: 'روسيا', name: 'Russia' },\n  { code: '+966', country: 'السعودية', name: 'Saudi Arabia' },\n  { code: '+381', country: 'صربيا', name: 'Serbia' },\n  { code: '+65', country: 'سنغافورة', name: 'Singapore' },\n  { code: '+421', country: 'سلوفاكيا', name: 'Slovakia' },\n  { code: '+386', country: 'سلوفينيا', name: 'Slovenia' },\n  { code: '+27', country: 'جنوب أفريقيا', name: 'South Africa' },\n  { code: '+82', country: 'كوريا الجنوبية', name: 'South Korea' },\n  { code: '+34', country: 'إسبانيا', name: 'Spain' },\n  { code: '+94', country: 'سريلانكا', name: 'Sri Lanka' },\n  { code: '+249', country: 'السودان', name: 'Sudan' },\n  { code: '+46', country: 'السويد', name: 'Sweden' },\n  { code: '+41', country: 'سويسرا', name: 'Switzerland' },\n  { code: '+963', country: 'سوريا', name: 'Syria' },\n  { code: '+886', country: 'تايوان', name: 'Taiwan' },\n  { code: '+992', country: 'طاجيكستان', name: 'Tajikistan' },\n  { code: '+255', country: 'تنزانيا', name: 'Tanzania' },\n  { code: '+66', country: 'تايلاند', name: 'Thailand' },\n  { code: '+216', country: 'تونس', name: 'Tunisia' },\n  { code: '+90', country: 'تركيا', name: 'Turkey' },\n  { code: '+993', country: 'تركمانستان', name: 'Turkmenistan' },\n  { code: '+256', country: 'أوغندا', name: 'Uganda' },\n  { code: '+380', country: 'أوكرانيا', name: 'Ukraine' },\n  { code: '+971', country: 'الإمارات', name: 'UAE' },\n  { code: '+44', country: 'بريطانيا', name: 'United Kingdom' },\n  { code: '+1', country: 'أمريكا', name: 'United States' },\n  { code: '+598', country: 'أوروغواي', name: 'Uruguay' },\n  { code: '+998', country: 'أوزبكستان', name: 'Uzbekistan' },\n  { code: '+58', country: 'فنزويلا', name: 'Venezuela' },\n  { code: '+84', country: 'فيتنام', name: 'Vietnam' },\n  { code: '+967', country: 'اليمن', name: 'Yemen' },\n  { code: '+260', country: 'زامبيا', name: 'Zambia' },\n  { code: '+263', country: 'زيمبابوي', name: 'Zimbabwe' },\n];\n\nexport default function StudentsSection() {\n  const { currencySymbol } = useSchoolSettings();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingStudent, setEditingStudent] = useState<Student | null>(null);\n  const [newStudent, setNewStudent] = useState({\n    arabicName: '',\n    dateOfBirth: '',\n    gender: 'male' as 'male' | 'female',\n    enrollmentDate: new Date().toISOString().split('T')[0],\n    parentName: '',\n    parentPhone: '',\n    parentEmail: '',\n    address: '',\n    status: 'active' as const,\n  });\n\n  const [initialAmountDue, setInitialAmountDue] = useState('');\n  const [editAmountDue, setEditAmountDue] = useState('');\n  const [studentAccount, setStudentAccount] = useState<StudentAccount | null>(null);\n  const [phoneCountryCode, setPhoneCountryCode] = useState('+961');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [editPhoneCountryCode, setEditPhoneCountryCode] = useState('+961');\n  const [editPhoneNumber, setEditPhoneNumber] = useState('');\n  const [openCountryCode, setOpenCountryCode] = useState(false);\n  const [openEditCountryCode, setOpenEditCountryCode] = useState(false);\n  \n  const [selectedEducationLevelId, setSelectedEducationLevelId] = useState('');\n  const [selectedClassId, setSelectedClassId] = useState('');\n  const [editSelectedEducationLevelId, setEditSelectedEducationLevelId] = useState('');\n  const [editSelectedClassId, setEditSelectedClassId] = useState('');\n  \n  const [filterEducationLevelId, setFilterEducationLevelId] = useState('');\n  const [filterClassId, setFilterClassId] = useState('');\n  \n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [studentToDelete, setStudentToDelete] = useState<Student | null>(null);\n\n  const { data: students = [], isLoading } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n  });\n\n  const { data: classes = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes'],\n  });\n  \n  const { data: educationLevels = [] } = useQuery<EducationLevel[]>({\n    queryKey: ['/api/education-levels'],\n  });\n\n  const { data: schoolSettings } = useQuery<SchoolSettings>({\n    queryKey: ['/api/school-settings'],\n  });\n\n  const { data: studentAccounts = [] } = useQuery<StudentAccount[]>({\n    queryKey: ['/api/accounting/accounts'],\n  });\n  \n  const availableClasses = selectedEducationLevelId \n    ? classes.filter(c => c.educationLevelId === selectedEducationLevelId)\n    : [];\n    \n  const editAvailableClasses = editSelectedEducationLevelId \n    ? classes.filter(c => c.educationLevelId === editSelectedEducationLevelId)\n    : [];\n    \n  const filterAvailableClasses = filterEducationLevelId \n    ? classes.filter(c => c.educationLevelId === filterEducationLevelId)\n    : [];\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof newStudent & { classId?: string }) => {\n      const response = await apiRequest('POST', '/api/students', data);\n      const student = await response.json();\n      \n      // إنشاء حساب مالي لكل طالب جديد (حتى لو المبلغ = 0)\n      if (schoolSettings) {\n        const amountValue = initialAmountDue.trim();\n        const numericAmount = amountValue ? parseFloat(amountValue) : 0;\n        \n        if (!isNaN(numericAmount) && numericAmount >= 0) {\n          const amountDue = numericAmount.toFixed(2);\n          \n          await apiRequest('POST', '/api/accounting/accounts', {\n            studentId: student.id,\n            totalAmountDue: amountDue,\n            totalPaid: '0.00',\n            currentBalance: amountDue,\n            academicYear: schoolSettings.currentAcademicYear,\n          });\n        }\n      }\n      \n      return student;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/accounts'] });\n      setIsAddDialogOpen(false);\n      setNewStudent({\n        arabicName: '',\n        dateOfBirth: '',\n        gender: 'male',\n        enrollmentDate: new Date().toISOString().split('T')[0],\n        parentName: '',\n        parentPhone: '',\n        parentEmail: '',\n        address: '',\n        status: 'active',\n      });\n      setInitialAmountDue('');\n      setPhoneCountryCode('+961');\n      setPhoneNumber('');\n      setSelectedEducationLevelId('');\n      setSelectedClassId('');\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Student> }) => {\n      await apiRequest('PATCH', `/api/students/${id}`, data);\n      \n      // تحديث المبلغ المالي إذا تم تغييره\n      if (editAmountDue !== '' && editAmountDue !== null && editAmountDue !== undefined && studentAccount && schoolSettings) {\n        const numericAmount = parseFloat(editAmountDue);\n        if (!isNaN(numericAmount) && numericAmount >= 0) {\n          const newTotalDue = numericAmount.toFixed(2);\n          const currentPaid = Number(studentAccount.totalPaid);\n          const newBalance = (numericAmount - currentPaid).toFixed(2);\n          \n          await apiRequest('PATCH', `/api/accounting/accounts/${studentAccount.id}`, {\n            totalAmountDue: newTotalDue,\n            currentBalance: newBalance,\n          });\n        }\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/accounts'] });\n      setIsEditDialogOpen(false);\n      setEditingStudent(null);\n      setEditAmountDue('');\n      setStudentAccount(null);\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/students/${id}`);\n    },\n    onSuccess: () => {\n      // تحديث جميع البيانات المرتبطة بالطالب المحذوف\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/grades'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/payments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/accounts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      setDeleteConfirmOpen(false);\n      setStudentToDelete(null);\n      toast({\n        title: 'تم الحذف بنجاح',\n        description: 'تم حذف الطالب من النظام',\n      });\n    },\n    onError: () => {\n      setDeleteConfirmOpen(false);\n      setStudentToDelete(null);\n      toast({\n        title: 'فشل الحذف',\n        description: 'حدث خطأ أثناء حذف الطالب. يرجى المحاولة مرة أخرى',\n        variant: 'destructive',\n      });\n    },\n  });\n  \n  const handleDeleteClick = (student: Student) => {\n    setStudentToDelete(student);\n    setDeleteConfirmOpen(true);\n  };\n  \n  const handleConfirmDelete = () => {\n    if (studentToDelete) {\n      deleteMutation.mutate(studentToDelete.id);\n    }\n  };\n\n  const filteredStudents = students.filter(student => {\n    const matchesName = student.arabicName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesClass = filterClassId ? student.classId === filterClassId : true;\n    const matchesLevel = filterEducationLevelId && !filterClassId \n      ? classes.find(c => c.id === student.classId)?.educationLevelId === filterEducationLevelId\n      : true;\n    \n    return matchesName && matchesClass && matchesLevel;\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const fullPhone = phoneCountryCode + phoneNumber;\n    createMutation.mutate({ \n      ...newStudent, \n      parentPhone: fullPhone,\n      classId: selectedClassId || undefined\n    });\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingStudent) {\n      const fullPhone = editPhoneCountryCode + editPhoneNumber;\n      updateMutation.mutate({ \n        id: editingStudent.id, \n        data: { \n          ...editingStudent, \n          parentPhone: fullPhone,\n          classId: editSelectedClassId || undefined\n        } \n      });\n    }\n  };\n\n  const createPaymentReminderMessage = (studentName: string, balance: number) => {\n    const formattedBalance = Number(balance).toLocaleString();\n    \n    const message = `السلام عليكم ورحمة الله وبركاته\n\nكيف الحال؟ نأمل أن تكونوا بخير\n\nنود تذكيركم بالقسط المتبقي على الطالب/ة ${studentName}\n\nالمبلغ المتبقي: ${formattedBalance} ${currencySymbol}\n\nنرجو منكم التكرم بتسديد الدفعة الشهرية في أقرب وقت ممكن، حيث أن ذلك يساعدنا على الاستمرار في تقديم أفضل خدمة تعليمية لأبنائكم\n\nنشكر لكم تعاونكم الدائم ونقدر ثقتكم بنا`;\n\n    return encodeURIComponent(message);\n  };\n\n  const openEditDialog = async (student: Student) => {\n    setEditingStudent(student);\n    setIsEditDialogOpen(true);\n    \n    // تقسيم رقم الهاتف إلى رمز الدولة والرقم\n    const phone = student.parentPhone || '';\n    const countryCodeMatch = phone.match(/^\\+\\d{1,4}/);\n    if (countryCodeMatch) {\n      setEditPhoneCountryCode(countryCodeMatch[0]);\n      setEditPhoneNumber(phone.substring(countryCodeMatch[0].length));\n    } else {\n      setEditPhoneCountryCode('+961');\n      setEditPhoneNumber(phone);\n    }\n    \n    // تعيين المرحلة والصف الحالي\n    if (student.classId) {\n      const studentClass = classes.find(c => c.id === student.classId);\n      if (studentClass) {\n        setEditSelectedEducationLevelId(studentClass.educationLevelId || '');\n        setEditSelectedClassId(student.classId);\n      }\n    } else {\n      setEditSelectedEducationLevelId('');\n      setEditSelectedClassId('');\n    }\n    \n    // جلب الحساب المالي للطالب\n    try {\n      const response = await fetch(`/api/accounting/accounts/${student.id}`);\n      if (response.ok) {\n        const account = await response.json();\n        setStudentAccount(account);\n        setEditAmountDue(account.totalAmountDue);\n      } else {\n        setStudentAccount(null);\n        setEditAmountDue('');\n      }\n    } catch (error) {\n      setStudentAccount(null);\n      setEditAmountDue('');\n    }\n  };\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">إدارة الطلاب</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">إدارة شاملة لجميع الطلاب المسجلين في المدرسة</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">إجمالي الطلاب</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{students.length}</p>\n            </div>\n            <div className=\"text-4xl\">👥</div>\n          </div>\n        </div>\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">طلاب نشطين</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{students.filter(s => s.status === 'active').length}</p>\n            </div>\n            <div className=\"text-4xl\">✅</div>\n          </div>\n        </div>\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">طلاب معلقين</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{students.filter(s => s.status === 'suspended').length}</p>\n            </div>\n            <div className=\"text-4xl\">⚠️</div>\n          </div>\n        </div>\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">صفوف دراسية</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{classes.length}</p>\n            </div>\n            <div className=\"text-4xl\">🏛️</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"glass-card rounded-2xl p-6 mb-8\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <Input\n            placeholder=\"ابحث عن طالب...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-md text-white placeholder:text-white/60\"\n            data-testid=\"input-student-search\"\n          />\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-student\">➕ إضافة طالب جديد</Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto glass-card backdrop-blur-xl bg-white/80\">\n              <DialogHeader>\n                <DialogTitle>إضافة طالب جديد</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"col-span-2\">\n                    <Label className=\"font-bold\">الاسم بالعربية</Label>\n                    <Input\n                      value={newStudent.arabicName}\n                      onChange={(e) => setNewStudent({ ...newStudent, arabicName: e.target.value })}\n                      required\n                      data-testid=\"input-arabicname\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"font-bold\">تاريخ الميلاد</Label>\n                    <Input\n                      type=\"date\"\n                      value={newStudent.dateOfBirth}\n                      onChange={(e) => setNewStudent({ ...newStudent, dateOfBirth: e.target.value })}\n                      min={new Date(new Date().setFullYear(new Date().getFullYear() - 60)).toISOString().split('T')[0]}\n                      max={new Date(new Date().setFullYear(new Date().getFullYear() - 3)).toISOString().split('T')[0]}\n                      required\n                      data-testid=\"input-dob\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"font-bold\">الجنس</Label>\n                    <Select\n                      value={newStudent.gender}\n                      onValueChange={(value: 'male' | 'female') => setNewStudent({ ...newStudent, gender: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-gender\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">ذكر</SelectItem>\n                        <SelectItem value=\"female\">أنثى</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"font-bold\">المرحلة الدراسية</Label>\n                    <Select\n                      value={selectedEducationLevelId}\n                      onValueChange={(value) => {\n                        setSelectedEducationLevelId(value);\n                        setSelectedClassId('');\n                      }}\n                    >\n                      <SelectTrigger data-testid=\"select-education-level\">\n                        <SelectValue placeholder=\"اختر المرحلة\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {educationLevels.map((level) => (\n                          <SelectItem key={level.id} value={level.id}>\n                            {level.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <Label className=\"font-bold\">الصف والشعبة</Label>\n                    <Select\n                      value={selectedClassId}\n                      onValueChange={setSelectedClassId}\n                      disabled={!selectedEducationLevelId}\n                    >\n                      <SelectTrigger data-testid=\"select-class\">\n                        <SelectValue placeholder={selectedEducationLevelId ? \"اختر الصف والشعبة\" : \"اختر المرحلة أولاً\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {availableClasses.map((cls) => (\n                          <SelectItem key={cls.id} value={cls.id}>\n                            {cls.grade} - شعبة {cls.section}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"font-bold\">اسم ولي الأمر</Label>\n                    <Input\n                      value={newStudent.parentName}\n                      onChange={(e) => setNewStudent({ ...newStudent, parentName: e.target.value })}\n                      required\n                      data-testid=\"input-parent-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"font-bold\">هاتف ولي الأمر</Label>\n                    <div className=\"flex gap-2\">\n                      <Popover open={openCountryCode} onOpenChange={setOpenCountryCode}>\n                        <PopoverTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            role=\"combobox\"\n                            aria-expanded={openCountryCode}\n                            className=\"w-[140px] justify-between\"\n                            data-testid=\"select-country-code\"\n                          >\n                            {phoneCountryCode || \"اختر...\"}\n                            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                          </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-[200px] p-0\">\n                          <Command>\n                            <CommandInput placeholder=\"ابحث عن دولة...\" />\n                            <CommandList>\n                              <CommandEmpty>لا توجد نتائج</CommandEmpty>\n                              <CommandGroup>\n                                {countryCodes.map((country) => (\n                                  <CommandItem\n                                    key={country.code + country.country}\n                                    value={`${country.code} ${country.country} ${country.name}`}\n                                    onSelect={() => {\n                                      setPhoneCountryCode(country.code);\n                                      setOpenCountryCode(false);\n                                    }}\n                                  >\n                                    <Check\n                                      className={cn(\n                                        \"mr-2 h-4 w-4\",\n                                        phoneCountryCode === country.code ? \"opacity-100\" : \"opacity-0\"\n                                      )}\n                                    />\n                                    {country.code} {country.country}\n                                  </CommandItem>\n                                ))}\n                              </CommandGroup>\n                            </CommandList>\n                          </Command>\n                        </PopoverContent>\n                      </Popover>\n                      <Input\n                        value={phoneNumber}\n                        onChange={(e) => setPhoneNumber(e.target.value)}\n                        placeholder=\"12345678\"\n                        required\n                        className=\"flex-1\"\n                        data-testid=\"input-parent-phone\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"font-bold\">البريد الإلكتروني</Label>\n                    <Input\n                      type=\"email\"\n                      value={newStudent.parentEmail}\n                      onChange={(e) => setNewStudent({ ...newStudent, parentEmail: e.target.value })}\n                      data-testid=\"input-parent-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"font-bold\">تاريخ التسجيل</Label>\n                    <Input\n                      type=\"date\"\n                      value={newStudent.enrollmentDate}\n                      onChange={(e) => setNewStudent({ ...newStudent, enrollmentDate: e.target.value })}\n                      required\n                      data-testid=\"input-enrollment-date\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"font-bold\">العنوان</Label>\n                  <Input\n                    value={newStudent.address}\n                    onChange={(e) => setNewStudent({ ...newStudent, address: e.target.value })}\n                    data-testid=\"input-address\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"font-bold\">المبلغ المستحق ({currencySymbol})</Label>\n                  <Input\n                    type=\"text\"\n                    inputMode=\"decimal\"\n                    value={initialAmountDue}\n                    onChange={(e) => setInitialAmountDue(convertArabicToEnglishNumbers(e.target.value))}\n                    placeholder=\"5000\"\n                    data-testid=\"input-initial-amount\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">المبلغ الإجمالي المستحق على الطالب للسنة الدراسية (مثال: 5000)</p>\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={createMutation.isPending} data-testid=\"button-submit-student\">\n                  {createMutation.isPending ? 'جاري الإضافة...' : 'إضافة الطالب'}\n                </Button>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div>\n            <Label className=\"text-gray-700 dark:text-white mb-2 block\">المرحلة الدراسية</Label>\n            <Select\n              value={filterEducationLevelId || 'all'}\n              onValueChange={(value) => {\n                setFilterEducationLevelId(value === 'all' ? '' : value);\n                setFilterClassId('');\n              }}\n            >\n              <SelectTrigger data-testid=\"filter-education-level\" className=\"bg-white\">\n                <SelectValue placeholder=\"جميع المراحل\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">جميع المراحل</SelectItem>\n                {educationLevels.map((level) => (\n                  <SelectItem key={level.id} value={level.id}>\n                    {level.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label className=\"text-gray-700 dark:text-white mb-2 block\">الصف والشعبة</Label>\n            <Select\n              value={filterClassId || 'all'}\n              onValueChange={(value) => setFilterClassId(value === 'all' ? '' : value)}\n              disabled={!filterEducationLevelId}\n            >\n              <SelectTrigger data-testid=\"filter-class\" className=\"bg-white\">\n                <SelectValue placeholder={filterEducationLevelId ? \"جميع الصفوف\" : \"اختر المرحلة أولاً\"} />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">جميع الصفوف</SelectItem>\n                {filterAvailableClasses.map((cls) => (\n                  <SelectItem key={cls.id} value={cls.id}>\n                    {cls.grade} - شعبة {cls.section}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"flex items-end\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setFilterEducationLevelId('');\n                setFilterClassId('');\n              }}\n              className=\"w-full\"\n              data-testid=\"button-clear-filters\"\n            >\n              مسح الفلاتر\n            </Button>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-8 text-gray-600\">جاري التحميل...</div>\n        ) : filteredStudents.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-600\">لا يوجد طلاب</div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase\">الطالب</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase\">ولي الأمر</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase\">الهاتف</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase\">الحالة</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase\">الإجراءات</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredStudents.map((student) => (\n                  <tr key={student.id} className=\"hover:bg-purple-50 dark:hover:bg-purple-900/30 transition-colors\">\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold\">\n                          {student.arabicName?.charAt(0)}\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{student.arabicName}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4 text-sm text-gray-600\">{student.parentName}</td>\n                    <td className=\"px-4 py-4 text-sm text-gray-600\">{student.parentPhone}</td>\n                    <td className=\"px-4 py-4\">\n                      <span className={`text-xs px-2 py-1 rounded-full ${\n                        student.status === 'active' ? 'bg-green-100 text-green-800' :\n                        student.status === 'suspended' ? 'bg-red-100 text-red-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {student.status === 'active' ? 'نشط' : \n                         student.status === 'suspended' ? 'معلق' : student.status}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"icon\" \n                          variant=\"ghost\"\n                          className=\"text-green-600 hover:text-green-700\"\n                          onClick={() => {\n                            const phoneNumber = student.parentPhone.replace(/[^0-9]/g, '');\n                            window.open(`https://wa.me/${phoneNumber}`, '_blank');\n                          }}\n                          data-testid={`button-whatsapp-${student.id}`}\n                        >\n                          <SiWhatsapp className=\"h-5 w-5\" />\n                        </Button>\n                        {(() => {\n                          const account = studentAccounts.find(acc => acc.studentId === student.id);\n                          const hasBalance = account && Number(account.currentBalance) > 0;\n                          \n                          return hasBalance ? (\n                            <Button \n                              size=\"icon\" \n                              variant=\"ghost\"\n                              className=\"text-red-600 hover:text-red-700\"\n                              onClick={() => {\n                                const phoneNumber = student.parentPhone.replace(/[^0-9]/g, '');\n                                const message = createPaymentReminderMessage(\n                                  student.arabicName || '',\n                                  Number(account.currentBalance)\n                                );\n                                window.open(`https://wa.me/${phoneNumber}?text=${message}`, '_blank');\n                              }}\n                              data-testid={`button-whatsapp-reminder-${student.id}`}\n                              title=\"تذكير بالقسط المتبقي\"\n                            >\n                              <SiWhatsapp className=\"h-5 w-5\" />\n                            </Button>\n                          ) : null;\n                        })()}\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          onClick={() => openEditDialog(student)}\n                          data-testid={`button-edit-${student.id}`}\n                        >\n                          تعديل\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          onClick={() => handleDeleteClick(student)}\n                          data-testid={`button-delete-${student.id}`}\n                        >\n                          حذف\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto glass-card backdrop-blur-xl bg-white/80\">\n          <DialogHeader>\n            <DialogTitle>تعديل بيانات الطالب</DialogTitle>\n          </DialogHeader>\n          {editingStudent && (\n            <form onSubmit={handleEditSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"col-span-2\">\n                  <Label className=\"font-bold\">الاسم بالعربية</Label>\n                  <Input\n                    value={editingStudent.arabicName || ''}\n                    onChange={(e) => setEditingStudent({ ...editingStudent, arabicName: e.target.value })}\n                    required\n                    data-testid=\"input-edit-arabicname\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"font-bold\">المرحلة الدراسية</Label>\n                  <Select\n                    value={editSelectedEducationLevelId}\n                    onValueChange={(value) => {\n                      setEditSelectedEducationLevelId(value);\n                      setEditSelectedClassId('');\n                    }}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-education-level\">\n                      <SelectValue placeholder=\"اختر المرحلة\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {educationLevels.map((level) => (\n                        <SelectItem key={level.id} value={level.id}>\n                          {level.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"font-bold\">الصف والشعبة</Label>\n                  <Select\n                    value={editSelectedClassId}\n                    onValueChange={setEditSelectedClassId}\n                    disabled={!editSelectedEducationLevelId}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-class\">\n                      <SelectValue placeholder={editSelectedEducationLevelId ? \"اختر الصف والشعبة\" : \"اختر المرحلة أولاً\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {editAvailableClasses.map((cls) => (\n                        <SelectItem key={cls.id} value={cls.id}>\n                          {cls.grade} - شعبة {cls.section}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"font-bold\">اسم ولي الأمر</Label>\n                  <Input\n                    value={editingStudent.parentName || ''}\n                    onChange={(e) => setEditingStudent({ ...editingStudent, parentName: e.target.value })}\n                    required\n                    data-testid=\"input-edit-parent-name\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"font-bold\">هاتف ولي الأمر</Label>\n                  <div className=\"flex gap-2\">\n                    <Popover open={openEditCountryCode} onOpenChange={setOpenEditCountryCode}>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          role=\"combobox\"\n                          aria-expanded={openEditCountryCode}\n                          className=\"w-[140px] justify-between\"\n                          data-testid=\"select-edit-country-code\"\n                        >\n                          {editPhoneCountryCode || \"اختر...\"}\n                          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-[200px] p-0\">\n                        <Command>\n                          <CommandInput placeholder=\"ابحث عن دولة...\" />\n                          <CommandList>\n                            <CommandEmpty>لا توجد نتائج</CommandEmpty>\n                            <CommandGroup>\n                              {countryCodes.map((country) => (\n                                <CommandItem\n                                  key={country.code + country.country}\n                                  value={`${country.code} ${country.country} ${country.name}`}\n                                  onSelect={() => {\n                                    setEditPhoneCountryCode(country.code);\n                                    setOpenEditCountryCode(false);\n                                  }}\n                                >\n                                  <Check\n                                    className={cn(\n                                      \"mr-2 h-4 w-4\",\n                                      editPhoneCountryCode === country.code ? \"opacity-100\" : \"opacity-0\"\n                                    )}\n                                  />\n                                  {country.code} {country.country}\n                                </CommandItem>\n                              ))}\n                            </CommandGroup>\n                          </CommandList>\n                        </Command>\n                      </PopoverContent>\n                    </Popover>\n                    <Input\n                      value={editPhoneNumber}\n                      onChange={(e) => setEditPhoneNumber(e.target.value)}\n                      placeholder=\"12345678\"\n                      required\n                      className=\"flex-1\"\n                      data-testid=\"input-edit-parent-phone\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"font-bold\">البريد الإلكتروني</Label>\n                  <Input\n                    type=\"email\"\n                    value={editingStudent.parentEmail || ''}\n                    onChange={(e) => setEditingStudent({ ...editingStudent, parentEmail: e.target.value })}\n                    data-testid=\"input-edit-parent-email\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"font-bold\">الحالة</Label>\n                  <Select\n                    value={editingStudent.status || 'active'}\n                    onValueChange={(value) => setEditingStudent({ ...editingStudent, status: value as any })}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">نشط</SelectItem>\n                      <SelectItem value=\"suspended\">معلق</SelectItem>\n                      <SelectItem value=\"graduated\">متخرج</SelectItem>\n                      <SelectItem value=\"transferred\">منقول</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div>\n                <Label className=\"font-bold\">العنوان</Label>\n                <Input\n                  value={editingStudent.address || ''}\n                  onChange={(e) => setEditingStudent({ ...editingStudent, address: e.target.value })}\n                  data-testid=\"input-edit-address\"\n                />\n              </div>\n              <div>\n                <Label className=\"font-bold\">المبلغ المستحق ({currencySymbol})</Label>\n                <Input\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  value={editAmountDue}\n                  onChange={(e) => setEditAmountDue(convertArabicToEnglishNumbers(e.target.value))}\n                  placeholder=\"5000\"\n                  data-testid=\"input-edit-amount-due\"\n                />\n                {studentAccount && (\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    المدفوع حالياً: {Number(studentAccount.totalPaid).toLocaleString()} {currencySymbol} | \n                    الرصيد المتبقي: {Number(studentAccount.currentBalance).toLocaleString()} {currencySymbol}\n                  </p>\n                )}\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={updateMutation.isPending} data-testid=\"button-submit-edit\">\n                {updateMutation.isPending ? 'جاري الحفظ...' : 'حفظ التعديلات'}\n              </Button>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>\n        <AlertDialogContent className=\"glass-card backdrop-blur-xl bg-white/80\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n            <AlertDialogDescription>\n              هل أنت متأكد من إتمام عملية حذف الطالب{' '}\n              <span className=\"font-bold text-gray-900 dark:text-white\">{studentToDelete?.arabicName}</span>؟\n              <br />\n              <span className=\"text-red-600 font-semibold\">\n                سيتم حذف جميع البيانات المرتبطة بالطالب بما في ذلك:\n              </span>\n              <br />\n              <span className=\"text-sm\">\n                • السجلات المالية والدفعات\n                <br />\n                • سجلات الحضور والغياب\n                <br />\n                • الدرجات والتقييمات\n              </span>\n              <br />\n              <span className=\"font-semibold\">لن تتمكن من التراجع عن هذا الإجراء.</span>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">إلغاء</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmDelete}\n              disabled={deleteMutation.isPending}\n              className=\"bg-red-500 hover:bg-red-600\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? 'جاري الحذف...' : 'نعم، احذف'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":52396},"client/src/components/examples/Sidebar.tsx":{"content":"import { useState } from 'react';\nimport Sidebar from '../Sidebar';\n\nexport default function SidebarExample() {\n  const [activeSection, setActiveSection] = useState('dashboard');\n\n  return (\n    <div className=\"gradient-primary-bg min-h-screen\">\n      <Sidebar activeSection={activeSection} onSectionChange={setActiveSection} />\n      <div className=\"mr-80 p-8\">\n        <h1 className=\"text-3xl font-bold text-white\">القسم النشط: {activeSection}</h1>\n      </div>\n    </div>\n  );\n}\n","size_bytes":492},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/Sidebar.tsx":{"content":"import { useSchoolSettings } from '@/contexts/SchoolSettingsContext';\nimport { useSidebar } from '@/contexts/SidebarContext';\nimport { useAuth } from '@/hooks/use-auth';\nimport { ChevronRight, ChevronLeft } from 'lucide-react';\n\ninterface MenuItem {\n  id: string;\n  label: string;\n  icon: string;\n  badge?: number;\n  badgeColor?: string;\n  allowedRoles?: ('admin' | 'teacher' | 'parent')[]; // إذا لم تُحدد، فهي متاحة للجميع\n}\n\ninterface SidebarProps {\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nconst menuItems: MenuItem[] = [\n  { id: 'dashboard', label: 'لوحة التحكم', icon: '📊', allowedRoles: ['admin'] },\n  { id: 'dashboard', label: 'الصفحة الرئيسية', icon: '🏠', allowedRoles: ['parent', 'teacher'] },\n  { id: 'students', label: 'إدارة الطلاب', icon: '👥', allowedRoles: ['admin'] },\n  { id: 'teachers', label: 'إدارة المعلمين', icon: '👨‍🏫', allowedRoles: ['admin'] },\n  { id: 'users', label: 'إدارة المستخدمين', icon: '🔐', allowedRoles: ['admin'] },\n  { id: 'subjects', label: 'المواد الدراسية', icon: '📚', allowedRoles: ['admin'] },\n  { id: 'classes', label: 'المراحل الدراسية والصفوف', icon: '🏛️', allowedRoles: ['admin'] },\n  { id: 'grades', label: 'إدخال العلامات', icon: '📝', allowedRoles: ['admin', 'teacher'] },\n  { id: 'student-reports', label: 'تقارير الطلاب', icon: '📄', allowedRoles: ['admin', 'parent'] },\n  { id: 'attendance', label: 'الحضور والغياب', icon: '📅', allowedRoles: ['admin'] },\n  { id: 'finance', label: 'المحاسبة والرسوم', icon: '💰', allowedRoles: ['admin'] },\n  { id: 'reports', label: 'التقارير والإحصائيات', icon: '📋', allowedRoles: ['admin'] },\n  { id: 'settings', label: 'إعدادات المدرسة', icon: '⚙️', allowedRoles: ['admin'] },\n];\n\nexport default function Sidebar({ activeSection, onSectionChange }: SidebarProps) {\n  const { settings } = useSchoolSettings();\n  const { isCollapsed, toggleSidebar } = useSidebar();\n  const { user } = useAuth();\n  \n  // Filter menu items based on user role\n  const filteredMenuItems = menuItems.filter(item => {\n    // إذا لم تُحدد allowedRoles، فهي متاحة للجميع\n    if (!item.allowedRoles) {\n      return true;\n    }\n    // إذا حُددت allowedRoles، تحقق من أن role المستخدم موجود في القائمة\n    return user?.role && item.allowedRoles.includes(user.role as any);\n  });\n  \n  return (\n    <div className={`h-screen fixed right-0 top-0 z-50 overflow-y-auto bg-sidebar border-l border-sidebar-border transition-all duration-300 ${\n      isCollapsed ? 'w-20' : 'w-80'\n    }`}>\n      {/* زر التصغير/التوسيع */}\n      <button\n        onClick={toggleSidebar}\n        className=\"absolute left-0 top-6 -translate-x-1/2 bg-sidebar-accent border border-sidebar-border rounded-full p-2 hover-elevate active-elevate-2 transition-all z-10\"\n        data-testid=\"button-toggle-sidebar\"\n        aria-label={isCollapsed ? 'توسيع القائمة' : 'تصغير القائمة'}\n      >\n        {isCollapsed ? (\n          <ChevronLeft className=\"w-4 h-4 text-sidebar-foreground\" />\n        ) : (\n          <ChevronRight className=\"w-4 h-4 text-sidebar-foreground\" />\n        )}\n      </button>\n\n      <div className=\"p-6\">\n        <div className=\"mb-8\">\n          {settings?.logoUrl && (\n            <div className=\"mb-4 flex justify-center\">\n              <div className=\"bg-sidebar-accent rounded-2xl p-4 shadow-lg border border-sidebar-border hover-elevate transition-all\">\n                <img \n                  src={settings.logoUrl} \n                  alt=\"School Logo\" \n                  className={`object-contain transition-all duration-300 ${\n                    isCollapsed ? 'h-10 w-10' : 'h-20 w-20'\n                  }`}\n                  data-testid=\"sidebar-logo\"\n                />\n              </div>\n            </div>\n          )}\n          {!isCollapsed && (\n            <div className=\"text-2xl font-bold text-gray-800 dark:text-white text-center\">\n              {settings?.schoolNameArabic || 'مدرسة النور الأهلية'}\n            </div>\n          )}\n        </div>\n\n        <nav className=\"space-y-2 mb-8 pb-6\">\n          {filteredMenuItems.map((item) => (\n            <div\n              key={item.id}\n              className={`p-3 text-sidebar-foreground cursor-pointer rounded-xl transition-all duration-300 hover-elevate hover:-translate-x-1 ${\n                activeSection === item.id ? 'bg-sidebar-accent border-r-4 border-primary' : ''\n              }`}\n              onClick={() => onSectionChange(item.id)}\n              data-testid={`nav-${item.id}`}\n              title={isCollapsed ? item.label : undefined}\n            >\n              {item.badge ? (\n                <div className={`flex items-center ${isCollapsed ? 'justify-center' : 'justify-between'}`}>\n                  <div className={`flex items-center ${isCollapsed ? '' : 'gap-3'}`}>\n                    <span className=\"text-xl\">{item.icon}</span>\n                    {!isCollapsed && <span>{item.label}</span>}\n                  </div>\n                  {!isCollapsed && (\n                    <span className={`${item.badgeColor} text-white text-xs px-2 py-1 rounded-full notification-pulse`}>\n                      {item.badge}\n                    </span>\n                  )}\n                </div>\n              ) : (\n                <div className={`flex items-center ${isCollapsed ? 'justify-center' : 'gap-3'}`}>\n                  <span className=\"text-xl\">{item.icon}</span>\n                  {!isCollapsed && <span>{item.label}</span>}\n                </div>\n              )}\n            </div>\n          ))}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5898},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('theme');\n      return (saved as Theme) || 'light';\n    }\n    return 'light';\n  });\n\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1196},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"build-for-cpanel.sh":{"content":"#!/bin/bash\n\n# =====================================\n# بناء المشروع لـ cPanel\n# =====================================\n\nset -e\n\necho \"🔨 بناء Frontend كـ Static Files...\"\nnpm run build\n\necho \"📦 إنشاء حزمة للرفع على cPanel...\"\n\n# إنشاء مجلد للـ static files\nrm -rf cpanel-frontend\nmkdir -p cpanel-frontend\n\n# نسخ الملفات الثابتة\ncp -r dist/public/* cpanel-frontend/\n\n# إنشاء ملف .htaccess للتوجيه\ncat > cpanel-frontend/.htaccess << 'EOF'\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\nEOF\n\n# إنشاء ملف تكوين للـ API endpoint\ncat > cpanel-frontend/config.js << EOF\n// تكوين API - عدّل هذا الرابط بعد نشر Backend على Railway\nwindow.API_URL = 'https://your-backend.up.railway.app';\nEOF\n\necho \"\"\necho \"✅ =================================\"\necho \"✅  تم البناء بنجاح!\"\necho \"✅ =================================\"\necho \"\"\necho \"📁 الملفات الجاهزة في: cpanel-frontend/\"\necho \"\"\necho \"📋 الخطوات التالية:\"\necho \"  1. ارفع محتويات مجلد 'cpanel-frontend' إلى public_html في cPanel\"\necho \"  2. انشر Backend على Railway (3 نقرات)\"\necho \"  3. عدّل ملف config.js بعنوان API الجديد\"\necho \"\"\n","size_bytes":1470},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"DEPLOYMENT_INSTRUCTIONS_AR.md":{"content":"# دليل النشر على HestiaCP\n\n## 📦 محتويات الحزمة\n\nهذا الملف المضغوط يحتوي على:\n- `dist/` - المشروع المبني للإنتاج\n- `package.json` - قائمة الحزم المطلوبة\n- `database_backup.sql` - نسخة احتياطية من قاعدة البيانات\n- `.env.production.example` - ملف مثال لمتغيرات البيئة\n- `shared/` - الملفات المشتركة المطلوبة\n\n## 🚀 خطوات النشر على HestiaCP\n\n### 1️⃣ إعداد قاعدة البيانات\n\n1. سجل دخول إلى HestiaCP\n2. اذهب إلى **Databases** → **PostgreSQL**\n3. أنشئ قاعدة بيانات جديدة:\n   - اسم القاعدة: `school_db` (أو أي اسم تريده)\n   - مستخدم: أنشئ مستخدم جديد\n   - كلمة المرور: احفظها\n\n4. **استيراد البيانات:**\n   - افتح phpPgAdmin أو استخدم SSH\n   - نفذ الأمر التالي لاستيراد البيانات:\n   ```bash\n   psql -U username -d database_name < database_backup.sql\n   ```\n\n### 2️⃣ رفع الملفات\n\n1. ارفع محتويات الملف المضغوط إلى مجلد التطبيق الخاص بك\n2. يمكنك استخدام FTP أو File Manager في HestiaCP\n\n### 3️⃣ تثبيت Node.js والحزم\n\n1. تأكد من تثبيت Node.js (الإصدار 18 أو أحدث)\n2. افتح SSH أو Terminal في HestiaCP\n3. انتقل إلى مجلد المشروع:\n   ```bash\n   cd /path/to/your/project\n   ```\n\n4. ثبت الحزم المطلوبة:\n   ```bash\n   npm install --production\n   ```\n\n### 4️⃣ إعداد ملف البيئة\n\n1. انسخ ملف `.env.production.example` إلى `.env`:\n   ```bash\n   cp .env.production.example .env\n   ```\n\n2. عدّل ملف `.env` بمعلوماتك:\n   ```bash\n   nano .env\n   ```\n\n3. ضع معلومات قاعدة البيانات الصحيحة:\n   ```\n   DATABASE_URL=postgresql://username:password@localhost:5432/database_name\n   ```\n\n### 5️⃣ تشغيل التطبيق\n\n#### الطريقة الأولى - استخدام PM2 (موصى بها):\n\n```bash\n# تثبيت PM2\nnpm install -g pm2\n\n# تشغيل التطبيق\npm2 start dist/index.js --name school-app\n\n# حفظ التطبيق ليعمل تلقائياً عند إعادة التشغيل\npm2 save\npm2 startup\n```\n\n#### الطريقة الثانية - استخدام npm:\n\n```bash\nnpm start\n```\n\n#### الطريقة الثالثة - استخدام systemd:\n\nأنشئ ملف خدمة systemd:\n\n```bash\nsudo nano /etc/systemd/system/school-app.service\n```\n\nأضف المحتوى التالي:\n\n```ini\n[Unit]\nDescription=School Management System\nAfter=network.target\n\n[Service]\nType=simple\nUser=your-username\nWorkingDirectory=/path/to/your/project\nEnvironment=NODE_ENV=production\nExecStart=/usr/bin/node dist/index.js\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\nثم:\n```bash\nsudo systemctl daemon-reload\nsudo systemctl start school-app\nsudo systemctl enable school-app\n```\n\n### 6️⃣ إعداد Reverse Proxy (NGINX)\n\nفي HestiaCP، أضف تكوين NGINX:\n\n```nginx\nlocation / {\n    proxy_pass http://localhost:5000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n### 7️⃣ التحقق من التشغيل\n\n1. تحقق من أن التطبيق يعمل:\n   ```bash\n   pm2 status\n   # أو\n   curl http://localhost:5000\n   ```\n\n2. افتح المتصفح واذهب إلى رابط موقعك\n\n## 🔧 استكشاف الأخطاء\n\n### المشكلة: لا يمكن الاتصال بقاعدة البيانات\n\n**الحل:**\n- تحقق من صحة `DATABASE_URL` في ملف `.env`\n- تأكد من أن PostgreSQL يعمل: `systemctl status postgresql`\n- تأكد من أن المستخدم لديه صلاحيات الوصول\n\n### المشكلة: خطأ في المنفذ (Port already in use)\n\n**الحل:**\n- غيّر المنفذ في ملف `.env` إلى منفذ آخر مثل 3000 أو 8080\n- أو أوقف التطبيق الذي يستخدم المنفذ 5000\n\n### المشكلة: الملفات الثابتة لا تظهر\n\n**الحل:**\n- تأكد من بناء المشروع: `npm run build`\n- تحقق من وجود مجلد `dist/public`\n\n## 📝 متطلبات السيرفر\n\n- Node.js 18 أو أحدث\n- PostgreSQL 14 أو أحدث\n- الذاكرة: على الأقل 1GB RAM\n- المساحة: على الأقل 500MB\n\n## 🔐 الأمان\n\n1. **غيّر SESSION_SECRET** في ملف `.env` إلى قيمة عشوائية آمنة\n2. **استخدم HTTPS** للاتصالات الآمنة\n3. **قم بتحديث الحزم** بانتظام: `npm update`\n4. **نسخ احتياطي** لقاعدة البيانات بشكل دوري\n\n## 📞 الدعم\n\nإذا واجهت أي مشاكل:\n1. راجع سجلات PM2: `pm2 logs school-app`\n2. راجع سجلات النظام: `journalctl -u school-app`\n3. تحقق من سجلات NGINX: `/var/log/nginx/error.log`\n\n---\n\n**ملاحظة:** هذا التطبيق مبني باستخدام React + Express + PostgreSQL\n","size_bytes":5318},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/dashboard.tsx":{"content":"import { useState } from 'react';\nimport { Moon, Sun } from 'lucide-react';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport { useSidebar } from '@/contexts/SidebarContext';\nimport { useAuth } from '@/hooks/use-auth';\nimport Sidebar from '@/components/Sidebar';\nimport DashboardSection from '@/components/DashboardSection';\nimport StudentsSection from '@/components/StudentsSection';\nimport TeachersSection from '@/components/TeachersSection';\nimport UsersSection from '@/components/UsersSection';\nimport SubjectsSection from '@/components/SubjectsSection';\nimport ClassesSection from '@/components/ClassesSection';\nimport NewGradesSection from '@/components/NewGradesSection';\nimport StudentReportSection from '@/components/StudentReportSection';\nimport AttendanceSection from '@/components/AttendanceSection';\nimport FinanceSection from '@/components/FinanceSection';\nimport ReportsSection from '@/components/ReportsSection';\nimport SettingsSection from '@/components/SettingsSection';\n\nexport default function Dashboard() {\n  const [activeSection, setActiveSection] = useState('dashboard');\n  const { theme, toggleTheme } = useTheme();\n  const { isCollapsed } = useSidebar();\n  const { logoutMutation } = useAuth();\n\n  const renderSection = () => {\n    switch (activeSection) {\n      case 'dashboard':\n        return <DashboardSection onNavigate={setActiveSection} />;\n      case 'students':\n        return <StudentsSection />;\n      case 'teachers':\n        return <TeachersSection />;\n      case 'users':\n        return <UsersSection />;\n      case 'subjects':\n        return <SubjectsSection />;\n      case 'classes':\n        return <ClassesSection />;\n      case 'grades':\n        return <NewGradesSection />;\n      case 'student-reports':\n        return <StudentReportSection />;\n      case 'attendance':\n        return <AttendanceSection />;\n      case 'finance':\n        return <FinanceSection />;\n      case 'reports':\n        return <ReportsSection />;\n      case 'settings':\n        return <SettingsSection />;\n      default:\n        return <DashboardSection onNavigate={setActiveSection} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors\">\n      <Sidebar activeSection={activeSection} onSectionChange={setActiveSection} />\n      \n      <div className=\"absolute top-6 left-6 z-40 flex items-center gap-3\">\n        <button \n          onClick={toggleTheme}\n          className=\"p-2 rounded-lg bg-card border border-border hover-elevate active-elevate-2 transition-colors\"\n          data-testid=\"button-theme-toggle\"\n          aria-label=\"تبديل الوضع\"\n        >\n          {theme === 'light' ? (\n            <Moon className=\"w-5 h-5 text-foreground\" />\n          ) : (\n            <Sun className=\"w-5 h-5 text-foreground\" />\n          )}\n        </button>\n        <button \n          className=\"px-6 py-2 bg-card border border-border hover-elevate active-elevate-2 text-foreground rounded-lg text-sm transition-colors\"\n          onClick={() => logoutMutation.mutate()}\n          data-testid=\"button-logout\"\n          disabled={logoutMutation.isPending}\n        >\n          {logoutMutation.isPending ? \"جاري الخروج...\" : \"تسجيل الخروج\"}\n        </button>\n      </div>\n\n      <div className={`p-8 overflow-y-auto min-h-screen flex flex-col transition-all duration-300 ${\n        isCollapsed ? 'mr-20' : 'mr-80'\n      }`}>\n        <div className=\"flex-1\">\n          {renderSection()}\n        </div>\n        \n        <footer className=\"mt-8 py-4 text-center border-t border-border\">\n          <p className=\"text-muted-foreground text-sm\">\n            تم تطوير هذا النظام من قبل{' '}\n            <a \n              href=\"http://trendifyplus.media/\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-foreground hover:text-primary transition-colors font-semibold\"\n            >\n              TRENDIFY PLUS\n            </a>\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4043},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/SettingsSection.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { SchoolSettings } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Check, ChevronsUpDown } from 'lucide-react';\n\nconst CURRENCIES = [\n  { code: 'SAR', nameAr: 'ريال سعودي', nameEn: 'Saudi Riyal', symbol: 'ر.س' },\n  { code: 'AED', nameAr: 'درهم إماراتي', nameEn: 'UAE Dirham', symbol: 'د.إ' },\n  { code: 'KWD', nameAr: 'دينار كويتي', nameEn: 'Kuwaiti Dinar', symbol: 'د.ك' },\n  { code: 'QAR', nameAr: 'ريال قطري', nameEn: 'Qatari Riyal', symbol: 'ر.ق' },\n  { code: 'BHD', nameAr: 'دينار بحريني', nameEn: 'Bahraini Dinar', symbol: 'د.ب' },\n  { code: 'OMR', nameAr: 'ريال عماني', nameEn: 'Omani Rial', symbol: 'ر.ع' },\n  { code: 'EGP', nameAr: 'جنيه مصري', nameEn: 'Egyptian Pound', symbol: 'ج.م' },\n  { code: 'JOD', nameAr: 'دينار أردني', nameEn: 'Jordanian Dinar', symbol: 'د.ا' },\n  { code: 'LBP', nameAr: 'ليرة لبنانية', nameEn: 'Lebanese Pound', symbol: 'ل.ل' },\n  { code: 'IQD', nameAr: 'دينار عراقي', nameEn: 'Iraqi Dinar', symbol: 'د.ع' },\n  { code: 'SYP', nameAr: 'ليرة سورية', nameEn: 'Syrian Pound', symbol: 'ل.س' },\n  { code: 'MAD', nameAr: 'درهم مغربي', nameEn: 'Moroccan Dirham', symbol: 'د.م' },\n  { code: 'TND', nameAr: 'دينار تونسي', nameEn: 'Tunisian Dinar', symbol: 'د.ت' },\n  { code: 'DZD', nameAr: 'دينار جزائري', nameEn: 'Algerian Dinar', symbol: 'د.ج' },\n  { code: 'LYD', nameAr: 'دينار ليبي', nameEn: 'Libyan Dinar', symbol: 'د.ل' },\n  { code: 'SDG', nameAr: 'جنيه سوداني', nameEn: 'Sudanese Pound', symbol: 'ج.س' },\n  { code: 'YER', nameAr: 'ريال يمني', nameEn: 'Yemeni Rial', symbol: 'ر.ي' },\n  { code: 'USD', nameAr: 'دولار أمريكي', nameEn: 'US Dollar', symbol: '$' },\n  { code: 'EUR', nameAr: 'يورو', nameEn: 'Euro', symbol: '€' },\n  { code: 'GBP', nameAr: 'جنيه إسترليني', nameEn: 'British Pound', symbol: '£' },\n  { code: 'JPY', nameAr: 'ين ياباني', nameEn: 'Japanese Yen', symbol: '¥' },\n  { code: 'CNY', nameAr: 'يوان صيني', nameEn: 'Chinese Yuan', symbol: '¥' },\n  { code: 'INR', nameAr: 'روبية هندية', nameEn: 'Indian Rupee', symbol: '₹' },\n  { code: 'PKR', nameAr: 'روبية باكستانية', nameEn: 'Pakistani Rupee', symbol: '₨' },\n  { code: 'BDT', nameAr: 'تاكا بنغلاديشية', nameEn: 'Bangladeshi Taka', symbol: '৳' },\n  { code: 'TRY', nameAr: 'ليرة تركية', nameEn: 'Turkish Lira', symbol: '₺' },\n  { code: 'IRR', nameAr: 'ريال إيراني', nameEn: 'Iranian Rial', symbol: '﷼' },\n  { code: 'AFN', nameAr: 'أفغاني', nameEn: 'Afghan Afghani', symbol: '؋' },\n  { code: 'RUB', nameAr: 'روبل روسي', nameEn: 'Russian Ruble', symbol: '₽' },\n  { code: 'CAD', nameAr: 'دولار كندي', nameEn: 'Canadian Dollar', symbol: 'C$' },\n  { code: 'AUD', nameAr: 'دولار أسترالي', nameEn: 'Australian Dollar', symbol: 'A$' },\n  { code: 'NZD', nameAr: 'دولار نيوزيلندي', nameEn: 'New Zealand Dollar', symbol: 'NZ$' },\n  { code: 'CHF', nameAr: 'فرنك سويسري', nameEn: 'Swiss Franc', symbol: 'CHF' },\n  { code: 'SEK', nameAr: 'كرونة سويدية', nameEn: 'Swedish Krona', symbol: 'kr' },\n  { code: 'NOK', nameAr: 'كرونة نرويجية', nameEn: 'Norwegian Krone', symbol: 'kr' },\n  { code: 'DKK', nameAr: 'كرونة دنماركية', nameEn: 'Danish Krone', symbol: 'kr' },\n  { code: 'PLN', nameAr: 'زلوتي بولندي', nameEn: 'Polish Zloty', symbol: 'zł' },\n  { code: 'ZAR', nameAr: 'راند جنوب أفريقي', nameEn: 'South African Rand', symbol: 'R' },\n  { code: 'BRL', nameAr: 'ريال برازيلي', nameEn: 'Brazilian Real', symbol: 'R$' },\n  { code: 'MXN', nameAr: 'بيزو مكسيكي', nameEn: 'Mexican Peso', symbol: 'MX$' },\n  { code: 'ARS', nameAr: 'بيزو أرجنتيني', nameEn: 'Argentine Peso', symbol: 'AR$' },\n  { code: 'CLP', nameAr: 'بيزو تشيلي', nameEn: 'Chilean Peso', symbol: 'CL$' },\n  { code: 'COP', nameAr: 'بيزو كولومبي', nameEn: 'Colombian Peso', symbol: 'CO$' },\n  { code: 'SGD', nameAr: 'دولار سنغافوري', nameEn: 'Singapore Dollar', symbol: 'S$' },\n  { code: 'MYR', nameAr: 'رينغيت ماليزي', nameEn: 'Malaysian Ringgit', symbol: 'RM' },\n  { code: 'THB', nameAr: 'بات تايلندي', nameEn: 'Thai Baht', symbol: '฿' },\n  { code: 'IDR', nameAr: 'روبية إندونيسية', nameEn: 'Indonesian Rupiah', symbol: 'Rp' },\n  { code: 'PHP', nameAr: 'بيزو فلبيني', nameEn: 'Philippine Peso', symbol: '₱' },\n  { code: 'VND', nameAr: 'دونج فيتنامي', nameEn: 'Vietnamese Dong', symbol: '₫' },\n  { code: 'KRW', nameAr: 'وون كوري', nameEn: 'South Korean Won', symbol: '₩' },\n  { code: 'HKD', nameAr: 'دولار هونغ كونغ', nameEn: 'Hong Kong Dollar', symbol: 'HK$' },\n  { code: 'TWD', nameAr: 'دولار تايواني', nameEn: 'Taiwan Dollar', symbol: 'NT$' },\n];\n\nexport default function SettingsSection() {\n  const { toast } = useToast();\n  const { data: settings, isLoading } = useQuery<SchoolSettings>({\n    queryKey: ['/api/school-settings'],\n  });\n\n  const [open, setOpen] = useState(false);\n  const [dateTypeOpen, setDateTypeOpen] = useState(false);\n  const [isBackingUp, setIsBackingUp] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [logoPreview, setLogoPreview] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    schoolName: settings?.schoolName || '',\n    schoolNameArabic: settings?.schoolNameArabic || 'مدرسة النور الأهلية',\n    currentAcademicYear: settings?.currentAcademicYear || '2024-2025',\n    currency: settings?.currency || 'SAR',\n    dateType: settings?.dateType || 'gregorian',\n    phone: settings?.phone || '',\n    email: settings?.email || '',\n    address: settings?.address || '',\n    logoUrl: settings?.logoUrl || '',\n    primaryColor: settings?.primaryColor || '#3b82f6',\n    accentColor: settings?.accentColor || '#10b981',\n  });\n\n  useEffect(() => {\n    if (settings) {\n      setFormData({\n        schoolName: settings.schoolName || '',\n        schoolNameArabic: settings.schoolNameArabic || 'مدرسة النور الأهلية',\n        currentAcademicYear: settings.currentAcademicYear || '2024-2025',\n        currency: settings.currency || 'SAR',\n        dateType: settings.dateType || 'gregorian',\n        phone: settings.phone || '',\n        email: settings.email || '',\n        address: settings.address || '',\n        logoUrl: settings.logoUrl || '',\n        primaryColor: settings.primaryColor || '#3b82f6',\n        accentColor: settings.accentColor || '#10b981',\n      });\n      setLogoPreview(settings.logoUrl || null);\n    }\n  }, [settings]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest('PATCH', '/api/school-settings', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/school-settings'] });\n      toast({\n        title: \"تم الحفظ بنجاح ✅\",\n        description: \"تم حفظ إعدادات المدرسة بنجاح\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"حدث خطأ ❌\",\n        description: \"فشل حفظ الإعدادات. الرجاء المحاولة مرة أخرى\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateMutation.mutate(formData);\n  };\n\n  const handleLogoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"خطأ ❌\",\n        description: \"الرجاء اختيار ملف صورة\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const maxSize = 5 * 1024 * 1024;\n    if (file.size > maxSize) {\n      toast({\n        title: \"خطأ ❌\",\n        description: \"حجم الصورة كبير جداً. الرجاء اختيار صورة أصغر من 5 ميجابايت\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64String = reader.result as string;\n      setLogoPreview(base64String);\n      setFormData({ ...formData, logoUrl: base64String });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleBackup = async () => {\n    setIsBackingUp(true);\n    try {\n      const response = await fetch('/api/database/backup');\n      \n      if (!response.ok) {\n        throw new Error('فشل إنشاء النسخة الاحتياطية');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `school_backup_${new Date().toISOString().split('T')[0]}.sql`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: \"تم إنشاء النسخة الاحتياطية ✅\",\n        description: \"تم تصدير قاعدة البيانات بصيغة SQL بنجاح\",\n      });\n    } catch (error) {\n      toast({\n        title: \"حدث خطأ ❌\",\n        description: \"فشل إنشاء النسخة الاحتياطية\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsBackingUp(false);\n    }\n  };\n\n  const handleExport = async () => {\n    setIsExporting(true);\n    try {\n      const response = await fetch('/api/export/excel');\n      \n      if (!response.ok) {\n        throw new Error('فشل تصدير البيانات');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `school_data_export_${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: \"تم تصدير البيانات ✅\",\n        description: \"تم تصدير بيانات المدرسة إلى ملف Excel بنجاح\",\n      });\n    } catch (error) {\n      toast({\n        title: \"حدث خطأ ❌\",\n        description: \"فشل تصدير البيانات\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white mb-2\">إعدادات المدرسة</h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">إدارة معلومات وإعدادات المدرسة</p>\n      </div>\n\n      <div className=\"glass-card rounded-2xl p-6 mb-8 transition-colors\">\n        <h3 className=\"text-xl font-bold text-gray-800 dark:text-white mb-6\">معلومات المدرسة</h3>\n        \n        {isLoading ? (\n          <div className=\"text-center py-8 text-gray-600\">جاري التحميل...</div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <Label>شعار المدرسة</Label>\n              <div className=\"flex items-center gap-4 mt-2\">\n                {logoPreview && (\n                  <div className=\"w-24 h-24 rounded-lg border-2 border-gray-200 overflow-hidden bg-white flex items-center justify-center p-2\">\n                    <img src={logoPreview} alt=\"School Logo\" className=\"max-w-full max-h-full object-contain\" />\n                  </div>\n                )}\n                <div className=\"flex-1\">\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleLogoChange}\n                    className=\"cursor-pointer bg-white dark:bg-gray-800\"\n                    data-testid=\"input-logo\"\n                  />\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">اختر صورة للشعار (PNG, JPG, SVG)</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>اسم المدرسة (English)</Label>\n                <Input\n                  value={formData.schoolName}\n                  onChange={(e) => setFormData({ ...formData, schoolName: e.target.value })}\n                  placeholder=\"Al-Noor Private School\"\n                  className=\"bg-white dark:bg-gray-800\"\n                  data-testid=\"input-school-name\"\n                />\n              </div>\n              <div>\n                <Label>اسم المدرسة بالعربية</Label>\n                <Input\n                  value={formData.schoolNameArabic}\n                  onChange={(e) => setFormData({ ...formData, schoolNameArabic: e.target.value })}\n                  placeholder=\"مدرسة النور الأهلية\"\n                  className=\"bg-white dark:bg-gray-800\"\n                  data-testid=\"input-school-name-arabic\"\n                />\n              </div>\n              <div>\n                <Label>العام الدراسي الحالي</Label>\n                <Input\n                  value={formData.currentAcademicYear}\n                  onChange={(e) => setFormData({ ...formData, currentAcademicYear: e.target.value })}\n                  placeholder=\"2024-2025\"\n                  className=\"bg-white dark:bg-gray-800\"\n                  data-testid=\"input-academic-year\"\n                />\n              </div>\n              <div>\n                <Label>العملة المستخدمة</Label>\n                <Popover open={open} onOpenChange={setOpen}>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      aria-expanded={open}\n                      className=\"w-full justify-between font-normal\"\n                      data-testid=\"select-currency\"\n                    >\n                      {formData.currency\n                        ? (() => {\n                            const selected = CURRENCIES.find(c => c.code === formData.currency);\n                            return selected ? `${selected.symbol} - ${selected.nameAr} (${selected.code})` : 'اختر العملة';\n                          })()\n                        : 'اختر العملة'}\n                      <ChevronsUpDown className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n                    <Command>\n                      <CommandInput placeholder=\"ابحث عن العملة...\" className=\"h-9\" />\n                      <CommandList>\n                        <CommandEmpty>لم يتم العثور على عملة</CommandEmpty>\n                        <CommandGroup>\n                          {CURRENCIES.map((currency) => (\n                            <CommandItem\n                              key={currency.code}\n                              value={`${currency.code} ${currency.nameAr} ${currency.nameEn}`}\n                              onSelect={() => {\n                                setFormData({ ...formData, currency: currency.code });\n                                setOpen(false);\n                              }}\n                            >\n                              <Check\n                                className={`ml-2 h-4 w-4 ${\n                                  formData.currency === currency.code ? 'opacity-100' : 'opacity-0'\n                                }`}\n                              />\n                              {currency.symbol} - {currency.nameAr} ({currency.code})\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n              <div>\n                <Label>نوع التاريخ المستخدم</Label>\n                <Popover open={dateTypeOpen} onOpenChange={setDateTypeOpen}>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      aria-expanded={dateTypeOpen}\n                      className=\"w-full justify-between font-normal\"\n                      data-testid=\"select-date-type\"\n                    >\n                      {formData.dateType === 'gregorian' ? 'تاريخ ميلادي' : 'تاريخ هجري'}\n                      <ChevronsUpDown className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-[300px] p-0\" align=\"start\">\n                    <Command>\n                      <CommandList>\n                        <CommandGroup>\n                          <CommandItem\n                            value=\"gregorian\"\n                            onSelect={() => {\n                              setFormData({ ...formData, dateType: 'gregorian' });\n                              setDateTypeOpen(false);\n                            }}\n                          >\n                            <Check\n                              className={`ml-2 h-4 w-4 ${\n                                formData.dateType === 'gregorian' ? 'opacity-100' : 'opacity-0'\n                              }`}\n                            />\n                            تاريخ ميلادي (Gregorian)\n                          </CommandItem>\n                          <CommandItem\n                            value=\"hijri\"\n                            onSelect={() => {\n                              setFormData({ ...formData, dateType: 'hijri' });\n                              setDateTypeOpen(false);\n                            }}\n                          >\n                            <Check\n                              className={`ml-2 h-4 w-4 ${\n                                formData.dateType === 'hijri' ? 'opacity-100' : 'opacity-0'\n                              }`}\n                            />\n                            تاريخ هجري (Hijri)\n                          </CommandItem>\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n              <div>\n                <Label>رقم الهاتف</Label>\n                <Input\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  placeholder=\"+966 XX XXX XXXX\"\n                  className=\"bg-white dark:bg-gray-800\"\n                  data-testid=\"input-phone\"\n                />\n              </div>\n              <div>\n                <Label>البريد الإلكتروني</Label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  placeholder=\"info@school.edu.sa\"\n                  className=\"bg-white dark:bg-gray-800\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div>\n                <Label>العنوان</Label>\n                <Input\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  placeholder=\"الرياض، المملكة العربية السعودية\"\n                  className=\"bg-white dark:bg-gray-800\"\n                  data-testid=\"input-address\"\n                />\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={updateMutation.isPending}\n              data-testid=\"button-save-settings\"\n            >\n              {updateMutation.isPending ? 'جاري الحفظ...' : 'حفظ التغييرات'}\n            </Button>\n          </form>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n        <div className=\"gradient-primary-bg rounded-2xl p-6 card-hover-effect\">\n          <h3 className=\"text-lg font-bold text-white mb-3\">النسخ الاحتياطي</h3>\n          <p className=\"text-sm text-white/80 mb-4\">حفظ نسخة احتياطية من البيانات بصيغة SQL</p>\n          <Button \n            className=\"w-full bg-white text-purple-600 hover:bg-white/90\" \n            onClick={handleBackup}\n            disabled={isBackingUp}\n            data-testid=\"button-backup\"\n          >\n            {isBackingUp ? 'جاري الإنشاء...' : 'إنشاء نسخة احتياطية'}\n          </Button>\n        </div>\n\n        <div className=\"gradient-success-bg rounded-2xl p-6 card-hover-effect\">\n          <h3 className=\"text-lg font-bold text-white mb-3\">تصدير البيانات</h3>\n          <p className=\"text-sm text-white/80 mb-4\">تصدير بيانات المدرسة بصيغة Excel</p>\n          <Button \n            className=\"w-full bg-white text-green-600 hover:bg-white/90\" \n            onClick={handleExport}\n            disabled={isExporting}\n            data-testid=\"button-export\"\n          >\n            {isExporting ? 'جاري التصدير...' : 'تصدير البيانات'}\n          </Button>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":22374},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/TeachersSection.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { Teacher } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { useSchoolSettings } from '@/contexts/SchoolSettingsContext';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Check, ChevronsUpDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { SiWhatsapp } from 'react-icons/si';\n\nconst countryCodes = [\n  { code: '+93', country: 'أفغانستان', name: 'Afghanistan' },\n  { code: '+355', country: 'ألبانيا', name: 'Albania' },\n  { code: '+213', country: 'الجزائر', name: 'Algeria' },\n  { code: '+1-684', country: 'ساموا الأمريكية', name: 'American Samoa' },\n  { code: '+376', country: 'أندورا', name: 'Andorra' },\n  { code: '+244', country: 'أنغولا', name: 'Angola' },\n  { code: '+54', country: 'الأرجنتين', name: 'Argentina' },\n  { code: '+374', country: 'أرمينيا', name: 'Armenia' },\n  { code: '+61', country: 'أستراليا', name: 'Australia' },\n  { code: '+43', country: 'النمسا', name: 'Austria' },\n  { code: '+994', country: 'أذربيجان', name: 'Azerbaijan' },\n  { code: '+973', country: 'البحرين', name: 'Bahrain' },\n  { code: '+880', country: 'بنغلاديش', name: 'Bangladesh' },\n  { code: '+375', country: 'بيلاروسيا', name: 'Belarus' },\n  { code: '+32', country: 'بلجيكا', name: 'Belgium' },\n  { code: '+501', country: 'بليز', name: 'Belize' },\n  { code: '+229', country: 'بنين', name: 'Benin' },\n  { code: '+975', country: 'بوتان', name: 'Bhutan' },\n  { code: '+591', country: 'بوليفيا', name: 'Bolivia' },\n  { code: '+387', country: 'البوسنة والهرسك', name: 'Bosnia' },\n  { code: '+55', country: 'البرازيل', name: 'Brazil' },\n  { code: '+673', country: 'بروناي', name: 'Brunei' },\n  { code: '+359', country: 'بلغاريا', name: 'Bulgaria' },\n  { code: '+855', country: 'كمبوديا', name: 'Cambodia' },\n  { code: '+237', country: 'الكاميرون', name: 'Cameroon' },\n  { code: '+1', country: 'كندا', name: 'Canada' },\n  { code: '+56', country: 'تشيلي', name: 'Chile' },\n  { code: '+86', country: 'الصين', name: 'China' },\n  { code: '+57', country: 'كولومبيا', name: 'Colombia' },\n  { code: '+506', country: 'كوستاريكا', name: 'Costa Rica' },\n  { code: '+385', country: 'كرواتيا', name: 'Croatia' },\n  { code: '+53', country: 'كوبا', name: 'Cuba' },\n  { code: '+357', country: 'قبرص', name: 'Cyprus' },\n  { code: '+420', country: 'التشيك', name: 'Czech Republic' },\n  { code: '+45', country: 'الدنمارك', name: 'Denmark' },\n  { code: '+593', country: 'الإكوادور', name: 'Ecuador' },\n  { code: '+20', country: 'مصر', name: 'Egypt' },\n  { code: '+503', country: 'السلفادور', name: 'El Salvador' },\n  { code: '+372', country: 'إستونيا', name: 'Estonia' },\n  { code: '+251', country: 'إثيوبيا', name: 'Ethiopia' },\n  { code: '+358', country: 'فنلندا', name: 'Finland' },\n  { code: '+33', country: 'فرنسا', name: 'France' },\n  { code: '+995', country: 'جورجيا', name: 'Georgia' },\n  { code: '+49', country: 'ألمانيا', name: 'Germany' },\n  { code: '+233', country: 'غانا', name: 'Ghana' },\n  { code: '+30', country: 'اليونان', name: 'Greece' },\n  { code: '+502', country: 'غواتيمالا', name: 'Guatemala' },\n  { code: '+509', country: 'هايتي', name: 'Haiti' },\n  { code: '+504', country: 'هندوراس', name: 'Honduras' },\n  { code: '+852', country: 'هونغ كونغ', name: 'Hong Kong' },\n  { code: '+36', country: 'المجر', name: 'Hungary' },\n  { code: '+354', country: 'آيسلندا', name: 'Iceland' },\n  { code: '+91', country: 'الهند', name: 'India' },\n  { code: '+62', country: 'إندونيسيا', name: 'Indonesia' },\n  { code: '+98', country: 'إيران', name: 'Iran' },\n  { code: '+964', country: 'العراق', name: 'Iraq' },\n  { code: '+353', country: 'أيرلندا', name: 'Ireland' },\n  { code: '+972', country: 'إسرائيل', name: 'Israel' },\n  { code: '+39', country: 'إيطاليا', name: 'Italy' },\n  { code: '+81', country: 'اليابان', name: 'Japan' },\n  { code: '+962', country: 'الأردن', name: 'Jordan' },\n  { code: '+7', country: 'كازاخستان', name: 'Kazakhstan' },\n  { code: '+254', country: 'كينيا', name: 'Kenya' },\n  { code: '+965', country: 'الكويت', name: 'Kuwait' },\n  { code: '+996', country: 'قرغيزستان', name: 'Kyrgyzstan' },\n  { code: '+856', country: 'لاوس', name: 'Laos' },\n  { code: '+371', country: 'لاتفيا', name: 'Latvia' },\n  { code: '+961', country: 'لبنان', name: 'Lebanon' },\n  { code: '+218', country: 'ليبيا', name: 'Libya' },\n  { code: '+370', country: 'ليتوانيا', name: 'Lithuania' },\n  { code: '+352', country: 'لوكسمبورغ', name: 'Luxembourg' },\n  { code: '+60', country: 'ماليزيا', name: 'Malaysia' },\n  { code: '+960', country: 'المالديف', name: 'Maldives' },\n  { code: '+356', country: 'مالطا', name: 'Malta' },\n  { code: '+52', country: 'المكسيك', name: 'Mexico' },\n  { code: '+373', country: 'مولدوفا', name: 'Moldova' },\n  { code: '+377', country: 'موناكو', name: 'Monaco' },\n  { code: '+976', country: 'منغوليا', name: 'Mongolia' },\n  { code: '+382', country: 'الجبل الأسود', name: 'Montenegro' },\n  { code: '+212', country: 'المغرب', name: 'Morocco' },\n  { code: '+95', country: 'ميانمار', name: 'Myanmar' },\n  { code: '+977', country: 'نيبال', name: 'Nepal' },\n  { code: '+31', country: 'هولندا', name: 'Netherlands' },\n  { code: '+64', country: 'نيوزيلندا', name: 'New Zealand' },\n  { code: '+505', country: 'نيكاراغوا', name: 'Nicaragua' },\n  { code: '+234', country: 'نيجيريا', name: 'Nigeria' },\n  { code: '+850', country: 'كوريا الشمالية', name: 'North Korea' },\n  { code: '+47', country: 'النرويج', name: 'Norway' },\n  { code: '+968', country: 'عمان', name: 'Oman' },\n  { code: '+92', country: 'باكستان', name: 'Pakistan' },\n  { code: '+970', country: 'فلسطين', name: 'Palestine' },\n  { code: '+507', country: 'بنما', name: 'Panama' },\n  { code: '+595', country: 'باراغواي', name: 'Paraguay' },\n  { code: '+51', country: 'بيرو', name: 'Peru' },\n  { code: '+63', country: 'الفلبين', name: 'Philippines' },\n  { code: '+48', country: 'بولندا', name: 'Poland' },\n  { code: '+351', country: 'البرتغال', name: 'Portugal' },\n  { code: '+974', country: 'قطر', name: 'Qatar' },\n  { code: '+40', country: 'رومانيا', name: 'Romania' },\n  { code: '+7', country: 'روسيا', name: 'Russia' },\n  { code: '+966', country: 'السعودية', name: 'Saudi Arabia' },\n  { code: '+381', country: 'صربيا', name: 'Serbia' },\n  { code: '+65', country: 'سنغافورة', name: 'Singapore' },\n  { code: '+421', country: 'سلوفاكيا', name: 'Slovakia' },\n  { code: '+386', country: 'سلوفينيا', name: 'Slovenia' },\n  { code: '+27', country: 'جنوب أفريقيا', name: 'South Africa' },\n  { code: '+82', country: 'كوريا الجنوبية', name: 'South Korea' },\n  { code: '+34', country: 'إسبانيا', name: 'Spain' },\n  { code: '+94', country: 'سريلانكا', name: 'Sri Lanka' },\n  { code: '+249', country: 'السودان', name: 'Sudan' },\n  { code: '+46', country: 'السويد', name: 'Sweden' },\n  { code: '+41', country: 'سويسرا', name: 'Switzerland' },\n  { code: '+963', country: 'سوريا', name: 'Syria' },\n  { code: '+886', country: 'تايوان', name: 'Taiwan' },\n  { code: '+992', country: 'طاجيكستان', name: 'Tajikistan' },\n  { code: '+255', country: 'تنزانيا', name: 'Tanzania' },\n  { code: '+66', country: 'تايلاند', name: 'Thailand' },\n  { code: '+216', country: 'تونس', name: 'Tunisia' },\n  { code: '+90', country: 'تركيا', name: 'Turkey' },\n  { code: '+993', country: 'تركمانستان', name: 'Turkmenistan' },\n  { code: '+256', country: 'أوغندا', name: 'Uganda' },\n  { code: '+380', country: 'أوكرانيا', name: 'Ukraine' },\n  { code: '+971', country: 'الإمارات', name: 'UAE' },\n  { code: '+44', country: 'بريطانيا', name: 'United Kingdom' },\n  { code: '+1', country: 'أمريكا', name: 'United States' },\n  { code: '+598', country: 'أوروغواي', name: 'Uruguay' },\n  { code: '+998', country: 'أوزبكستان', name: 'Uzbekistan' },\n  { code: '+58', country: 'فنزويلا', name: 'Venezuela' },\n  { code: '+84', country: 'فيتنام', name: 'Vietnam' },\n  { code: '+967', country: 'اليمن', name: 'Yemen' },\n  { code: '+260', country: 'زامبيا', name: 'Zambia' },\n  { code: '+263', country: 'زيمبابوي', name: 'Zimbabwe' },\n];\n\nexport default function TeachersSection() {\n  const { toast } = useToast();\n  const { currencySymbol } = useSchoolSettings();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingTeacher, setEditingTeacher] = useState<Teacher | null>(null);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [teacherToDelete, setTeacherToDelete] = useState<Teacher | null>(null);\n  const [newTeacher, setNewTeacher] = useState({\n    arabicName: '',\n    email: '',\n    phone: '',\n    gender: 'male' as 'male' | 'female',\n    hireDate: new Date().toISOString().split('T')[0],\n    qualification: '',\n    specialization: '',\n    monthlySalary: '0',\n    status: 'active' as const,\n  });\n\n  const [phoneCountryCode, setPhoneCountryCode] = useState('+961');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [editPhoneCountryCode, setEditPhoneCountryCode] = useState('+961');\n  const [editPhoneNumber, setEditPhoneNumber] = useState('');\n  const [openCountryCode, setOpenCountryCode] = useState(false);\n  const [openEditCountryCode, setOpenEditCountryCode] = useState(false);\n\n  const { data: teachers = [], isLoading } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof newTeacher) => {\n      return await apiRequest('POST', '/api/teachers', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setIsAddDialogOpen(false);\n      setNewTeacher({\n        arabicName: '',\n        email: '',\n        phone: '',\n        gender: 'male',\n        hireDate: new Date().toISOString().split('T')[0],\n        qualification: '',\n        specialization: '',\n        monthlySalary: '0',\n        status: 'active',\n      });\n      setPhoneCountryCode('+961');\n      setPhoneNumber('');\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تمت إضافة المعلم بنجاح\",\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.error || \"حدث خطأ أثناء إضافة المعلم\";\n      toast({\n        title: \"خطأ\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Teacher> }) => {\n      return await apiRequest('PATCH', `/api/teachers/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setIsEditDialogOpen(false);\n      setEditingTeacher(null);\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تحديث بيانات المعلم بنجاح\",\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.error || \"حدث خطأ أثناء تحديث بيانات المعلم\";\n      toast({\n        title: \"خطأ\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/teachers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setDeleteConfirmOpen(false);\n      setTeacherToDelete(null);\n      toast({\n        title: 'تم الحذف بنجاح',\n        description: 'تم حذف المعلم من النظام',\n      });\n    },\n    onError: () => {\n      setDeleteConfirmOpen(false);\n      setTeacherToDelete(null);\n      toast({\n        title: 'فشل الحذف',\n        description: 'حدث خطأ أثناء حذف المعلم. يرجى المحاولة مرة أخرى',\n        variant: 'destructive',\n      });\n    },\n  });\n  \n  const handleDeleteClick = (teacher: Teacher) => {\n    setTeacherToDelete(teacher);\n    setDeleteConfirmOpen(true);\n  };\n  \n  const handleConfirmDelete = () => {\n    if (teacherToDelete) {\n      deleteMutation.mutate(teacherToDelete.id);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const fullPhone = phoneCountryCode + phoneNumber;\n    createMutation.mutate({ ...newTeacher, phone: fullPhone });\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingTeacher) {\n      const fullPhone = editPhoneCountryCode + editPhoneNumber;\n      updateMutation.mutate({ id: editingTeacher.id, data: { ...editingTeacher, phone: fullPhone } });\n    }\n  };\n\n  const openEditDialog = (teacher: Teacher) => {\n    setEditingTeacher(teacher);\n    \n    const phone = teacher.phone || '';\n    const countryCodeMatch = phone.match(/^\\+\\d{1,4}/);\n    if (countryCodeMatch) {\n      setEditPhoneCountryCode(countryCodeMatch[0]);\n      setEditPhoneNumber(phone.substring(countryCodeMatch[0].length));\n    } else {\n      setEditPhoneCountryCode('+961');\n      setEditPhoneNumber(phone);\n    }\n    \n    setIsEditDialogOpen(true);\n  };\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">إدارة المعلمين</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">إدارة كادر المعلمين في المدرسة</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">إجمالي المعلمين</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{teachers.length}</p>\n            </div>\n            <div className=\"text-4xl\">👨‍🏫</div>\n          </div>\n        </div>\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">معلمين نشطين</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{teachers.filter(t => t.status === 'active').length}</p>\n            </div>\n            <div className=\"text-4xl\">✅</div>\n          </div>\n        </div>\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">في إجازة</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{teachers.filter(t => t.status === 'on_leave').length}</p>\n            </div>\n            <div className=\"text-4xl\">🏖️</div>\n          </div>\n        </div>\n        <div className=\"glass-card p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">تخصصات مختلفة</p>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{new Set(teachers.map(t => t.specialization)).size}</p>\n            </div>\n            <div className=\"text-4xl\">📚</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"glass-card rounded-2xl p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">قائمة المعلمين</h3>\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-teacher\">➕ إضافة معلم جديد</Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl glass-card backdrop-blur-xl bg-white/80 dark:bg-gray-900/90\">\n              <DialogHeader>\n                <DialogTitle>إضافة معلم جديد</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"col-span-2\">\n                    <Label>الاسم بالعربية</Label>\n                    <Input\n                      value={newTeacher.arabicName}\n                      onChange={(e) => setNewTeacher({ ...newTeacher, arabicName: e.target.value })}\n                      required\n                      data-testid=\"input-teacher-arabicname\"\n                    />\n                  </div>\n                  <div>\n                    <Label>البريد الإلكتروني</Label>\n                    <Input\n                      type=\"email\"\n                      value={newTeacher.email}\n                      onChange={(e) => setNewTeacher({ ...newTeacher, email: e.target.value })}\n                      data-testid=\"input-teacher-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label>الهاتف</Label>\n                    <div className=\"flex gap-2\">\n                      <Popover open={openCountryCode} onOpenChange={setOpenCountryCode}>\n                        <PopoverTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            role=\"combobox\"\n                            aria-expanded={openCountryCode}\n                            className=\"w-[140px] justify-between\"\n                            data-testid=\"select-teacher-country-code\"\n                          >\n                            {phoneCountryCode || \"اختر...\"}\n                            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 text-gray-500 dark:text-gray-400\" />\n                          </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-[200px] p-0\">\n                          <Command>\n                            <CommandInput placeholder=\"ابحث عن دولة...\" />\n                            <CommandList>\n                              <CommandEmpty>لا توجد نتائج</CommandEmpty>\n                              <CommandGroup>\n                                {countryCodes.map((country) => (\n                                  <CommandItem\n                                    key={country.code + country.country}\n                                    value={`${country.code} ${country.country} ${country.name}`}\n                                    onSelect={() => {\n                                      setPhoneCountryCode(country.code);\n                                      setOpenCountryCode(false);\n                                    }}\n                                  >\n                                    <Check\n                                      className={cn(\n                                        \"mr-2 h-4 w-4\",\n                                        phoneCountryCode === country.code ? \"opacity-100\" : \"opacity-0\"\n                                      )}\n                                    />\n                                    {country.code} {country.country}\n                                  </CommandItem>\n                                ))}\n                              </CommandGroup>\n                            </CommandList>\n                          </Command>\n                        </PopoverContent>\n                      </Popover>\n                      <Input\n                        value={phoneNumber}\n                        onChange={(e) => setPhoneNumber(e.target.value)}\n                        placeholder=\"12345678\"\n                        required\n                        className=\"flex-1\"\n                        data-testid=\"input-teacher-phone\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label>الجنس</Label>\n                    <Select\n                      value={newTeacher.gender}\n                      onValueChange={(value: 'male' | 'female') => setNewTeacher({ ...newTeacher, gender: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-teacher-gender\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">ذكر</SelectItem>\n                        <SelectItem value=\"female\">أنثى</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>تاريخ التوظيف</Label>\n                    <Input\n                      type=\"date\"\n                      value={newTeacher.hireDate}\n                      onChange={(e) => setNewTeacher({ ...newTeacher, hireDate: e.target.value })}\n                      required\n                      data-testid=\"input-teacher-hiredate\"\n                    />\n                  </div>\n                  <div>\n                    <Label>المؤهل العلمي</Label>\n                    <Input\n                      value={newTeacher.qualification}\n                      onChange={(e) => setNewTeacher({ ...newTeacher, qualification: e.target.value })}\n                      data-testid=\"input-teacher-qualification\"\n                    />\n                  </div>\n                  <div>\n                    <Label>التخصص</Label>\n                    <Input\n                      value={newTeacher.specialization}\n                      onChange={(e) => setNewTeacher({ ...newTeacher, specialization: e.target.value })}\n                      data-testid=\"input-teacher-specialization\"\n                    />\n                  </div>\n                  <div>\n                    <Label>الراتب الشهري</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={newTeacher.monthlySalary}\n                      onChange={(e) => setNewTeacher({ ...newTeacher, monthlySalary: e.target.value })}\n                      required\n                      data-testid=\"input-teacher-salary\"\n                    />\n                  </div>\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={createMutation.isPending} data-testid=\"button-submit-teacher\">\n                  {createMutation.isPending ? 'جاري الإضافة...' : 'إضافة المعلم'}\n                </Button>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">جاري التحميل...</div>\n        ) : teachers.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">لا يوجد معلمين</div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                <tr>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">المعلم</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">التخصص</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">البريد</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الهاتف</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الحالة</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الإجراءات</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                {teachers.map((teacher) => (\n                  <tr key={teacher.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center text-white font-bold\">\n                          {teacher.arabicName?.charAt(0)}\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{teacher.arabicName}</div>\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400\">راتب: {Number(teacher.monthlySalary).toFixed(2)} {currencySymbol}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4 text-sm text-gray-600 dark:text-gray-300\">{teacher.specialization || '-'}</td>\n                    <td className=\"px-4 py-4 text-sm text-gray-600 dark:text-gray-300\">{teacher.email}</td>\n                    <td className=\"px-4 py-4 text-sm text-gray-600 dark:text-gray-300\">{teacher.phone}</td>\n                    <td className=\"px-4 py-4\">\n                      <span className={`text-xs px-2 py-1 rounded-full ${\n                        teacher.status === 'active' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' :\n                        teacher.status === 'on_leave' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200' :\n                        'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'\n                      }`}>\n                        {teacher.status === 'active' ? 'نشط' : \n                         teacher.status === 'on_leave' ? 'في إجازة' : teacher.status}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"icon\" \n                          variant=\"ghost\"\n                          className=\"text-green-600 hover:text-green-700\"\n                          onClick={() => {\n                            const phoneNumber = teacher.phone.replace(/[^0-9]/g, '');\n                            window.open(`https://wa.me/${phoneNumber}`, '_blank');\n                          }}\n                          data-testid={`button-whatsapp-teacher-${teacher.id}`}\n                        >\n                          <SiWhatsapp className=\"h-5 w-5\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          onClick={() => openEditDialog(teacher)}\n                          data-testid={`button-edit-teacher-${teacher.id}`}\n                        >\n                          تعديل\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          onClick={() => handleDeleteClick(teacher)}\n                          data-testid={`button-delete-teacher-${teacher.id}`}\n                        >\n                          حذف\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl glass-card backdrop-blur-xl bg-white/80 dark:bg-gray-900/90\">\n          <DialogHeader>\n            <DialogTitle>تعديل بيانات المعلم</DialogTitle>\n          </DialogHeader>\n          {editingTeacher && (\n            <form onSubmit={handleEditSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"col-span-2\">\n                  <Label>الاسم بالعربية</Label>\n                  <Input\n                    value={editingTeacher.arabicName || ''}\n                    onChange={(e) => setEditingTeacher({ ...editingTeacher, arabicName: e.target.value })}\n                    required\n                    data-testid=\"input-edit-teacher-arabicname\"\n                  />\n                </div>\n                <div>\n                  <Label>البريد الإلكتروني</Label>\n                  <Input\n                    type=\"email\"\n                    value={editingTeacher.email || ''}\n                    onChange={(e) => setEditingTeacher({ ...editingTeacher, email: e.target.value })}\n                    data-testid=\"input-edit-teacher-email\"\n                  />\n                </div>\n                <div>\n                  <Label>الهاتف</Label>\n                  <div className=\"flex gap-2\">\n                    <Popover open={openEditCountryCode} onOpenChange={setOpenEditCountryCode}>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          role=\"combobox\"\n                          aria-expanded={openEditCountryCode}\n                          className=\"w-[140px] justify-between\"\n                          data-testid=\"select-edit-teacher-country-code\"\n                        >\n                          {editPhoneCountryCode || \"اختر...\"}\n                          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 text-gray-500 dark:text-gray-400\" />\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-[200px] p-0\">\n                        <Command>\n                          <CommandInput placeholder=\"ابحث عن دولة...\" />\n                          <CommandList>\n                            <CommandEmpty>لا توجد نتائج</CommandEmpty>\n                            <CommandGroup>\n                              {countryCodes.map((country) => (\n                                <CommandItem\n                                  key={country.code + country.country}\n                                  value={`${country.code} ${country.country} ${country.name}`}\n                                  onSelect={() => {\n                                    setEditPhoneCountryCode(country.code);\n                                    setOpenEditCountryCode(false);\n                                  }}\n                                >\n                                  <Check\n                                    className={cn(\n                                      \"mr-2 h-4 w-4\",\n                                      editPhoneCountryCode === country.code ? \"opacity-100\" : \"opacity-0\"\n                                    )}\n                                  />\n                                  {country.code} {country.country}\n                                </CommandItem>\n                              ))}\n                            </CommandGroup>\n                          </CommandList>\n                        </Command>\n                      </PopoverContent>\n                    </Popover>\n                    <Input\n                      value={editPhoneNumber}\n                      onChange={(e) => setEditPhoneNumber(e.target.value)}\n                      placeholder=\"12345678\"\n                      required\n                      className=\"flex-1\"\n                      data-testid=\"input-edit-teacher-phone\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label>المؤهل العلمي</Label>\n                  <Input\n                    value={editingTeacher.qualification || ''}\n                    onChange={(e) => setEditingTeacher({ ...editingTeacher, qualification: e.target.value })}\n                    data-testid=\"input-edit-teacher-qualification\"\n                  />\n                </div>\n                <div>\n                  <Label>التخصص</Label>\n                  <Input\n                    value={editingTeacher.specialization || ''}\n                    onChange={(e) => setEditingTeacher({ ...editingTeacher, specialization: e.target.value })}\n                    data-testid=\"input-edit-teacher-specialization\"\n                  />\n                </div>\n                <div>\n                  <Label>الراتب الشهري</Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={editingTeacher.monthlySalary || '0'}\n                    onChange={(e) => setEditingTeacher({ ...editingTeacher, monthlySalary: e.target.value })}\n                    required\n                    data-testid=\"input-edit-teacher-salary\"\n                  />\n                </div>\n                <div>\n                  <Label>الحالة</Label>\n                  <Select\n                    value={editingTeacher.status || 'active'}\n                    onValueChange={(value) => setEditingTeacher({ ...editingTeacher, status: value as any })}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-teacher-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">نشط</SelectItem>\n                      <SelectItem value=\"on_leave\">في إجازة</SelectItem>\n                      <SelectItem value=\"resigned\">مستقيل</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={updateMutation.isPending} data-testid=\"button-submit-edit-teacher\">\n                {updateMutation.isPending ? 'جاري الحفظ...' : 'حفظ التعديلات'}\n              </Button>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>\n        <AlertDialogContent className=\"glass-card backdrop-blur-xl bg-white/80 dark:bg-gray-900/90\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n            <AlertDialogDescription>\n              هل أنت متأكد من إتمام عملية حذف المعلم{' '}\n              <span className=\"font-bold text-gray-900 dark:text-white\">{teacherToDelete?.arabicName}</span>؟\n              <br />\n              <span className=\"text-red-600 font-semibold\">\n                سيتم حذف جميع البيانات المرتبطة بالمعلم بما في ذلك:\n              </span>\n              <br />\n              <span className=\"text-sm\">\n                • الصفوف المعينة للمعلم\n                <br />\n                • المواد التي يدرسها\n                <br />\n                • سجلات الرواتب والسلف\n              </span>\n              <br />\n              <span className=\"font-semibold\">لن تتمكن من التراجع عن هذا الإجراء.</span>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-teacher\">إلغاء</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmDelete}\n              disabled={deleteMutation.isPending}\n              className=\"bg-red-500 hover:bg-red-600\"\n              data-testid=\"button-confirm-delete-teacher\"\n            >\n              {deleteMutation.isPending ? 'جاري الحذف...' : 'نعم، احذف'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":37660},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SchoolSettingsProvider } from \"@/contexts/SchoolSettingsContext\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { SidebarProvider } from \"@/contexts/SidebarContext\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AuthPage from \"@/pages/auth-page\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\n      <ProtectedRoute path=\"/:rest*\" component={Dashboard} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ThemeProvider>\n          <SchoolSettingsProvider>\n            <SidebarProvider>\n              <TooltipProvider>\n                <Toaster />\n                <Router />\n              </TooltipProvider>\n            </SidebarProvider>\n          </SchoolSettingsProvider>\n        </ThemeProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1417},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/examples/DashboardSection.tsx":{"content":"import DashboardSection from '../DashboardSection';\n\nexport default function DashboardSectionExample() {\n  return (\n    <div className=\"gradient-primary-bg min-h-screen p-8\">\n      <DashboardSection />\n    </div>\n  );\n}\n","size_bytes":220},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/lib/dateUtils.ts":{"content":"// @ts-ignore\nimport momentHijri from 'moment-hijri';\n\nexport type DateType = 'gregorian' | 'hijri';\n\nexport function formatDate(\n  dateString: string,\n  dateType: DateType = 'gregorian',\n  format?: string\n): string {\n  if (!dateString) return '';\n\n  try {\n    if (dateType === 'hijri') {\n      const m = momentHijri(dateString, 'YYYY-MM-DD');\n      return m.format(format || 'iYYYY/iM/iD');\n    } else {\n      const date = new Date(dateString);\n      if (format) {\n        return momentHijri(date).format(format);\n      }\n      return date.toLocaleDateString('ar-SA-u-ca-gregory', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      });\n    }\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n}\n\nexport function formatDateLong(\n  dateString: string,\n  dateType: DateType = 'gregorian'\n): string {\n  if (!dateString) return '';\n\n  try {\n    if (dateType === 'hijri') {\n      const m = momentHijri(dateString, 'YYYY-MM-DD');\n      return m.format('iD iMMMM iYYYY');\n    } else {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ar-SA-u-ca-gregory', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n}\n\nexport function convertGregorianToHijri(dateString: string): string {\n  if (!dateString) return '';\n  \n  try {\n    const m = momentHijri(dateString, 'YYYY-MM-DD');\n    return m.format('iYYYY-iMM-iDD');\n  } catch (error) {\n    console.error('Error converting to Hijri:', error);\n    return dateString;\n  }\n}\n\nexport function convertHijriToGregorian(hijriDate: string): string {\n  if (!hijriDate) return '';\n  \n  try {\n    const m = momentHijri(hijriDate, 'iYYYY-iMM-iDD');\n    return m.format('YYYY-MM-DD');\n  } catch (error) {\n    console.error('Error converting to Gregorian:', error);\n    return hijriDate;\n  }\n}\n\nexport function getCurrentDate(dateType: DateType = 'gregorian'): string {\n  const now = momentHijri();\n  \n  if (dateType === 'hijri') {\n    return now.format('iYYYY-iMM-iDD');\n  } else {\n    return now.format('YYYY-MM-DD');\n  }\n}\n\nexport function getMonthName(month: number, dateType: DateType = 'gregorian'): string {\n  if (dateType === 'hijri') {\n    const hijriMonths = [\n      'محرم', 'صفر', 'ربيع الأول', 'ربيع الثاني',\n      'جمادى الأولى', 'جمادى الآخرة', 'رجب', 'شعبان',\n      'رمضان', 'شوال', 'ذو القعدة', 'ذو الحجة'\n    ];\n    return hijriMonths[month - 1] || '';\n  } else {\n    const gregorianMonths = [\n      'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',\n      'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'\n    ];\n    return gregorianMonths[month - 1] || '';\n  }\n}\n","size_bytes":2903},"client/src/components/AttendanceSection.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { CalendarIcon, CheckCircle, XCircle, Clock, Stethoscope, Banknote, Users } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ar } from 'date-fns/locale';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { cn } from '@/lib/utils';\n\ninterface Teacher {\n  id: string;\n  arabicName: string;\n  email: string;\n  phone: string;\n  monthlySalary: string;\n  status: string;\n}\n\ninterface TeacherAttendance {\n  id: string;\n  teacherId: string;\n  date: string;\n  status: 'present' | 'absent' | 'paid_leave' | 'unpaid_leave' | 'sick_leave';\n  deductFromSalary: boolean;\n  notes: string | null;\n}\n\ninterface DashboardStats {\n  totalStudents: number;\n  activeStudents: number;\n  activeTeachers: number;\n  totalRevenue: number;\n  pendingPayments: number;\n  totalClasses: number;\n}\n\nconst statusOptions = [\n  { value: 'present', label: 'حاضر', icon: CheckCircle, color: 'text-green-600', deduct: false },\n  { value: 'absent', label: 'غائب', icon: XCircle, color: 'text-red-600', deduct: false },\n  { value: 'paid_leave', label: 'إجازة براتب', icon: Banknote, color: 'text-blue-600', deduct: false },\n  { value: 'unpaid_leave', label: 'إجازة بدون راتب', icon: Clock, color: 'text-orange-600', deduct: true },\n  { value: 'sick_leave', label: 'إجازة مرضية', icon: Stethoscope, color: 'text-purple-600', deduct: false },\n];\n\nexport default function AttendanceSection() {\n  const { toast } = useToast();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [teacherStatuses, setTeacherStatuses] = useState<Record<string, string>>({});\n  const [isSaving, setIsSaving] = useState(false);\n\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const { data: teachers = [] } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n  });\n\n  const { data: teacherAttendance = [] } = useQuery<TeacherAttendance[]>({\n    queryKey: ['/api/teacher-attendance', { date: format(selectedDate, 'yyyy-MM-dd') }],\n    queryFn: async () => {\n      const response = await fetch(`/api/teacher-attendance?date=${format(selectedDate, 'yyyy-MM-dd')}`);\n      if (!response.ok) throw new Error('فشل في جلب بيانات الحضور');\n      return response.json();\n    },\n  });\n\n  const handleStatusChange = (teacherId: string, status: string) => {\n    setTeacherStatuses(prev => ({ ...prev, [teacherId]: status }));\n  };\n\n  const handleSaveAttendance = async () => {\n    const dateStr = format(selectedDate, 'yyyy-MM-dd');\n    setIsSaving(true);\n    \n    try {\n      const savePromises = Object.entries(teacherStatuses).map(async ([teacherId, status]) => {\n        const statusOption = statusOptions.find(opt => opt.value === status);\n        \n        return await apiRequest(\n          'POST',\n          '/api/teacher-attendance',\n          {\n            teacherId,\n            date: dateStr,\n            status,\n            deductFromSalary: statusOption?.deduct || false,\n          }\n        );\n      });\n\n      await Promise.all(savePromises);\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-attendance'] });\n      toast({\n        title: 'تم الحفظ',\n        description: 'تم حفظ بيانات الحضور بنجاح',\n      });\n    } catch (error) {\n      toast({\n        title: 'خطأ',\n        description: 'فشل في حفظ بيانات الحضور',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Initialize statuses only when attendance data or date changes\n  useEffect(() => {\n    setTeacherStatuses(prev => {\n      const initialStatuses: Record<string, string> = {};\n      \n      // First, set all active teachers to 'present' as default\n      teachers.filter(t => t.status === 'active').forEach(teacher => {\n        initialStatuses[teacher.id] = 'present';\n      });\n      \n      // Then, overlay with existing attendance data\n      teacherAttendance.forEach(att => {\n        initialStatuses[att.teacherId] = att.status;\n      });\n      \n      // Only update if different from current state\n      const hasChanges = JSON.stringify(prev) !== JSON.stringify(initialStatuses);\n      return hasChanges ? initialStatuses : prev;\n    });\n  }, [teacherAttendance, selectedDate, teachers]);\n\n  const activeTeachers = teachers.filter(t => t.status === 'active');\n  const presentCount = Object.values(teacherStatuses).filter(s => s === 'present').length;\n  const absentCount = Object.values(teacherStatuses).filter(s => s === 'absent').length;\n  const leaveCount = Object.values(teacherStatuses).filter(s => \n    s === 'paid_leave' || s === 'unpaid_leave' || s === 'sick_leave'\n  ).length;\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">الحضور والغياب</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">متابعة حضور الطلاب والمعلمين</p>\n      </div>\n\n      <Tabs defaultValue=\"teachers\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"tabs-attendance\">\n          <TabsTrigger value=\"students\" data-testid=\"tab-students\">حضور الطلاب</TabsTrigger>\n          <TabsTrigger value=\"teachers\" data-testid=\"tab-teachers\">حضور المعلمين</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"students\" className=\"mt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">معدل الحضور العام</p>\n                  <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">94%</p>\n                </div>\n                <div className=\"text-4xl\">📊</div>\n              </div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">طلاب حاضرين اليوم</p>\n                  <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{stats?.activeStudents || 0}</p>\n                </div>\n                <div className=\"text-4xl\">✅</div>\n              </div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">طلاب غائبين اليوم</p>\n                  <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">0</p>\n                </div>\n                <div className=\"text-4xl\">❌</div>\n              </div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">طلاب متأخرين</p>\n                  <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">0</p>\n                </div>\n                <div className=\"text-4xl\">⏰</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"text-center py-12 text-gray-500\">\n              <div className=\"text-5xl mb-4\">✅</div>\n              <p>قم بتسجيل الحضور للطلاب</p>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"teachers\" className=\"mt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">إجمالي المعلمين</p>\n                  <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{activeTeachers.length}</p>\n                </div>\n                <Users className=\"w-10 h-10 text-blue-600\" />\n              </div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">معلمين حاضرين</p>\n                  <p className=\"text-3xl font-bold text-green-600\">{presentCount}</p>\n                </div>\n                <CheckCircle className=\"w-10 h-10 text-green-600\" />\n              </div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">معلمين غائبين</p>\n                  <p className=\"text-3xl font-bold text-red-600\">{absentCount}</p>\n                </div>\n                <XCircle className=\"w-10 h-10 text-red-600\" />\n              </div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm font-bold mb-2\">في إجازة</p>\n                  <p className=\"text-3xl font-bold text-orange-600\">{leaveCount}</p>\n                </div>\n                <Clock className=\"w-10 h-10 text-orange-600\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">تسجيل حضور المعلمين</h3>\n              <div className=\"flex gap-3 items-center\">\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-right font-normal',\n                        !selectedDate && 'text-muted-foreground'\n                      )}\n                      data-testid=\"button-select-date\"\n                    >\n                      <CalendarIcon className=\"ml-2 h-4 w-4\" />\n                      {selectedDate ? format(selectedDate, 'PPP', { locale: ar }) : 'اختر التاريخ'}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={selectedDate}\n                      onSelect={(date) => date && setSelectedDate(date)}\n                      locale={ar}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n                <Button \n                  className=\"bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700\" \n                  onClick={handleSaveAttendance}\n                  disabled={isSaving || Object.keys(teacherStatuses).length === 0}\n                  data-testid=\"button-save-attendance\"\n                >\n                  {isSaving ? 'جاري الحفظ...' : 'حفظ الحضور'}\n                </Button>\n              </div>\n            </div>\n\n            {activeTeachers.length === 0 ? (\n              <div className=\"text-center py-12 text-gray-500\">\n                <Users className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                <p>لا يوجد معلمين نشطين</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"text-right\">اسم المعلم</TableHead>\n                      <TableHead className=\"text-right\">الحالة</TableHead>\n                      <TableHead className=\"text-right\">ملاحظات</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {activeTeachers.map((teacher) => {\n                      const currentStatus = teacherStatuses[teacher.id] || 'present';\n                      const statusOption = statusOptions.find(opt => opt.value === currentStatus);\n                      const Icon = statusOption?.icon || CheckCircle;\n\n                      return (\n                        <TableRow key={teacher.id} data-testid={`row-teacher-${teacher.id}`}>\n                          <TableCell className=\"font-medium text-gray-900 dark:text-white\">\n                            {teacher.arabicName}\n                          </TableCell>\n                          <TableCell>\n                            <Select\n                              value={currentStatus}\n                              onValueChange={(value) => handleStatusChange(teacher.id, value)}\n                            >\n                              <SelectTrigger \n                                className=\"w-[200px]\" \n                                data-testid={`select-status-${teacher.id}`}\n                              >\n                                <SelectValue>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Icon className={cn('w-4 h-4', statusOption?.color)} />\n                                    <span>{statusOption?.label}</span>\n                                  </div>\n                                </SelectValue>\n                              </SelectTrigger>\n                              <SelectContent>\n                                {statusOptions.map((option) => {\n                                  const OptionIcon = option.icon;\n                                  return (\n                                    <SelectItem \n                                      key={option.value} \n                                      value={option.value}\n                                      data-testid={`option-${option.value}-${teacher.id}`}\n                                    >\n                                      <div className=\"flex items-center gap-2\">\n                                        <OptionIcon className={cn('w-4 h-4', option.color)} />\n                                        <span>{option.label}</span>\n                                        {option.deduct && (\n                                          <span className=\"text-xs text-orange-600 mr-2\">(خصم)</span>\n                                        )}\n                                      </div>\n                                    </SelectItem>\n                                  );\n                                })}\n                              </SelectContent>\n                            </Select>\n                          </TableCell>\n                          <TableCell className=\"text-gray-600 dark:text-gray-400\">\n                            {statusOption?.deduct && (\n                              <span className=\"text-sm text-orange-600\">سيتم خصم من الراتب</span>\n                            )}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":16389},"deploy-quick.sh":{"content":"#!/bin/bash\n\n# =====================================\n# نشر سريع (تحديث الكود فقط)\n# =====================================\n\nset -e\n\n# عدّل هذه القيم\nVPS_USER=\"admin\"\nVPS_HOST=\"your-vps-ip.com\"\nDOMAIN=\"yourdomain.com\"\nREMOTE_PATH=\"/home/$VPS_USER/web/$DOMAIN/nodeapp\"\n\necho \"🔨 بناء المشروع...\"\nnpm run build\n\necho \"🚀 رفع التحديثات...\"\nrsync -avz --delete \\\n  dist/ $VPS_USER@$VPS_HOST:$REMOTE_PATH/dist/\n\necho \"🔄 إعادة تشغيل التطبيق...\"\nssh $VPS_USER@$VPS_HOST \"cd $REMOTE_PATH && pm2 restart $DOMAIN\"\n\necho \"✅ تم التحديث بنجاح! 🎉\"\n","size_bytes":630},"client/src/components/SubjectsSection.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { BookOpen, Plus, Edit, Trash2, GraduationCap } from 'lucide-react';\nimport type { Subject, InsertSubject } from '@shared/schema';\n\nexport default function SubjectsSection() {\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingSubject, setEditingSubject] = useState<Subject | null>(null);\n  const [newSubject, setNewSubject] = useState<InsertSubject>({\n    name: '',\n    arabicName: '',\n    code: '',\n    description: '',\n  });\n\n  const { data: subjects = [], isLoading } = useQuery<Subject[]>({\n    queryKey: ['/api/subjects'],\n  });\n\n  const createSubjectMutation = useMutation({\n    mutationFn: async (data: InsertSubject) => {\n      const subjectData = {\n        ...data,\n        name: data.arabicName,\n      };\n      return await apiRequest('POST', '/api/subjects', subjectData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/subjects'] });\n      setIsAddDialogOpen(false);\n      setNewSubject({ name: '', arabicName: '', code: '', description: '' });\n      toast({\n        title: 'تم إضافة المادة',\n        description: 'تم إضافة المادة الدراسية بنجاح',\n      });\n    },\n  });\n\n  const updateSubjectMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Subject> }) => {\n      const subjectData = {\n        ...data,\n        name: data.arabicName || data.name,\n      };\n      return await apiRequest('PATCH', `/api/subjects/${id}`, subjectData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/subjects'] });\n      setIsEditDialogOpen(false);\n      setEditingSubject(null);\n      toast({\n        title: 'تم تحديث المادة',\n        description: 'تم تحديث المادة الدراسية بنجاح',\n      });\n    },\n  });\n\n  const deleteSubjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/subjects/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/subjects'] });\n      toast({\n        title: 'تم حذف المادة',\n        description: 'تم حذف المادة الدراسية بنجاح',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'خطأ في الحذف',\n        description: 'لا يمكن حذف المادة لأنها مستخدمة في الصفوف الدراسية',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleAddSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createSubjectMutation.mutate(newSubject);\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingSubject) {\n      updateSubjectMutation.mutate({ id: editingSubject.id, data: editingSubject });\n    }\n  };\n\n  const openEditDialog = (subject: Subject) => {\n    setEditingSubject(subject);\n    setIsEditDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <GraduationCap className=\"h-8 w-8 text-primary\" />\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">إدارة المواد الدراسية</h1>\n      </div>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            المواد الدراسية ({subjects.length})\n          </CardTitle>\n          <Button onClick={() => setIsAddDialogOpen(true)} data-testid=\"button-add-subject\">\n            <Plus className=\"h-4 w-4 ml-2\" />\n            إضافة مادة دراسية\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {subjects.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <BookOpen className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg\">لا توجد مواد دراسية مضافة</p>\n              <p className=\"text-sm mt-2\">ابدأ بإضافة المواد الدراسية للمدرسة</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {subjects.map((subject) => (\n                <Card key={subject.id} data-testid={`card-subject-${subject.id}`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex justify-between items-start gap-2\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{subject.arabicName}</CardTitle>\n                        {subject.code && (\n                          <Badge variant=\"secondary\" className=\"mt-2\">\n                            {subject.code}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {subject.description && (\n                      <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n                        {subject.description}\n                      </p>\n                    )}\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => openEditDialog(subject)}\n                        data-testid={`button-edit-subject-${subject.id}`}\n                      >\n                        <Edit className=\"h-3 w-3 ml-1\" />\n                        تعديل\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => deleteSubjectMutation.mutate(subject.id)}\n                        disabled={deleteSubjectMutation.isPending}\n                        data-testid={`button-delete-subject-${subject.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3 ml-1\" />\n                        حذف\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Add Subject Dialog */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              إضافة مادة دراسية جديدة\n            </DialogTitle>\n            <DialogDescription>أدخل معلومات المادة الدراسية الجديدة</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleAddSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">اسم المادة بالعربية *</label>\n              <Input\n                value={newSubject.arabicName}\n                onChange={(e) => setNewSubject({ ...newSubject, arabicName: e.target.value })}\n                placeholder=\"مثال: الرياضيات\"\n                required\n                data-testid=\"input-subject-name\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">كود المادة</label>\n              <Input\n                value={newSubject.code}\n                onChange={(e) => setNewSubject({ ...newSubject, code: e.target.value })}\n                placeholder=\"مثال: MATH101\"\n                data-testid=\"input-subject-code\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">الوصف</label>\n              <Textarea\n                value={newSubject.description ?? ''}\n                onChange={(e) => setNewSubject({ ...newSubject, description: e.target.value })}\n                placeholder=\"وصف المادة الدراسية\"\n                rows={3}\n                data-testid=\"input-subject-description\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={createSubjectMutation.isPending}\n              data-testid=\"button-submit-subject\"\n            >\n              {createSubjectMutation.isPending ? 'جاري الإضافة...' : 'إضافة المادة'}\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Subject Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Edit className=\"h-5 w-5\" />\n              تعديل المادة الدراسية\n            </DialogTitle>\n            <DialogDescription>قم بتعديل معلومات المادة الدراسية</DialogDescription>\n          </DialogHeader>\n          {editingSubject && (\n            <form onSubmit={handleEditSubmit} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">اسم المادة بالعربية *</label>\n                <Input\n                  value={editingSubject.arabicName}\n                  onChange={(e) =>\n                    setEditingSubject({ ...editingSubject, arabicName: e.target.value })\n                  }\n                  placeholder=\"مثال: الرياضيات\"\n                  required\n                  data-testid=\"input-edit-subject-name\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">كود المادة</label>\n                <Input\n                  value={editingSubject.code ?? ''}\n                  onChange={(e) =>\n                    setEditingSubject({ ...editingSubject, code: e.target.value })\n                  }\n                  placeholder=\"مثال: MATH101\"\n                  data-testid=\"input-edit-subject-code\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">الوصف</label>\n                <Textarea\n                  value={editingSubject.description ?? ''}\n                  onChange={(e) =>\n                    setEditingSubject({ ...editingSubject, description: e.target.value })\n                  }\n                  placeholder=\"وصف المادة الدراسية\"\n                  rows={3}\n                  data-testid=\"input-edit-subject-description\"\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={updateSubjectMutation.isPending}\n                data-testid=\"button-submit-edit-subject\"\n              >\n                {updateSubjectMutation.isPending ? 'جاري الحفظ...' : 'حفظ التعديلات'}\n              </Button>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12005},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"design_guidelines.md":{"content":"# Design Guidelines: School Management Dashboard\n\n## Design Approach\n**System**: Custom glass-morphism design system with gradient accents, optimized for Arabic RTL layouts and data-dense administrative interfaces.\n\n## Core Design Principles\n- **Glass-morphism aesthetic**: Translucent cards with backdrop blur for modern, layered appearance\n- **Gradient accents**: Strategic use of vibrant gradients for visual hierarchy and engagement\n- **Information clarity**: Data-first layout prioritizing readability and quick scanning\n- **Arabic-first design**: Optimized RTL layout with proper text rendering and spacing\n\n## Color Palette\n\n### Background & Base\n- Primary gradient background: `linear-gradient(135deg, #667eea 0%, #764ba2 100%)` (purple-blue)\n- Glass containers: `rgba(255, 255, 255, 0.95)` with 20px backdrop blur\n- Sidebar: `rgba(255, 255, 255, 0.1)` with 20px backdrop blur\n- Border highlights: `rgba(255, 255, 255, 0.2)` for glass edges\n\n### Gradient Categories (for stat cards & accents)\n- Primary: `linear-gradient(135deg, #667eea 0%, #764ba2 100%)` - purple/indigo\n- Success: `linear-gradient(135deg, #11998e 0%, #38ef7d 100%)` - teal/green\n- Warning: `linear-gradient(135deg, #f093fb 0%, #f5576c 100%)` - pink/red\n- Info: `linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)` - blue/cyan\n\n### Text Colors\n- Primary headings: `#1a202c` (gray-900) on light backgrounds, white on gradients\n- Secondary text: `rgba(0, 0, 0, 0.7)` on light, `rgba(255, 255, 255, 0.8)` on dark\n- Muted text: `rgba(0, 0, 0, 0.5)` on light, `rgba(255, 255, 255, 0.7)` on dark\n\n## Typography\n- **Font family**: 'Cairo', 'Segoe UI', Tahoma (Arabic-optimized)\n- **Headings**: \n  - H1: 2xl (30px), font-bold (700)\n  - H2: xl (20px), font-bold (700)\n  - H3: lg (18px), font-semibold (600)\n- **Body text**: base (16px), font-normal (400)\n- **Small text**: sm (14px), xs (12px) for metadata\n- **Line height**: Generous for Arabic readability (1.6-1.8)\n\n## Layout System\n**Spacing primitives**: Use Tailwind units of 2, 4, 6, 8 for consistency\n- Container padding: `p-6` (24px) or `p-8` (32px) for main sections\n- Card spacing: `gap-6` between grid items\n- Section margins: `mb-8` between major sections\n- Sidebar width: Fixed 320px (`w-80`)\n- Main content: `mr-80` (margin-right for RTL) with `p-8` padding\n\n**Grid Layouts**:\n- Stats cards: 4-column grid on desktop (`grid-cols-4`), stack on mobile\n- Content cards: 2-3 column grids (`grid-cols-2` or `grid-cols-3`)\n- Responsive breakpoints: Mobile-first, md: 768px, lg: 1024px\n\n## Component Library\n\n### Navigation (Sidebar)\n- Glass-effect background with 20px blur\n- Active state: `rgba(255, 255, 255, 0.3)` with 4px right border (white)\n- Hover: `rgba(255, 255, 255, 0.2)` with -5px translateX\n- Item spacing: `space-y-2` with rounded-xl corners\n- Icon + text layout with notification badges\n\n### Cards & Containers\n- Glass cards: White background (95% opacity), 20px blur, 8-32px shadow\n- Border radius: `rounded-2xl` (16px) for all cards\n- Hover effect: `translateY(-8px) scale(1.02)` with enhanced shadow\n- Transition: `0.4s cubic-bezier(0.4, 0, 0.2, 1)`\n\n### Stat Cards\n- Gradient backgrounds from color palette\n- White text throughout\n- Large numbers (3xl/30px, bold)\n- Small metadata text (xs/12px, 70% opacity)\n- Emoji icons at 4xl size for visual interest\n\n### Buttons\n- Primary: Gradient background `#667eea to #764ba2` with blur shadow\n- Hover: `translateY(-2px)` with enhanced shadow (0 8px 25px)\n- Padding: `py-2 px-4` or `py-3 px-6` for prominent actions\n- Border radius: `rounded-lg` (8px)\n- Transition: All 0.3s ease\n\n### Tables & Data Display\n- Row hover: Gradient overlay `rgba(102, 126, 234, 0.1)` with `scale(1.01)`\n- Headers: Semi-bold with slight opacity reduction\n- Alternating rows optional: Use subtle gray backgrounds\n- Borders: Light gray `rgba(0, 0, 0, 0.1)`\n\n### Modals & Overlays\n- Backdrop: `rgba(0, 0, 0, 0.5)` with 5px blur\n- Modal content: Glass-card styling\n- Smooth fade-in animation (0.5s ease-out)\n\n### Form Elements\n- Input fields: White background, light border, rounded-lg\n- Focus state: Border color matches primary gradient\n- Labels: Font-medium (500), mb-2 spacing\n- Dark mode inputs: Maintain consistent glass aesthetic\n\n### Icons & Badges\n- Use emoji icons for quick visual recognition (mix with SVG where needed)\n- Notification badges: Colored circles with pulse animation\n- Size hierarchy: text-xl for menu, text-4xl for stat cards\n\n## Animations\n**Minimal, purposeful motion**:\n- Page load: 0.5s fade-in with translateY(20px)\n- Card hover: 0.4s transform with enhanced shadow\n- Button interactions: 0.3s ease transitions\n- Notification badges: 2s pulse loop (opacity 1 to 0.5)\n\n## RTL-Specific Guidelines\n- All spacing: Use `space-x-reverse` for proper RTL flow\n- Flex direction: Items naturally flow right-to-left\n- Text alignment: Right-aligned by default\n- Icon placement: Icons on right side of text\n- Borders: Right borders for active states (not left)\n- Transforms: Use translateX with negative values for RTL hover effects\n\n## Data Visualization\n- Progress rings: Use transform rotate(-90deg) for proper start position\n- Charts: Maintain RTL number formatting\n- Color coding: Red for alerts, green for success, blue for info\n- Percentage displays: Large, bold numbers with context labels\n\n## Accessibility\n- High contrast text on all backgrounds (WCAG AA minimum)\n- Focus states: Visible outlines on all interactive elements\n- Touch targets: Minimum 44px height for mobile interactions\n- Arabic number formatting: Use Arabic-Indic numerals where appropriate\n\n## Images\nThis dashboard does not require hero images. Focus on:\n- User avatars (rounded-full, 40-48px)\n- Icon-based visual hierarchy using emojis and simple SVGs\n- Data visualization charts/graphs where applicable","size_bytes":5763},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/examples/StudentsSection.tsx":{"content":"import StudentsSection from '../StudentsSection';\n\nexport default function StudentsSectionExample() {\n  return (\n    <div className=\"gradient-primary-bg min-h-screen p-8\">\n      <StudentsSection />\n    </div>\n  );\n}\n","size_bytes":216},"client/src/components/DashboardSection.tsx":{"content":"import StatCard from './StatCard';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport { useSchoolSettings } from '@/contexts/SchoolSettingsContext';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface DashboardStats {\n  totalStudents: number;\n  activeStudents: number;\n  activeTeachers: number;\n  totalRevenue: number;\n  pendingPayments: number;\n  totalClasses: number;\n}\n\ninterface DashboardSectionProps {\n  onNavigate: (section: string) => void;\n}\n\nexport default function DashboardSection({ onNavigate }: DashboardSectionProps) {\n  const { currencySymbol, settings } = useSchoolSettings();\n  const { user } = useAuth();\n  \n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n    enabled: user?.role === 'admin',\n  });\n\n  const handleAddStudent = () => onNavigate('students');\n  const handleAddTeacher = () => onNavigate('teachers');\n  const handleSendNotification = () => onNavigate('communication');\n  const handleRecordPayment = () => onNavigate('finance');\n\n  const today = new Date();\n  const dayOfMonth = today.getDate();\n  const isPaymentReminderDay = dayOfMonth === 5;\n\n  const helpfulTips = [\n    {\n      icon: '💡',\n      title: 'نصيحة: تسجيل المستحقات المالية',\n      message: 'تأكد من تسجيل جميع المستحقات المالية للطلاب بانتظام لضمان دقة الحسابات',\n      bgColor: 'bg-blue-50',\n      borderColor: 'border-blue-200',\n      iconColor: 'text-blue-600',\n      titleColor: 'text-blue-900',\n      messageColor: 'text-blue-700'\n    },\n    {\n      icon: '📚',\n      title: 'نصيحة: تحديث بيانات الطلاب',\n      message: 'راجع بيانات الطلاب بشكل دوري وتأكد من تحديث معلومات الاتصال الخاصة بأولياء الأمور',\n      bgColor: 'bg-purple-50',\n      borderColor: 'border-purple-200',\n      iconColor: 'text-purple-600',\n      titleColor: 'text-purple-900',\n      messageColor: 'text-purple-700'\n    },\n    {\n      icon: '👨‍🏫',\n      title: 'نصيحة: توزيع المعلمين',\n      message: 'تحقق من توزيع المعلمين على الصفوف بشكل متوازن وتأكد من تعيين معلم لكل مادة',\n      bgColor: 'bg-green-50',\n      borderColor: 'border-green-200',\n      iconColor: 'text-green-600',\n      titleColor: 'text-green-900',\n      messageColor: 'text-green-700'\n    },\n    {\n      icon: '📊',\n      title: 'نصيحة: مراجعة التقارير',\n      message: 'راجع التقارير الأسبوعية للوقوف على أداء الطلاب والمعلمين واتخاذ القرارات المناسبة',\n      bgColor: 'bg-indigo-50',\n      borderColor: 'border-indigo-200',\n      iconColor: 'text-indigo-600',\n      titleColor: 'text-indigo-900',\n      messageColor: 'text-indigo-700'\n    },\n    {\n      icon: '💰',\n      title: 'نصيحة: متابعة الرسوم',\n      message: 'تابع حالة الرسوم الدراسية بانتظام وتواصل مع أولياء الأمور للطلاب المتأخرين في السداد',\n      bgColor: 'bg-amber-50',\n      borderColor: 'border-amber-200',\n      iconColor: 'text-amber-600',\n      titleColor: 'text-amber-900',\n      messageColor: 'text-amber-700'\n    },\n    {\n      icon: '📢',\n      title: 'نصيحة: التواصل المستمر',\n      message: 'حافظ على التواصل المستمر مع أولياء الأمور من خلال إرسال الإشعارات حول أداء أبنائهم',\n      bgColor: 'bg-teal-50',\n      borderColor: 'border-teal-200',\n      iconColor: 'text-teal-600',\n      titleColor: 'text-teal-900',\n      messageColor: 'text-teal-700'\n    },\n    {\n      icon: '🎯',\n      title: 'نصيحة: الحضور والغياب',\n      message: 'سجل الحضور والغياب يومياً لجميع الصفوف لضمان متابعة دقيقة لحضور الطلاب',\n      bgColor: 'bg-cyan-50',\n      borderColor: 'border-cyan-200',\n      iconColor: 'text-cyan-600',\n      titleColor: 'text-cyan-900',\n      messageColor: 'text-cyan-700'\n    },\n    {\n      icon: '⚙️',\n      title: 'نصيحة: إعدادات النظام',\n      message: 'راجع إعدادات المدرسة بشكل دوري وتأكد من صحة جميع المعلومات والبيانات المدخلة',\n      bgColor: 'bg-slate-50',\n      borderColor: 'border-slate-200',\n      iconColor: 'text-slate-600',\n      titleColor: 'text-slate-900',\n      messageColor: 'text-slate-700'\n    }\n  ];\n\n  const randomTip = helpfulTips[Math.floor(Math.random() * helpfulTips.length)];\n\n  if (user?.role === 'parent') {\n    return (\n      <div className=\"fade-in\">\n        <div className=\"max-w-4xl mx-auto mt-20\">\n          <div className=\"bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 border-2 border-purple-200 dark:border-purple-700 rounded-3xl p-12 text-center shadow-lg\">\n            <div className=\"mb-6\">\n              <span className=\"text-8xl\">👨‍👩‍👧‍👦</span>\n            </div>\n            <h1 className=\"text-4xl font-bold text-gray-800 dark:text-white mb-4\">\n              مرحباً بك {user.fullName || 'ولي الأمر'}! 👋\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 leading-relaxed\">\n              أهلاً وسهلاً بك في نظام {settings?.schoolNameArabic || 'مدرسة النور الأهلية'}\n            </p>\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-md\">\n              <h2 className=\"text-2xl font-semibold text-gray-800 dark:text-white mb-4\">\n                📊 متابعة تقدم أبنائك\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                يمكنك متابعة التحصيل الدراسي والتقرير المالي لأبنائك من خلال قسم \"تقارير الطلاب\"\n              </p>\n              <Button \n                onClick={() => onNavigate('student-reports')}\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3 text-lg\"\n                data-testid=\"button-view-reports\"\n              >\n                عرض التقارير 📑\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (user?.role === 'teacher') {\n    return (\n      <div className=\"fade-in\">\n        <div className=\"max-w-4xl mx-auto mt-20\">\n          <div className=\"bg-gradient-to-br from-green-50 to-teal-50 dark:from-green-900/20 dark:to-teal-900/20 border-2 border-green-200 dark:border-green-700 rounded-3xl p-12 text-center shadow-lg\">\n            <div className=\"mb-6\">\n              <span className=\"text-8xl\">👨‍🏫</span>\n            </div>\n            <h1 className=\"text-4xl font-bold text-gray-800 dark:text-white mb-4\">\n              مرحباً بك {user.fullName || 'الأستاذ'}! 👋\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 leading-relaxed\">\n              أهلاً وسهلاً بك في نظام {settings?.schoolNameArabic || 'مدرسة النور الأهلية'}\n            </p>\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-md\">\n              <h2 className=\"text-2xl font-semibold text-gray-800 dark:text-white mb-4\">\n                📝 إضافة علامات الطلاب\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                يمكنك إضافة وتعديل علامات طلابك من خلال قسم \"إدخال العلامات\"\n              </p>\n              <Button \n                onClick={() => onNavigate('grades')}\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700 text-white px-8 py-3 text-lg\"\n                data-testid=\"button-add-grades\"\n              >\n                إدخال العلامات 📝\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"fade-in\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white mb-2\">مرحباً بك 👋</h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">جاري تحميل البيانات...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white mb-2\">مرحباً بك 👋</h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">نظرة شاملة على أداء {settings?.schoolNameArabic || 'المدرسة'}</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <StatCard \n          title=\"إجمالي الطلاب\" \n          value={stats?.totalStudents || 0} \n          subtitle={`${stats?.activeStudents || 0} نشط`} \n          icon=\"👥\" \n          gradient=\"primary\" \n        />\n        <StatCard \n          title=\"المعلمين النشطين\" \n          value={stats?.activeTeachers || 0} \n          subtitle=\"معلم مؤهل\" \n          icon=\"👨‍🏫\" \n          gradient=\"success\" \n        />\n        <StatCard \n          title=\"الصفوف الدراسية\" \n          value={stats?.totalClasses || 0} \n          subtitle=\"صف دراسي\" \n          icon=\"🏛️\" \n          gradient=\"info\" \n        />\n        <StatCard \n          title=\"صافي الربح\" \n          value={stats?.totalRevenue?.toLocaleString() || '0'} \n          subtitle={currencySymbol} \n          icon=\"💰\" \n          gradient=\"warning\" \n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"glass-card rounded-2xl p-6 transition-colors\">\n          <h3 className=\"text-xl font-bold text-black dark:text-white mb-4\">الإجراءات السريعة</h3>\n          <div className=\"space-y-3\">\n            <Button className=\"w-full\" variant=\"default\" onClick={handleAddStudent} data-testid=\"button-add-student\">\n              ➕ إضافة طالب جديد\n            </Button>\n            <Button className=\"w-full bg-green-600 hover:bg-green-700\" onClick={handleAddTeacher} data-testid=\"button-add-teacher\">\n              👨‍🏫 إضافة معلم جديد\n            </Button>\n            <Button className=\"w-full bg-purple-600 hover:bg-purple-700\" onClick={handleSendNotification} data-testid=\"button-send-notification\">\n              📢 إرسال إشعار عام\n            </Button>\n            <Button className=\"w-full bg-orange-600 hover:bg-orange-700\" onClick={handleRecordPayment} data-testid=\"button-record-payment\">\n              💰 تسجيل دفعة\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"glass-card rounded-2xl p-6 md:col-span-2 transition-colors\">\n          <h3 className=\"text-xl font-bold text-black dark:text-white mb-4\">التنبيهات المهمة</h3>\n          <div className=\"space-y-3\">\n            {isPaymentReminderDay && (\n              <div className=\"bg-orange-50 border border-orange-300 p-4 rounded-lg animate-pulse\">\n                <div className=\"flex items-center\">\n                  <span className=\"text-orange-600 ml-2 text-xl\">💰</span>\n                  <div className=\"flex-1\">\n                    <div className=\"font-bold text-orange-900\">تذكير: موعد تحصيل الرسوم الشهرية</div>\n                    <div className=\"text-sm text-orange-700 mt-1\">\n                      اليوم هو الخامس من الشهر - الرجاء البدء في تحصيل الرسوم من الطلاب\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div className={`${randomTip.bgColor} border ${randomTip.borderColor} p-4 rounded-lg`}>\n              <div className=\"flex items-center\">\n                <span className={`${randomTip.iconColor} ml-2 text-xl`}>{randomTip.icon}</span>\n                <div className=\"flex-1\">\n                  <div className={`font-bold ${randomTip.titleColor}`}>{randomTip.title}</div>\n                  <div className={`text-sm ${randomTip.messageColor} mt-1`}>\n                    {randomTip.message}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12804},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/MonthFilter.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Calendar, ChevronsUpDown, Check } from 'lucide-react';\n\ninterface MonthFilterProps {\n  selectedYears: number[];\n  selectedMonths: number[];\n  onYearsChange: (years: number[]) => void;\n  onMonthsChange: (months: number[]) => void;\n}\n\nconst MONTHS = [\n  { value: 1, label: 'يناير' },\n  { value: 2, label: 'فبراير' },\n  { value: 3, label: 'مارس' },\n  { value: 4, label: 'أبريل' },\n  { value: 5, label: 'مايو' },\n  { value: 6, label: 'يونيو' },\n  { value: 7, label: 'يوليو' },\n  { value: 8, label: 'أغسطس' },\n  { value: 9, label: 'سبتمبر' },\n  { value: 10, label: 'أكتوبر' },\n  { value: 11, label: 'نوفمبر' },\n  { value: 12, label: 'ديسمبر' },\n];\n\nexport default function MonthFilter({ selectedYears, selectedMonths, onYearsChange, onMonthsChange }: MonthFilterProps) {\n  const [monthsOpen, setMonthsOpen] = useState(false);\n  const [yearsOpen, setYearsOpen] = useState(false);\n  const years = Array.from({ length: 11 }, (_, i) => 2025 + i);\n\n  const toggleMonth = (month: number) => {\n    if (selectedMonths.includes(month)) {\n      onMonthsChange(selectedMonths.filter(m => m !== month));\n    } else {\n      onMonthsChange([...selectedMonths, month].sort((a, b) => a - b));\n    }\n  };\n\n  const toggleYear = (year: number) => {\n    if (selectedYears.includes(year)) {\n      onYearsChange(selectedYears.filter(y => y !== year));\n    } else {\n      onYearsChange([...selectedYears, year].sort((a, b) => b - a));\n    }\n  };\n\n  const selectAllMonths = () => {\n    onMonthsChange(MONTHS.map(m => m.value));\n  };\n\n  const clearAllMonths = () => {\n    onMonthsChange([]);\n  };\n\n  const getSelectedMonthsText = () => {\n    if (selectedMonths.length === 0) return 'اختر الأشهر';\n    if (selectedMonths.length === MONTHS.length) return 'جميع الأشهر';\n    if (selectedMonths.length === 1) {\n      const month = MONTHS.find(m => m.value === selectedMonths[0]);\n      return month?.label;\n    }\n    return `${selectedMonths.length} شهر محدد`;\n  };\n\n  const getSelectedYearsText = () => {\n    if (selectedYears.length === 0) return 'اختر السنوات';\n    if (selectedYears.length === 1) return selectedYears[0].toString();\n    return `${selectedYears.length} سنة محددة`;\n  };\n\n  return (\n    <div className=\"glass-card rounded-2xl p-6 mb-6\" data-testid=\"month-filter\">\n      <div className=\"flex items-center justify-between gap-2 mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Calendar className=\"w-5 h-5 text-gray-700 dark:text-white\" />\n          <h3 className=\"text-lg font-bold text-gray-900 dark:text-white\">فلترة حسب الفترة الزمنية</h3>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={selectAllMonths}\n            data-testid=\"button-select-all-months\"\n          >\n            تحديد الكل\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={clearAllMonths}\n            data-testid=\"button-clear-all-months\"\n          >\n            إلغاء الكل\n          </Button>\n        </div>\n      </div>\n\n      {/* Year and Month Selection Side by Side */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Year Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-white mb-2\">السنوات</label>\n          <Popover open={yearsOpen} onOpenChange={setYearsOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={yearsOpen}\n                className=\"w-full justify-between bg-purple-600 text-white border-purple-700 hover:bg-purple-700\"\n                data-testid=\"button-year-dropdown\"\n              >\n                {getSelectedYearsText()}\n                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 text-white\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-full p-0\" align=\"start\">\n              <Command>\n                <CommandInput placeholder=\"ابحث عن سنة...\" data-testid=\"input-search-years\" />\n                <CommandList>\n                  <CommandEmpty>لا توجد نتائج</CommandEmpty>\n                  <CommandGroup>\n                    {years.map(year => {\n                      const isSelected = selectedYears.includes(year);\n                      return (\n                        <CommandItem\n                          key={year}\n                          value={year.toString()}\n                          onSelect={() => toggleYear(year)}\n                          data-testid={`button-year-${year}`}\n                        >\n                          <div className=\"flex items-center gap-2 w-full\">\n                            <div className={`flex h-4 w-4 items-center justify-center rounded border ${\n                              isSelected ? 'bg-primary border-primary' : 'border-input'\n                            }`}>\n                              {isSelected && <Check className=\"h-3 w-3 text-primary-foreground\" />}\n                            </div>\n                            <span>{year}</span>\n                          </div>\n                        </CommandItem>\n                      );\n                    })}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n\n        {/* Month Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-white mb-2\">الأشهر</label>\n          <Popover open={monthsOpen} onOpenChange={setMonthsOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={monthsOpen}\n                className=\"w-full justify-between\"\n                data-testid=\"button-month-dropdown\"\n              >\n                {getSelectedMonthsText()}\n                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-full p-0\" align=\"start\">\n              <Command>\n                <CommandInput placeholder=\"ابحث عن شهر...\" data-testid=\"input-search-months\" />\n                <CommandList>\n                  <CommandEmpty>لا توجد نتائج</CommandEmpty>\n                  <CommandGroup>\n                    {MONTHS.map(month => {\n                      const isSelected = selectedMonths.includes(month.value);\n                      return (\n                        <CommandItem\n                          key={month.value}\n                          value={month.label}\n                          onSelect={() => toggleMonth(month.value)}\n                          data-testid={`button-month-${month.value}`}\n                        >\n                          <div className=\"flex items-center gap-2 w-full\">\n                            <div className={`flex h-4 w-4 items-center justify-center rounded border ${\n                              isSelected ? 'bg-primary border-primary' : 'border-input'\n                            }`}>\n                              {isSelected && <Check className=\"h-3 w-3 text-primary-foreground\" />}\n                            </div>\n                            <span>{month.label}</span>\n                          </div>\n                        </CommandItem>\n                      );\n                    })}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8120},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"replit.md":{"content":"# School Management Dashboard\n\n## Overview\n\nThis project is a comprehensive Arabic-first school management system designed for \"مدرسة النور الأهلية\" (Al-Noor Private School). It provides a full-stack solution for managing students, teachers, classes, grades, attendance, payments, and communications. The system features a modern glass-morphism UI, is optimized for RTL (right-to-left) Arabic layouts, and supports multi-currency financial operations. Its core purpose is to streamline administrative tasks and enhance communication within the school environment.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### UI/UX Decisions\n\nThe application features a modern glass-morphism design with translucent cards, backdrop blur effects, and vibrant gradient accents. It supports both light and dark modes with theme persistence via localStorage. The design is RTL-first, optimized for Arabic text rendering using the Cairo font family. A responsive grid ensures consistent layout across devices, complemented by a fixed 320px sidebar navigation. Key UI patterns include dialog-based forms for CRUD operations, real-time data fetching, and toast notifications.\n\n**Dark Mode Implementation:**\n- Full dark mode support with semantic color tokens\n- Theme toggle button in dashboard header\n- CSS variables defined in `index.css` for both `:root` (light) and `.dark` (dark mode)\n- ThemeContext manages theme state with localStorage persistence\n- All components use semantic tokens (bg-background, text-foreground, etc.) for automatic theme adaptation\n- Dark mode colors: Deep blue-gray backgrounds (--background: 220 15% 12%) with light text for optimal contrast\n\n### Technical Implementations\n\n**Frontend:**\n- **Framework:** React with TypeScript, using Vite for fast development and Wouter for client-side routing.\n- **Styling:** Tailwind CSS with custom RTL configuration and Shadcn/ui components for accessible UI.\n- **State Management:** TanStack Query for server state, React Context API for global settings (e.g., dynamic currency, theme), and React Hook Form with Zod for form handling and validation.\n- **Localization:** Arabic-first design with comprehensive country code selector for phone numbers supporting bilingual search.\n- **Educational Structure:** Implements a hierarchical education structure (Education Level, Grade, Section) with cascading filters and selectors.\n- **Student Management:** Features include student enrollment, grade and attendance tracking, and a delete confirmation dialog with cascade delete for all related records.\n- **Teacher Management:** Includes attendance tracking with automatic salary deductions for unpaid leave.\n\n**Backend:**\n- **Server:** Express.js with TypeScript and ESM.\n- **API Design:** RESTful endpoints with Zod schemas for request validation, centralized error handling, and CORS.\n- **Database:** PostgreSQL accessed via Drizzle ORM for type-safe queries and schema management, with Neon Serverless for cloud deployment.\n- **Authentication:** Passport.js with Local Strategy for secure login, express-session with PostgreSQL store for session management, and scrypt for password hashing.\n- **Data Models:** Comprehensive models for Users, Students, Teachers, Education Levels, Classes, Subjects, Grades, Attendance, Payments, Student Accounts, Payment Transactions, Teacher Salaries, Teacher Advances, School Expenses, and Notifications.\n- **Financials:** Dynamic multi-currency support with automatic updates across the system, configurable via school settings.\n- **Teacher Attendance:** Tracks various statuses (present, absent, paid/unpaid leave, sick leave) and automatically calculates salary deductions.\n\n### Feature Specifications\n\n- **Authentication System:** Secure role-based access control with three user types:\n  - **Admin (إدارة المدرسة):** Full system access to all features and data\n  - **Teacher (المعلمين):** Access to add grades for their assigned students\n  - **Parent (الأهالي):** View-only access to their children's reports and grades\n- **Multi-currency Support:** Dynamic currency selection (SAR, EGP, AED) affecting all financial displays.\n- **Hierarchical Education:** Manages Education Levels, Grades, and Sections with cascading UI elements.\n- **Student Management:** Full CRUD for students, linked to classes and education levels, with cascade deletion for all associated data.\n- **Teacher Attendance & Payroll:** Detailed teacher attendance tracking integrated with automatic salary deductions for unpaid leave.\n- **Comprehensive Financials:** Tracks student payments, teacher salaries, advances, and school expenses.\n- **PDF Generation:** Utilizes `html2pdf.js` for generating student grade reports with Arabic/RTL support.\n\n## External Dependencies\n\n- **Database:** `@neondatabase/serverless`, `drizzle-orm`, `drizzle-zod`\n- **Frontend Framework:** `react`, `react-dom`, `wouter`\n- **Backend Framework:** `express`\n- **Authentication:** `passport`, `passport-local`, `express-session`, `connect-pg-simple`\n- **State Management:** `@tanstack/react-query`\n- **UI Components & Styling:** `@radix-ui/*`, `tailwindcss`, `class-variance-authority`, `lucide-react`, `embla-carousel-react`\n- **Form & Validation:** `react-hook-form`, `@hookform/resolvers`, `zod`\n- **Build Tools:** `vite`, `tsx`, `esbuild`, `@replit/vite-plugin-*`\n- **Date Handling:** `date-fns`\n- **PDF Generation:** `html2pdf.js`","size_bytes":5478},"client/src/contexts/SidebarContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface SidebarContextType {\n  isCollapsed: boolean;\n  toggleSidebar: () => void;\n  sidebarWidth: string;\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined);\n\nexport function SidebarProvider({ children }: { children: ReactNode }) {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const toggleSidebar = () => {\n    setIsCollapsed(prev => !prev);\n  };\n\n  const sidebarWidth = isCollapsed ? 'w-20' : 'w-80';\n\n  return (\n    <SidebarContext.Provider value={{ isCollapsed, toggleSidebar, sidebarWidth }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n}\n\nexport function useSidebar() {\n  const context = useContext(SidebarContext);\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider');\n  }\n  return context;\n}\n","size_bytes":880},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"README_DOWNLOAD.md":{"content":"# 📦 حزمة النشر الجاهزة - نظام إدارة المدرسة\n\n## ✅ تم التجهيز بنجاح!\n\nتم إنشاء حزمة النشر الكاملة في الملف:\n**`school-management-deployment.tar.gz`** (667 KB)\n\n---\n\n## 📁 محتويات الحزمة\n\n### ✅ الملفات المضمنة:\n\n1. **`dist/`** - المشروع المبني للإنتاج (93.6 KB)\n   - `dist/index.js` - ملف السيرفر الرئيسي\n   - `dist/public/` - ملفات الواجهة الأمامية (React)\n\n2. **`database_backup.sql`** (54 KB، 1011 سطر)\n   - نسخة احتياطية كاملة من قاعدة البيانات PostgreSQL\n   - تحتوي على جميع الجداول والبيانات\n   - جاهزة للاستيراد مباشرة\n\n3. **`package.json` & `package-lock.json`**\n   - قائمة الحزم المطلوبة للتشغيل\n\n4. **`shared/schema.ts`**\n   - مخطط قاعدة البيانات (Drizzle ORM)\n\n5. **`.env.production.example`**\n   - ملف مثال لمتغيرات البيئة\n   - يحتوي على التعليمات\n\n6. **`DEPLOYMENT_INSTRUCTIONS_AR.md`**\n   - دليل كامل باللغة العربية خطوة بخطوة\n   - يشرح كيفية النشر على HestiaCP\n\n---\n\n## 🚀 كيفية استخدام الحزمة\n\n### الخطوة 1: تحميل الملف\nقم بتحميل الملف من Replit:\n- الملف موجود في المجلد الرئيسي للمشروع\n- اسم الملف: `school-management-deployment.tar.gz`\n- حمّله على جهازك\n\n### الخطوة 2: فك الضغط على السيرفر\n```bash\n# ارفع الملف إلى سيرفر HestiaCP ثم:\ntar -xzf school-management-deployment.tar.gz\ncd deployment_package\n```\n\n### الخطوة 3: اتبع التعليمات\nاقرأ الملف `DEPLOYMENT_INSTRUCTIONS_AR.md` لخطوات التنصيب الكاملة\n\n---\n\n## 📋 الخطوات السريعة (ملخص)\n\n1. **قاعدة البيانات:**\n   ```bash\n   createdb school_db\n   psql -U username -d school_db < database_backup.sql\n   ```\n\n2. **الحزم:**\n   ```bash\n   npm install --production\n   ```\n\n3. **البيئة:**\n   ```bash\n   cp .env.production.example .env\n   # عدّل .env بمعلومات قاعدة البيانات\n   ```\n\n4. **التشغيل:**\n   ```bash\n   npm install -g pm2\n   pm2 start dist/index.js --name school-app\n   ```\n\n---\n\n## 🔧 متطلبات السيرفر\n\n- ✅ Node.js 18 أو أحدث\n- ✅ PostgreSQL 14 أو أحدث  \n- ✅ على الأقل 1GB RAM\n- ✅ على الأقل 500MB مساحة تخزين\n\n---\n\n## 📞 الدعم\n\nللحصول على التعليمات الكاملة، افتح ملف:\n`DEPLOYMENT_INSTRUCTIONS_AR.md`\n\nيحتوي على:\n- شرح تفصيلي لكل خطوة\n- أمثلة على الأوامر\n- حل المشاكل الشائعة\n- إعدادات NGINX\n- إعدادات PM2 و systemd\n\n---\n\n## ⚠️ ملاحظات مهمة\n\n1. **غيّر SESSION_SECRET** في ملف `.env` لقيمة عشوائية آمنة\n2. **استخدم HTTPS** في الإنتاج\n3. **نسخ احتياطي دوري** لقاعدة البيانات\n4. تأكد من تحديث معلومات `DATABASE_URL` بشكل صحيح\n\n---\n\n✨ **المشروع جاهز للنشر على HestiaCP!**\n","size_bytes":3286},"upload-to-github.sh":{"content":"#!/bin/bash\n\necho \"🚀 رفع المشروع على GitHub\"\necho \"================================\"\necho \"\"\n\n# تحقق من وجود رابط GitHub\nif [ -z \"$1\" ]; then\n    echo \"❌ الرجاء إدخال رابط Repository من GitHub\"\n    echo \"\"\n    echo \"الاستخدام:\"\n    echo \"  ./upload-to-github.sh https://github.com/username/repo.git\"\n    echo \"\"\n    exit 1\nfi\n\nGITHUB_REPO=$1\n\necho \"📦 إضافة الملفات...\"\ngit add .\n\necho \"💾 حفظ التغييرات...\"\ngit commit -m \"Initial commit: School Management System\" || echo \"لا توجد تغييرات جديدة\"\n\necho \"🔗 ربط المشروع بـ GitHub...\"\ngit remote remove origin 2>/dev/null || true\ngit remote add origin $GITHUB_REPO\n\necho \"⬆️  رفع الملفات إلى GitHub...\"\ngit push -u origin main || git push -u origin master\n\necho \"\"\necho \"✅ ================================\"\necho \"✅  تم رفع المشروع بنجاح! 🎉\"\necho \"✅ ================================\"\necho \"\"\necho \"🌐 رابط المشروع: $GITHUB_REPO\"\necho \"\"\n","size_bytes":1058},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/StudentReportSection.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Student, Subject, Grade, StudentAccount, PaymentTransaction } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, Download, MessageCircle, User, BookOpen, Wallet, TrendingUp, TrendingDown, DollarSign } from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport html2pdf from 'html2pdf.js';\nimport { useSchoolSettings } from '@/contexts/SchoolSettingsContext';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface ChildReport {\n  student: Student;\n  grades: Grade[];\n  attendance: any[];\n  account?: StudentAccount;\n  transactions?: PaymentTransaction[];\n  relationship?: string;\n}\n\nexport default function StudentReportSection() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedStudent, setSelectedStudent] = useState<string>('');\n  const { settings, formatDate, currencySymbol } = useSchoolSettings();\n  const { user } = useAuth();\n\n  // For parents - fetch their children's reports\n  const { data: childrenReports = [] } = useQuery<ChildReport[]>({\n    queryKey: ['/api/my-children-reports'],\n    enabled: user?.role === 'parent',\n  });\n\n  // For admin/teacher - fetch all students\n  const { data: students = [] } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n    enabled: user?.role !== 'parent',\n  });\n\n  const { data: subjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/subjects'],\n  });\n\n  const { data: grades = [] } = useQuery<Grade[]>({\n    queryKey: ['/api/grades'],\n    enabled: user?.role !== 'parent',\n  });\n\n  // Determine which students list to use\n  const availableStudents = user?.role === 'parent' \n    ? childrenReports.map(r => r.student)\n    : students;\n\n  const filteredStudents = useMemo(() => {\n    if (!searchQuery) return availableStudents;\n    const query = searchQuery.toLowerCase();\n    return availableStudents.filter(student => \n      student.arabicName.toLowerCase().includes(query) ||\n      (student.nationalId && student.nationalId.toLowerCase().includes(query))\n    );\n  }, [availableStudents, searchQuery]);\n\n  const selectedStudentData = availableStudents.find(s => s.id === selectedStudent);\n  \n  // Get grades for selected student\n  const studentGrades = user?.role === 'parent'\n    ? (childrenReports.find(r => r.student.id === selectedStudent)?.grades || [])\n    : grades.filter(g => g.studentId === selectedStudent);\n\n  // Get financial data for selected student (parents only)\n  const studentAccount = childrenReports.find(r => r.student.id === selectedStudent)?.account;\n  const studentTransactions = childrenReports.find(r => r.student.id === selectedStudent)?.transactions || [];\n\n  // Group grades by subject and semester\n  const gradesBySubjectAndSemester = useMemo(() => {\n    const grouped: Record<string, Record<string, Grade[]>> = {};\n    \n    studentGrades.forEach(grade => {\n      if (!grouped[grade.subjectId]) {\n        grouped[grade.subjectId] = {};\n      }\n      if (!grouped[grade.subjectId][grade.semester]) {\n        grouped[grade.subjectId][grade.semester] = [];\n      }\n      grouped[grade.subjectId][grade.semester].push(grade);\n    });\n    \n    return grouped;\n  }, [studentGrades]);\n\n  // Calculate average per subject\n  const calculateSubjectAverage = (subjectId: string) => {\n    const subjectGrades = studentGrades.filter(g => g.subjectId === subjectId);\n    if (subjectGrades.length === 0) return 0;\n    \n    const total = subjectGrades.reduce((sum, grade) => {\n      const percentage = (parseFloat(grade.score) / parseFloat(grade.maxScore)) * 100;\n      return sum + percentage;\n    }, 0);\n    \n    return (total / subjectGrades.length).toFixed(1);\n  };\n\n  // Calculate total average\n  const calculateTotalAverage = () => {\n    if (studentGrades.length === 0) return 0;\n    \n    const total = studentGrades.reduce((sum, grade) => {\n      const percentage = (parseFloat(grade.score) / parseFloat(grade.maxScore)) * 100;\n      return sum + percentage;\n    }, 0);\n    \n    return (total / studentGrades.length).toFixed(1);\n  };\n\n  const handleDownloadPDF = () => {\n    if (!selectedStudentData || !settings) return;\n    \n    const totalAverage = parseFloat(calculateTotalAverage() || '0');\n    \n    // تحديد رسالة تحفيزية بناءً على المعدل\n    let motivationalMessage = '';\n    if (totalAverage >= 90) {\n      motivationalMessage = 'أداء ممتاز ومتميز! نفخر بك ونتمنى لك مزيداً من التفوق والنجاح.';\n    } else if (totalAverage >= 80) {\n      motivationalMessage = 'أداء جيد جداً! استمر في الاجتهاد ونحن واثقون من قدرتك على تحقيق المزيد.';\n    } else if (totalAverage >= 70) {\n      motivationalMessage = 'أداء جيد. مع المزيد من الجهد والتركيز، يمكنك تحقيق نتائج أفضل بإذن الله.';\n    } else if (totalAverage >= 60) {\n      motivationalMessage = 'نشجعك على بذل المزيد من الجهد. نحن هنا لدعمك ومساعدتك في تحسين أدائك الدراسي.';\n    } else {\n      motivationalMessage = 'نحن نؤمن بقدراتك ونشجعك على الاستمرار. لا تيأس، فالنجاح يحتاج إلى مثابرة وجهد.';\n    }\n    \n    // إنشاء جداول منفصلة لكل مادة\n    let subjectTablesHTML = '';\n    \n    Object.entries(gradesBySubjectAndSemester).forEach(([subjectId, semesters]) => {\n      const subject = subjects.find(s => s.id === subjectId);\n      const subjectAvg = parseFloat(calculateSubjectAverage(subjectId) || '0');\n      const subjectAvgColor = subjectAvg >= 60 ? '#16a34a' : '#dc2626';\n      \n      let subjectRowsHTML = '';\n      \n      Object.entries(semesters).forEach(([semester, semesterGrades]) => {\n        semesterGrades.forEach((grade) => {\n          const percentage = (parseFloat(grade.score) / parseFloat(grade.maxScore)) * 100;\n          const percentageColor = percentage >= 60 ? '#16a34a' : '#dc2626';\n          subjectRowsHTML += `\n            <tr>\n              <td style=\"padding: 10px; text-align: right; border: 1px solid #e5e7eb;\">${semester}</td>\n              <td style=\"padding: 10px; text-align: right; border: 1px solid #e5e7eb;\">${grade.assessmentType}</td>\n              <td style=\"padding: 10px; text-align: center; border: 1px solid #e5e7eb;\">${grade.score} / ${grade.maxScore}</td>\n              <td style=\"padding: 10px; text-align: center; border: 1px solid #e5e7eb; color: ${percentageColor}; font-weight: bold;\">${percentage.toFixed(1)}%</td>\n            </tr>\n          `;\n        });\n      });\n      \n      // جدول منفصل لكل مادة\n      subjectTablesHTML += `\n        <div style=\"margin-bottom: 25px; page-break-inside: avoid;\">\n          <h3 style=\"color: #1e40af; font-size: 16px; margin-bottom: 10px; font-weight: bold;\">\n            ${subject?.arabicName || 'مادة'}\n          </h3>\n          <table style=\"width: 100%; border-collapse: collapse; font-size: 13px; margin-bottom: 10px;\">\n            <thead>\n              <tr style=\"background-color: #3b82f6; color: white;\">\n                <th style=\"padding: 10px; text-align: right; border: 1px solid #3b82f6; width: 25%;\">الفصل</th>\n                <th style=\"padding: 10px; text-align: right; border: 1px solid #3b82f6; width: 30%;\">نوع التقييم</th>\n                <th style=\"padding: 10px; text-align: center; border: 1px solid #3b82f6; width: 25%;\">العلامة</th>\n                <th style=\"padding: 10px; text-align: center; border: 1px solid #3b82f6; width: 20%;\">النسبة</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${subjectRowsHTML}\n              <tr style=\"background-color: #f3f4f6; font-weight: bold;\">\n                <td colspan=\"3\" style=\"padding: 10px; text-align: right; border: 1px solid #e5e7eb;\">معدل المادة</td>\n                <td style=\"padding: 10px; text-align: center; border: 1px solid #e5e7eb; color: ${subjectAvgColor};\">${subjectAvg}%</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      `;\n    });\n    \n    const totalAvgColor = totalAverage >= 60 ? '#16a34a' : '#dc2626';\n    \n    // إنشاء HTML للتقرير\n    const htmlContent = `\n      <div dir=\"rtl\" style=\"font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 700px; margin: 0 auto; padding: 40px; background: white;\">\n        <!-- Logo --> \n        <div style=\"text-align: center; margin-bottom: 20px;\">\n          ${settings.logoUrl \n            ? `<img src=\"${settings.logoUrl}\" alt=\"شعار المدرسة\" style=\"width: 80px; height: 80px; object-fit: contain;\" />`\n            : `<div style=\"width: 80px; height: 80px; background: #3b82f6; border-radius: 50%; margin: 0 auto;\"></div>`\n          }\n        </div>\n        \n        <!-- Header -->\n        <h1 style=\"text-align: center; color: #1e40af; margin: 10px 0; font-size: 24px; font-weight: bold;\">\n          ${settings.schoolNameArabic || settings.schoolName || 'مدرسة النور الأهلية'}\n        </h1>\n        <h2 style=\"text-align: center; color: #374151; margin: 0 0 20px 0; font-size: 18px; font-weight: bold;\">\n          تقرير العلامات الأكاديمي\n        </h2>\n        \n        <hr style=\"border: none; border-top: 2px solid #3b82f6; margin: 20px 0;\" />\n        \n        <!-- Student Info -->\n        <div style=\"margin: 25px 0; display: flex; justify-content: space-between; gap: 20px;\">\n          <div style=\"flex: 1;\">\n            <div style=\"color: #6b7280; font-size: 12px; font-weight: bold; margin-bottom: 5px;\">اسم الطالب:</div>\n            <div style=\"color: #111827; font-size: 16px; font-weight: bold;\">\n              ${selectedStudentData.arabicName}\n            </div>\n          </div>\n          <div style=\"flex: 1; text-align: left;\">\n            <div style=\"color: #6b7280; font-size: 12px; font-weight: bold; margin-bottom: 5px;\">الرقم الوطني:</div>\n            <div style=\"color: #111827; font-size: 16px; font-weight: bold;\">\n              ${selectedStudentData.nationalId || '-'}\n            </div>\n          </div>\n        </div>\n        \n        <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 20px 0;\" />\n        \n        <!-- Subject Tables -->\n        <div style=\"margin: 25px 0;\">\n          ${subjectTablesHTML}\n        </div>\n        \n        <!-- Total Average -->\n        <div style=\"margin: 30px 0; text-align: center;\">\n          <div style=\"display: inline-block; border: 2px solid #3b82f6; padding: 15px 40px; background: #f0f9ff; border-radius: 8px;\">\n            <span style=\"font-size: 16px; font-weight: bold; margin-left: 15px;\">المعدل العام:</span>\n            <span style=\"font-size: 22px; font-weight: bold; color: ${totalAvgColor};\">${totalAverage.toFixed(1)}%</span>\n          </div>\n        </div>\n        \n        <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\" />\n        \n        <!-- Motivational Message -->\n        <div style=\"margin: 25px 0; background: #f9fafb; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"text-align: center; color: #1e40af; font-size: 16px; margin: 0 0 15px 0; font-weight: bold;\">رسالة تحفيزية</h3>\n          <p style=\"text-align: justify; color: #374151; line-height: 1.8; font-style: italic; margin: 0;\">\n            ${motivationalMessage}\n          </p>\n        </div>\n        \n        <!-- Footer -->\n        <div style=\"text-align: center; color: #9ca3af; font-size: 11px; margin-top: 40px;\">\n          تاريخ التقرير: ${formatDate(new Date().toISOString())}\n        </div>\n      </div>\n    `;\n    \n    // إنشاء عنصر مؤقت\n    const element = document.createElement('div');\n    element.innerHTML = htmlContent;\n    document.body.appendChild(element);\n    \n    // تحويل إلى PDF\n    const opt = {\n      margin: 10,\n      filename: `تقرير_${selectedStudentData.arabicName}.pdf`,\n      image: { type: 'jpeg' as const, quality: 0.98 },\n      html2canvas: { scale: 2, useCORS: true },\n      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' as const }\n    };\n    \n    html2pdf().set(opt).from(element).save().then(() => {\n      document.body.removeChild(element);\n    });\n  };\n\n  const handleSendWhatsApp = () => {\n    if (!selectedStudentData) return;\n    \n    let message = `السلام عليكم\\nتقرير علامات الطالب/ة: ${selectedStudentData.arabicName}\\n\\n`;\n    \n    Object.entries(gradesBySubjectAndSemester).forEach(([subjectId, semesters]) => {\n      const subject = subjects.find(s => s.id === subjectId);\n      message += `📚 ${subject?.arabicName || 'مادة'}:\\n`;\n      \n      Object.entries(semesters).forEach(([semester, grades]) => {\n        message += `   ${semester}:\\n`;\n        grades.forEach(grade => {\n          message += `   • ${grade.assessmentType}: ${grade.score}/${grade.maxScore}\\n`;\n        });\n      });\n      message += `   المعدل: ${calculateSubjectAverage(subjectId)}%\\n\\n`;\n    });\n    \n    message += `📊 المعدل العام: ${calculateTotalAverage()}%`;\n    \n    const phoneNumber = selectedStudentData.parentPhone.replace(/\\D/g, '');\n    const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;\n    window.open(whatsappUrl, '_blank');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            {user?.role === 'parent' ? 'تقارير الأبناء' : 'البحث عن طالب'}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <Input\n                type=\"text\"\n                placeholder={user?.role === 'parent' ? 'ابحث عن ابنك...' : 'ابحث باسم الطالب أو الرقم الوطني...'}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search-student\"\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"w-96\">\n              <Select value={selectedStudent} onValueChange={setSelectedStudent}>\n                <SelectTrigger data-testid=\"select-student-report\">\n                  <SelectValue placeholder={user?.role === 'parent' ? 'اختر الطالب' : 'أو اختر من القائمة'} />\n                </SelectTrigger>\n                <SelectContent>\n                  {filteredStudents.map((student) => (\n                    <SelectItem key={student.id} value={student.id}>\n                      {student.arabicName} {student.nationalId && `- ${student.nationalId}`}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Student Info & Actions */}\n      {selectedStudentData && (\n        <>\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n                <div className=\"flex items-center gap-3\">\n                  <User className=\"h-6 w-6 text-primary\" />\n                  <div>\n                    <CardTitle className=\"text-2xl\">{selectedStudentData.arabicName}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      الرقم الوطني: {selectedStudentData.nationalId || '-'}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={handleDownloadPDF}\n                    disabled={studentGrades.length === 0}\n                    data-testid=\"button-download-report\"\n                    variant=\"outline\"\n                  >\n                    <Download className=\"h-4 w-4 ml-2\" />\n                    تحميل التقرير\n                  </Button>\n                  {user?.role !== 'parent' && (\n                    <Button\n                      onClick={handleSendWhatsApp}\n                      disabled={studentGrades.length === 0}\n                      data-testid=\"button-send-whatsapp\"\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                    >\n                      <MessageCircle className=\"h-4 w-4 ml-2\" />\n                      إرسال لولي الأمر\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {studentGrades.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  لا توجد علامات مسجلة لهذا الطالب\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {/* Overall Average */}\n                  <div className=\"flex items-center justify-center gap-4 p-4 bg-primary/10 rounded-lg\">\n                    <BookOpen className=\"h-6 w-6 text-primary\" />\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-muted-foreground\">المعدل العام</p>\n                      <p className=\"text-3xl font-bold text-primary\">{calculateTotalAverage()}%</p>\n                    </div>\n                  </div>\n\n                  {/* Grades by Subject */}\n                  {Object.entries(gradesBySubjectAndSemester).map(([subjectId, semesters]) => {\n                    const subject = subjects.find(s => s.id === subjectId);\n                    \n                    return (\n                      <div key={subjectId} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                            <BookOpen className=\"h-5 w-5 text-primary\" />\n                            {subject?.arabicName || 'مادة'}\n                          </h3>\n                          <Badge variant=\"secondary\" className=\"text-lg\">\n                            المعدل: {calculateSubjectAverage(subjectId)}%\n                          </Badge>\n                        </div>\n\n                        {Object.entries(semesters).map(([semester, semesterGrades]) => (\n                          <div key={semester} className=\"mb-4 last:mb-0\">\n                            <p className=\"font-semibold mb-2 text-muted-foreground\">{semester}</p>\n                            <Table>\n                              <TableHeader>\n                                <TableRow>\n                                  <TableHead className=\"text-right\">نوع التقييم</TableHead>\n                                  <TableHead className=\"text-center\">العلامة</TableHead>\n                                  <TableHead className=\"text-center\">النسبة المئوية</TableHead>\n                                  <TableHead className=\"text-right\">التاريخ</TableHead>\n                                </TableRow>\n                              </TableHeader>\n                              <TableBody>\n                                {semesterGrades.map((grade) => {\n                                  const percentage = (parseFloat(grade.score) / parseFloat(grade.maxScore)) * 100;\n                                  return (\n                                    <TableRow key={grade.id}>\n                                      <TableCell className=\"font-medium\">{grade.assessmentType}</TableCell>\n                                      <TableCell className=\"text-center\">\n                                        {grade.score} / {grade.maxScore}\n                                      </TableCell>\n                                      <TableCell className=\"text-center\">\n                                        <Badge variant={percentage >= 60 ? 'default' : 'destructive'}>\n                                          {percentage.toFixed(1)}%\n                                        </Badge>\n                                      </TableCell>\n                                      <TableCell>\n                                        {formatDate(grade.date)}\n                                      </TableCell>\n                                    </TableRow>\n                                  );\n                                })}\n                              </TableBody>\n                            </Table>\n                          </div>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Financial Report - For Parents Only */}\n          {user?.role === 'parent' && studentAccount && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Wallet className=\"h-5 w-5\" />\n                  التقرير المالي\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                  {/* Total Amount Due */}\n                  <div className=\"bg-blue-50 border-2 border-blue-200 rounded-xl p-6\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                      <div className=\"text-blue-600 text-sm font-semibold\">إجمالي المستحقات</div>\n                    </div>\n                    <p className=\"text-3xl font-bold text-blue-900\">\n                      {parseFloat(studentAccount.totalAmountDue || '0').toLocaleString()} {currencySymbol}\n                    </p>\n                  </div>\n\n                  {/* Total Paid */}\n                  <div className=\"bg-green-50 border-2 border-green-200 rounded-xl p-6\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <TrendingUp className=\"h-8 w-8 text-green-600\" />\n                      <div className=\"text-green-600 text-sm font-semibold\">إجمالي المدفوع</div>\n                    </div>\n                    <p className=\"text-3xl font-bold text-green-900\">\n                      {parseFloat(studentAccount.totalPaid || '0').toLocaleString()} {currencySymbol}\n                    </p>\n                  </div>\n\n                  {/* Current Balance */}\n                  <div className={`${parseFloat(studentAccount.currentBalance || '0') > 0 ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200'} border-2 rounded-xl p-6`}>\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <TrendingDown className={`h-8 w-8 ${parseFloat(studentAccount.currentBalance || '0') > 0 ? 'text-red-600' : 'text-gray-600'}`} />\n                      <div className={`text-sm font-semibold ${parseFloat(studentAccount.currentBalance || '0') > 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                        الرصيد المتبقي\n                      </div>\n                    </div>\n                    <p className={`text-3xl font-bold ${parseFloat(studentAccount.currentBalance || '0') > 0 ? 'text-red-900 dark:text-red-300' : 'text-gray-900 dark:text-white'}`}>\n                      {parseFloat(studentAccount.currentBalance || '0').toLocaleString()} {currencySymbol}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Payment History */}\n                {studentTransactions.length > 0 && (\n                  <div className=\"mt-6\">\n                    <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                      <DollarSign className=\"h-5 w-5 text-primary\" />\n                      سجل الدفعات\n                    </h3>\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead className=\"text-right\">التاريخ</TableHead>\n                          <TableHead className=\"text-center\">المبلغ</TableHead>\n                          <TableHead className=\"text-right\">طريقة الدفع</TableHead>\n                          <TableHead className=\"text-right\">رقم الإيصال</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {studentTransactions.map((transaction) => (\n                          <TableRow key={transaction.id}>\n                            <TableCell>{formatDate(transaction.paymentDate)}</TableCell>\n                            <TableCell className=\"text-center font-bold text-green-700\">\n                              {parseFloat(transaction.amount).toLocaleString()} {currencySymbol}\n                            </TableCell>\n                            <TableCell>{transaction.paymentMethod || '-'}</TableCell>\n                            <TableCell>{transaction.receiptNumber || '-'}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n\n                {studentTransactions.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    لا يوجد سجل دفعات حالياً\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":26190},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    try {\n      const json = JSON.parse(text);\n      throw json;\n    } catch (e) {\n      throw new Error(`${res.status}: ${text}`);\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1474},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ClassesSection.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { EducationLevel, Class, Student, Subject, ClassSubject, Teacher } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ChevronLeft, Plus, Edit, Trash2, GraduationCap, Users, BookOpen, BookMarked } from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function ClassesSection() {\n  const { toast } = useToast();\n  const [selectedLevel, setSelectedLevel] = useState<EducationLevel | null>(null);\n  const [selectedGrade, setSelectedGrade] = useState<string | null>(null);\n  const [isAddLevelDialogOpen, setIsAddLevelDialogOpen] = useState(false);\n  const [isEditLevelDialogOpen, setIsEditLevelDialogOpen] = useState(false);\n  const [isAddGradeDialogOpen, setIsAddGradeDialogOpen] = useState(false);\n  const [isAddClassDialogOpen, setIsAddClassDialogOpen] = useState(false);\n  const [isEditClassDialogOpen, setIsEditClassDialogOpen] = useState(false);\n  const [editingLevel, setEditingLevel] = useState<EducationLevel | null>(null);\n  const [editingClass, setEditingClass] = useState<Class | null>(null);\n  const [isAddSubjectDialogOpen, setIsAddSubjectDialogOpen] = useState(false);\n  const [selectedGradeForSubject, setSelectedGradeForSubject] = useState<{ educationLevelId: string; grade: string } | null>(null);\n  \n  const [newLevel, setNewLevel] = useState({\n    name: '',\n    order: 1,\n  });\n\n  const [newGrade, setNewGrade] = useState({\n    grade: '',\n  });\n\n  const [newClass, setNewClass] = useState({\n    name: '',\n    grade: '',\n    section: '',\n    academicYear: '2024-2025',\n    capacity: 30,\n    roomNumber: '',\n    educationLevelId: '',\n  });\n\n  const [newClassSubject, setNewClassSubject] = useState({\n    educationLevelId: '',\n    grade: '',\n    subjectId: '',\n    teacherId: '',\n    weeklyHours: 2,\n  });\n\n  const { data: levels = [], isLoading: levelsLoading } = useQuery<EducationLevel[]>({\n    queryKey: ['/api/education-levels'],\n  });\n\n  const { data: allClasses = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: students = [] } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n  });\n\n  const { data: levelClasses = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes/level', selectedLevel?.id],\n    enabled: !!selectedLevel,\n  });\n\n  const { data: allSubjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/subjects'],\n  });\n\n  const { data: teachers = [] } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n  });\n\n  const { data: gradeSubjects = [] } = useQuery<ClassSubject[]>({\n    queryKey: ['/api/grade-subjects', selectedGradeForSubject?.educationLevelId, selectedGradeForSubject?.grade],\n    enabled: !!selectedGradeForSubject,\n  });\n\n  const createLevelMutation = useMutation({\n    mutationFn: async (data: typeof newLevel) => {\n      return await apiRequest('POST', '/api/education-levels', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/education-levels'] });\n      setIsAddLevelDialogOpen(false);\n      setNewLevel({ name: '', order: 1 });\n    },\n  });\n\n  const updateLevelMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<EducationLevel> }) => {\n      return await apiRequest('PATCH', `/api/education-levels/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/education-levels'] });\n      setIsEditLevelDialogOpen(false);\n      setEditingLevel(null);\n    },\n  });\n\n  const deleteLevelMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/education-levels/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/education-levels'] });\n      if (selectedLevel?.id === deleteLevelMutation.variables) {\n        setSelectedLevel(null);\n        setSelectedGrade(null);\n      }\n    },\n  });\n\n  const createGradeMutation = useMutation({\n    mutationFn: async (data: { grade: string; educationLevelId: string }) => {\n      const gradeData = {\n        name: `الصف ${data.grade} - شعبة أ`,\n        grade: data.grade,\n        section: 'أ',\n        academicYear: '2024-2025',\n        capacity: 30,\n        roomNumber: '',\n        educationLevelId: data.educationLevelId,\n      };\n      return await apiRequest('POST', '/api/classes', gradeData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes/level', selectedLevel?.id] });\n      setIsAddGradeDialogOpen(false);\n      setNewGrade({ grade: '' });\n    },\n  });\n\n  const createClassMutation = useMutation({\n    mutationFn: async (data: typeof newClass) => {\n      return await apiRequest('POST', '/api/classes', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes/level', selectedLevel?.id] });\n      setIsAddClassDialogOpen(false);\n      setNewClass({\n        name: '',\n        grade: '',\n        section: '',\n        academicYear: '2024-2025',\n        capacity: 30,\n        roomNumber: '',\n        educationLevelId: '',\n      });\n    },\n  });\n\n  const updateClassMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Class> }) => {\n      return await apiRequest('PATCH', `/api/classes/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes/level', selectedLevel?.id] });\n      setIsEditClassDialogOpen(false);\n      setEditingClass(null);\n    },\n  });\n\n  const deleteClassMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/classes/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes/level', selectedLevel?.id] });\n    },\n  });\n\n  const createClassSubjectMutation = useMutation({\n    mutationFn: async (data: typeof newClassSubject) => {\n      return await apiRequest('POST', '/api/class-subjects', data);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/grade-subjects', variables.educationLevelId, variables.grade] });\n      setIsAddSubjectDialogOpen(false);\n      setNewClassSubject({\n        educationLevelId: '',\n        grade: '',\n        subjectId: '',\n        teacherId: '',\n        weeklyHours: 2,\n      });\n      toast({\n        title: 'تم إضافة المادة',\n        description: 'تم إضافة المادة الدراسية للصف بنجاح',\n      });\n    },\n  });\n\n  const deleteClassSubjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/class-subjects/${id}`);\n    },\n    onSuccess: () => {\n      if (selectedGradeForSubject) {\n        queryClient.invalidateQueries({ queryKey: ['/api/grade-subjects', selectedGradeForSubject.educationLevelId, selectedGradeForSubject.grade] });\n      }\n      toast({\n        title: 'تم حذف المادة',\n        description: 'تم حذف المادة الدراسية من الصف بنجاح',\n      });\n    },\n  });\n\n  const handleLevelSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createLevelMutation.mutate(newLevel);\n  };\n\n  const handleEditLevelSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingLevel) {\n      updateLevelMutation.mutate({ id: editingLevel.id, data: editingLevel });\n    }\n  };\n\n  const handleGradeSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedLevel) {\n      createGradeMutation.mutate({\n        grade: newGrade.grade,\n        educationLevelId: selectedLevel.id,\n      });\n    }\n  };\n\n  const handleClassSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const classData = {\n      ...newClass,\n      name: `الصف ${newClass.grade} - شعبة ${newClass.section}`,\n    };\n    createClassMutation.mutate(classData);\n  };\n\n  const handleEditClassSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingClass) {\n      const updatedData = {\n        ...editingClass,\n        name: `الصف ${editingClass.grade} - شعبة ${editingClass.section}`,\n      };\n      updateClassMutation.mutate({ id: editingClass.id, data: updatedData });\n    }\n  };\n\n  const openEditLevelDialog = (level: EducationLevel) => {\n    setEditingLevel(level);\n    setIsEditLevelDialogOpen(true);\n  };\n\n  const openEditClassDialog = (classItem: Class) => {\n    setEditingClass(classItem);\n    setIsEditClassDialogOpen(true);\n  };\n\n  const openAddClassDialog = (level: EducationLevel, grade?: string) => {\n    setNewClass({ \n      ...newClass, \n      educationLevelId: level.id,\n      grade: grade || ''\n    });\n    setIsAddClassDialogOpen(true);\n  };\n\n  const openAddSubjectDialog = (educationLevelId: string, grade: string) => {\n    setSelectedGradeForSubject({ educationLevelId, grade });\n    setNewClassSubject({\n      ...newClassSubject,\n      educationLevelId,\n      grade,\n    });\n    setIsAddSubjectDialogOpen(true);\n  };\n\n  const handleAddSubjectSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const { teacherId, ...rest } = newClassSubject;\n    const subjectData = {\n      ...rest,\n      ...(teacherId && teacherId !== 'none' ? { teacherId } : {}),\n    };\n    createClassSubjectMutation.mutate(subjectData as any);\n  };\n\n  const handleDeleteLevel = (levelId: string) => {\n    const levelClasses = getClassesForLevel(levelId);\n    if (levelClasses.length > 0) {\n      toast({\n        title: 'لا يمكن الحذف',\n        description: `لا يمكن حذف المرحلة لأنها تحتوي على ${levelClasses.length} صف. يرجى حذف الصفوف أولاً.`,\n        variant: 'destructive',\n      });\n      return;\n    }\n    deleteLevelMutation.mutate(levelId);\n  };\n\n  const getClassesForLevel = (levelId: string) => {\n    return allClasses.filter(c => c.educationLevelId === levelId);\n  };\n\n  const getGradesForLevel = (levelId: string) => {\n    const classes = getClassesForLevel(levelId);\n    const grades = new Set(classes.map(c => c.grade));\n    return Array.from(grades).sort();\n  };\n\n  const getSectionsForGrade = (levelId: string, grade: string) => {\n    return allClasses.filter(c => c.educationLevelId === levelId && c.grade === grade);\n  };\n\n  const getStudentsForClass = (classId: string) => {\n    return students.filter(s => s.classId === classId);\n  };\n\n  const getSubjectsForGrade = (educationLevelId: string, grade: string) => {\n    return gradeSubjects.filter(cs => cs.educationLevelId === educationLevelId && cs.grade === grade);\n  };\n\n  const totalClasses = allClasses.length;\n  const totalStudents = students.length;\n  const totalCapacity = allClasses.reduce((sum, c) => sum + (c.capacity || 0), 0);\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">المراحل الدراسية والصفوف</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">إدارة المراحل الدراسية والصفوف والشعب</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm font-bold mb-2\">المراحل الدراسية</p>\n                <p className=\"text-3xl font-bold text-primary\">{levels.length}</p>\n              </div>\n              <div className=\"text-4xl\">🏛️</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm font-bold mb-2\">إجمالي الصفوف</p>\n                <p className=\"text-3xl font-bold text-primary\">{totalClasses}</p>\n              </div>\n              <div className=\"text-4xl\">📚</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm font-bold mb-2\">إجمالي الطلاب</p>\n                <p className=\"text-3xl font-bold text-primary\">{totalStudents}</p>\n              </div>\n              <div className=\"text-4xl\">👥</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm font-bold mb-2\">السعة الإجمالية</p>\n                <p className=\"text-3xl font-bold text-primary\">{totalCapacity}</p>\n              </div>\n              <div className=\"text-4xl\">🏫</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {!selectedLevel ? (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <span className=\"text-2xl\">🏛️</span>\n              المراحل الدراسية\n            </CardTitle>\n            <Dialog open={isAddLevelDialogOpen} onOpenChange={setIsAddLevelDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-level\">\n                  <Plus className=\"h-4 w-4 ml-2\" />\n                  إضافة مرحلة دراسية\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>إضافة مرحلة دراسية جديدة</DialogTitle>\n                  <DialogDescription>أدخل بيانات المرحلة الدراسية الجديدة</DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleLevelSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label>اسم المرحلة</Label>\n                    <Input\n                      value={newLevel.name}\n                      onChange={(e) => setNewLevel({ ...newLevel, name: e.target.value })}\n                      placeholder=\"مثال: المرحلة الابتدائية\"\n                      required\n                      data-testid=\"input-level-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label>الترتيب</Label>\n                    <Input\n                      type=\"number\"\n                      value={newLevel.order}\n                      onChange={(e) => setNewLevel({ ...newLevel, order: parseInt(e.target.value) })}\n                      min=\"1\"\n                      required\n                      data-testid=\"input-level-order\"\n                    />\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\" disabled={createLevelMutation.isPending} data-testid=\"button-submit-level\">\n                    {createLevelMutation.isPending ? 'جاري الإضافة...' : 'إضافة المرحلة'}\n                  </Button>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </CardHeader>\n          <CardContent>\n            {levelsLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">جاري التحميل...</div>\n            ) : levels.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">لا توجد مراحل دراسية</div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {levels.map((level) => {\n                  const levelClasses = getClassesForLevel(level.id);\n                  const levelStudents = levelClasses.reduce(\n                    (sum, c) => sum + getStudentsForClass(c.id).length,\n                    0\n                  );\n                  return (\n                    <Card \n                      key={level.id} \n                      className=\"hover-elevate active-elevate-2 cursor-pointer\"\n                      onClick={() => {\n                        setSelectedLevel(level);\n                        setSelectedGrade(null);\n                      }}\n                      data-testid={`card-level-${level.id}`}\n                    >\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex justify-between items-start gap-2\">\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-lg\">{level.name}</CardTitle>\n                          </div>\n                          <ChevronLeft className=\"h-5 w-5 text-muted-foreground\" />\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex gap-4 mb-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm\">{levelClasses.length} صف</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Users className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm\">{levelStudents} طالب</span>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\" onClick={(e) => e.stopPropagation()}>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => openEditLevelDialog(level)}\n                            data-testid={`button-edit-level-${level.id}`}\n                          >\n                            <Edit className=\"h-3 w-3 ml-1\" />\n                            تعديل\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleDeleteLevel(level.id)}\n                            disabled={deleteLevelMutation.isPending}\n                            data-testid={`button-delete-level-${level.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3 ml-1\" />\n                            حذف\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ) : !selectedGrade ? (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => {\n                  setSelectedLevel(null);\n                  setSelectedGrade(null);\n                }}\n                data-testid=\"button-back-to-levels\"\n              >\n                <ChevronLeft className=\"h-4 w-4 rotate-180 ml-1\" />\n                رجوع للمراحل\n              </Button>\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  {selectedLevel.name} - الصفوف الدراسية\n                </CardTitle>\n              </div>\n            </div>\n            <Button onClick={() => setIsAddGradeDialogOpen(true)} data-testid=\"button-add-grade\">\n              <Plus className=\"h-4 w-4 ml-2\" />\n              إضافة صف\n            </Button>\n          </CardHeader>\n          <CardContent>\n            {getGradesForLevel(selectedLevel.id).length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">لا توجد صفوف في هذه المرحلة</div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {getGradesForLevel(selectedLevel.id).map((grade) => {\n                  const gradeSections = getSectionsForGrade(selectedLevel.id, grade);\n                  const gradeStudents = gradeSections.reduce(\n                    (sum, section) => sum + getStudentsForClass(section.id).length,\n                    0\n                  );\n                  return (\n                    <Card \n                      key={grade} \n                      className=\"hover-elevate active-elevate-2 cursor-pointer\"\n                      onClick={() => setSelectedGrade(grade)}\n                      data-testid={`card-grade-${grade}`}\n                    >\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex justify-between items-start gap-2\">\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-lg\">الصف {grade}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {gradeSections.length} شعبة\n                            </p>\n                          </div>\n                          <ChevronLeft className=\"h-5 w-5 text-muted-foreground\" />\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex gap-4 mb-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <Users className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm\">{gradeStudents} طالب</span>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\" onClick={(e) => e.stopPropagation()}>\n                          <Button\n                            size=\"sm\"\n                            variant=\"default\"\n                            className=\"w-full\"\n                            onClick={() => openAddSubjectDialog(selectedLevel.id, grade)}\n                            data-testid={`button-manage-subjects-${grade}`}\n                          >\n                            <BookMarked className=\"h-3 w-3 ml-1\" />\n                            إدارة المواد ({getSubjectsForGrade(selectedLevel.id, grade).length})\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => setSelectedGrade(null)}\n                data-testid=\"button-back-to-grades\"\n              >\n                <ChevronLeft className=\"h-4 w-4 rotate-180 ml-1\" />\n                رجوع للصفوف\n              </Button>\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  {selectedLevel.name} - الصف {selectedGrade}\n                </CardTitle>\n              </div>\n            </div>\n            <Button onClick={() => openAddClassDialog(selectedLevel, selectedGrade)} data-testid=\"button-add-section\">\n              <Plus className=\"h-4 w-4 ml-2\" />\n              إضافة شعبة\n            </Button>\n          </CardHeader>\n          <CardContent>\n            {getSectionsForGrade(selectedLevel.id, selectedGrade).length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">لا توجد شعب في هذا الصف</div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {getSectionsForGrade(selectedLevel.id, selectedGrade).map((section) => {\n                  const sectionStudents = getStudentsForClass(section.id);\n                  return (\n                    <Card key={section.id} data-testid={`card-section-${section.id}`}>\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex justify-between items-start gap-2\">\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-base\">الشعبة {section.section}</CardTitle>\n                          </div>\n                          <Badge variant=\"secondary\">\n                            {sectionStudents.length}/{section.capacity}\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2 mb-4\">\n                          <div className=\"text-xs text-muted-foreground\">\n                            {section.roomNumber ? `قاعة ${section.roomNumber}` : 'بدون قاعة'}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            العام الدراسي: {section.academicYear}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => openEditClassDialog(section)}\n                            data-testid={`button-edit-section-${section.id}`}\n                          >\n                            <Edit className=\"h-3 w-3 ml-1\" />\n                            تعديل\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteClassMutation.mutate(section.id)}\n                            disabled={deleteClassMutation.isPending}\n                            data-testid={`button-delete-section-${section.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3 ml-1\" />\n                            حذف\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Edit Level Dialog */}\n      <Dialog open={isEditLevelDialogOpen} onOpenChange={setIsEditLevelDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>تعديل المرحلة الدراسية</DialogTitle>\n            <DialogDescription>قم بتعديل بيانات المرحلة الدراسية</DialogDescription>\n          </DialogHeader>\n          {editingLevel && (\n            <form onSubmit={handleEditLevelSubmit} className=\"space-y-4\">\n              <div>\n                <Label>اسم المرحلة</Label>\n                <Input\n                  value={editingLevel.name}\n                  onChange={(e) => setEditingLevel({ ...editingLevel, name: e.target.value })}\n                  required\n                  data-testid=\"input-edit-level-name\"\n                />\n              </div>\n              <div>\n                <Label>الترتيب</Label>\n                <Input\n                  type=\"number\"\n                  value={editingLevel.order}\n                  onChange={(e) => setEditingLevel({ ...editingLevel, order: parseInt(e.target.value) })}\n                  min=\"1\"\n                  required\n                  data-testid=\"input-edit-level-order\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={updateLevelMutation.isPending} data-testid=\"button-submit-edit-level\">\n                {updateLevelMutation.isPending ? 'جاري الحفظ...' : 'حفظ التعديلات'}\n              </Button>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Grade Dialog */}\n      <Dialog open={isAddGradeDialogOpen} onOpenChange={setIsAddGradeDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>إضافة صف دراسي جديد</DialogTitle>\n            <DialogDescription>أدخل اسم الصف الدراسي الجديد (سيتم إنشاء شعبة أ تلقائياً)</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleGradeSubmit} className=\"space-y-4\">\n            <div>\n              <Label>اسم الصف الدراسي</Label>\n              <Input\n                value={newGrade.grade}\n                onChange={(e) => setNewGrade({ ...newGrade, grade: e.target.value })}\n                placeholder=\"مثال: الأول، الثاني، العاشر\"\n                required\n                data-testid=\"input-grade-name\"\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={createGradeMutation.isPending} data-testid=\"button-submit-grade\">\n              {createGradeMutation.isPending ? 'جاري الإضافة...' : 'إضافة الصف'}\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Class Dialog */}\n      <Dialog open={isAddClassDialogOpen} onOpenChange={setIsAddClassDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>إضافة شعبة جديدة</DialogTitle>\n            <DialogDescription>أدخل بيانات الشعبة الجديدة</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleClassSubmit} className=\"space-y-4\">\n            <div>\n              <Label>الشعبة</Label>\n              <Input\n                value={newClass.section}\n                onChange={(e) => setNewClass({ ...newClass, section: e.target.value })}\n                placeholder=\"مثال: أ، ب، ج\"\n                required\n                data-testid=\"input-class-section\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>العام الدراسي</Label>\n                <Input\n                  value={newClass.academicYear}\n                  onChange={(e) => setNewClass({ ...newClass, academicYear: e.target.value })}\n                  required\n                  data-testid=\"input-academic-year\"\n                />\n              </div>\n              <div>\n                <Label>رقم القاعة</Label>\n                <Input\n                  value={newClass.roomNumber}\n                  onChange={(e) => setNewClass({ ...newClass, roomNumber: e.target.value })}\n                  placeholder=\"اختياري\"\n                  data-testid=\"input-room-number\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label>السعة</Label>\n              <Input\n                type=\"number\"\n                value={newClass.capacity}\n                onChange={(e) => setNewClass({ ...newClass, capacity: parseInt(e.target.value) })}\n                required\n                data-testid=\"input-capacity\"\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={createClassMutation.isPending} data-testid=\"button-submit-class\">\n              {createClassMutation.isPending ? 'جاري الإضافة...' : 'إضافة الشعبة'}\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Class Dialog */}\n      <Dialog open={isEditClassDialogOpen} onOpenChange={setIsEditClassDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>تعديل الشعبة</DialogTitle>\n            <DialogDescription>قم بتعديل بيانات الشعبة</DialogDescription>\n          </DialogHeader>\n          {editingClass && (\n            <form onSubmit={handleEditClassSubmit} className=\"space-y-4\">\n              <div>\n                <Label>الشعبة</Label>\n                <Input\n                  value={editingClass.section || ''}\n                  onChange={(e) => setEditingClass({ ...editingClass, section: e.target.value })}\n                  required\n                  data-testid=\"input-edit-class-section\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>العام الدراسي</Label>\n                  <Input\n                    value={editingClass.academicYear || ''}\n                    onChange={(e) => setEditingClass({ ...editingClass, academicYear: e.target.value })}\n                    required\n                    data-testid=\"input-edit-academic-year\"\n                  />\n                </div>\n                <div>\n                  <Label>رقم القاعة</Label>\n                  <Input\n                    value={editingClass.roomNumber || ''}\n                    onChange={(e) => setEditingClass({ ...editingClass, roomNumber: e.target.value })}\n                    data-testid=\"input-edit-room-number\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label>السعة</Label>\n                <Input\n                  type=\"number\"\n                  value={editingClass.capacity || 30}\n                  onChange={(e) => setEditingClass({ ...editingClass, capacity: parseInt(e.target.value) })}\n                  required\n                  data-testid=\"input-edit-capacity\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={updateClassMutation.isPending} data-testid=\"button-submit-edit-class\">\n                {updateClassMutation.isPending ? 'جاري الحفظ...' : 'حفظ التعديلات'}\n              </Button>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Manage Subjects Dialog */}\n      <Dialog open={isAddSubjectDialogOpen} onOpenChange={setIsAddSubjectDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <BookMarked className=\"h-5 w-5\" />\n              إدارة المواد الدراسية\n            </DialogTitle>\n            <DialogDescription>\n              {selectedGradeForSubject && selectedLevel && `${selectedLevel.name} - الصف ${selectedGradeForSubject.grade}`}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedGradeForSubject && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4\">المواد الحالية</h3>\n                {getSubjectsForGrade(selectedGradeForSubject.educationLevelId, selectedGradeForSubject.grade).length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground border border-dashed rounded-md\">\n                    لا توجد مواد دراسية مضافة لهذا الصف\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {getSubjectsForGrade(selectedGradeForSubject.educationLevelId, selectedGradeForSubject.grade).map((classSubject) => {\n                      const subject = allSubjects.find(s => s.id === classSubject.subjectId);\n                      const teacher = teachers.find(t => t.id === classSubject.teacherId);\n                      return (\n                        <Card key={classSubject.id} data-testid={`card-subject-${classSubject.id}`}>\n                          <CardContent className=\"py-3\">\n                            <div className=\"flex items-center justify-between gap-2\">\n                              <div className=\"flex-1\">\n                                <div className=\"font-semibold\">{subject?.name || 'مادة غير معروفة'}</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {teacher ? `المعلم: ${teacher.arabicName}` : 'بدون معلم'} • {classSubject.weeklyHours} ساعات أسبوعياً\n                                </div>\n                              </div>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => deleteClassSubjectMutation.mutate(classSubject.id)}\n                                disabled={deleteClassSubjectMutation.isPending}\n                                data-testid={`button-delete-subject-${classSubject.id}`}\n                              >\n                                <Trash2 className=\"h-3 w-3 ml-1\" />\n                                حذف\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <h3 className=\"text-lg font-semibold mb-4\">إضافة مادة جديدة</h3>\n                <form onSubmit={handleAddSubjectSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label>المادة الدراسية</Label>\n                    <Select\n                      value={newClassSubject.subjectId}\n                      onValueChange={(value) => setNewClassSubject({ ...newClassSubject, subjectId: value })}\n                      required\n                    >\n                      <SelectTrigger data-testid=\"select-subject\">\n                        <SelectValue placeholder=\"اختر المادة\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {allSubjects.map((subject) => (\n                          <SelectItem key={subject.id} value={subject.id}>\n                            {subject.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>المعلم (اختياري)</Label>\n                    <Select\n                      value={newClassSubject.teacherId}\n                      onValueChange={(value) => setNewClassSubject({ ...newClassSubject, teacherId: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-teacher\">\n                        <SelectValue placeholder=\"اختر المعلم\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"none\">بدون معلم</SelectItem>\n                        {teachers.map((teacher) => (\n                          <SelectItem key={teacher.id} value={teacher.id}>\n                            {teacher.arabicName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>عدد الساعات الأسبوعية</Label>\n                    <Input\n                      type=\"number\"\n                      value={newClassSubject.weeklyHours}\n                      onChange={(e) => setNewClassSubject({ ...newClassSubject, weeklyHours: parseInt(e.target.value) })}\n                      min=\"1\"\n                      max=\"10\"\n                      required\n                      data-testid=\"input-weekly-hours\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={createClassSubjectMutation.isPending || !newClassSubject.subjectId}\n                    data-testid=\"button-submit-subject\"\n                  >\n                    {createClassSubjectMutation.isPending ? 'جاري الإضافة...' : 'إضافة المادة'}\n                  </Button>\n                </form>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":41275},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/contexts/SchoolSettingsContext.tsx":{"content":"import { createContext, useContext, ReactNode } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport type { SchoolSettings } from '@shared/schema';\nimport { formatDate, formatDateLong, type DateType } from '@/lib/dateUtils';\n\ninterface SchoolSettingsContextType {\n  settings: SchoolSettings | undefined;\n  isLoading: boolean;\n  currency: string;\n  currencySymbol: string;\n  dateType: DateType;\n  formatDate: (dateString: string) => string;\n  formatDateLong: (dateString: string) => string;\n}\n\nconst SchoolSettingsContext = createContext<SchoolSettingsContextType | undefined>(undefined);\n\nconst CURRENCY_SYMBOLS: Record<string, string> = {\n  SAR: 'ر.س',\n  AED: 'د.إ',\n  KWD: 'د.ك',\n  QAR: 'ر.ق',\n  BHD: 'د.ب',\n  OMR: 'ر.ع',\n  EGP: 'ج.م',\n  JOD: 'د.ا',\n  LBP: 'ل.ل',\n  IQD: 'د.ع',\n  SYP: 'ل.س',\n  MAD: 'د.م',\n  TND: 'د.ت',\n  DZD: 'د.ج',\n  LYD: 'د.ل',\n  SDG: 'ج.س',\n  YER: 'ر.ي',\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  CNY: '¥',\n  INR: '₹',\n  PKR: '₨',\n  BDT: '৳',\n  TRY: '₺',\n  IRR: '﷼',\n  AFN: '؋',\n  RUB: '₽',\n  CAD: 'C$',\n  AUD: 'A$',\n  NZD: 'NZ$',\n  CHF: 'CHF',\n  SEK: 'kr',\n  NOK: 'kr',\n  DKK: 'kr',\n  PLN: 'zł',\n  ZAR: 'R',\n  BRL: 'R$',\n  MXN: 'MX$',\n  ARS: 'AR$',\n  CLP: 'CL$',\n  COP: 'CO$',\n  SGD: 'S$',\n  MYR: 'RM',\n  THB: '฿',\n  IDR: 'Rp',\n  PHP: '₱',\n  VND: '₫',\n  KRW: '₩',\n  HKD: 'HK$',\n  TWD: 'NT$',\n};\n\nexport function SchoolSettingsProvider({ children }: { children: ReactNode }) {\n  const { data: settings, isLoading } = useQuery<SchoolSettings>({\n    queryKey: ['/api/school-settings'],\n  });\n\n  const currency = settings?.currency || 'SAR';\n  const currencySymbol = CURRENCY_SYMBOLS[currency] || currency;\n  const dateType: DateType = (settings?.dateType as DateType) || 'gregorian';\n\n  const formatDateWithSettings = (dateString: string) => {\n    return formatDate(dateString, dateType);\n  };\n\n  const formatDateLongWithSettings = (dateString: string) => {\n    return formatDateLong(dateString, dateType);\n  };\n\n  return (\n    <SchoolSettingsContext.Provider \n      value={{ \n        settings, \n        isLoading, \n        currency, \n        currencySymbol, \n        dateType,\n        formatDate: formatDateWithSettings,\n        formatDateLong: formatDateLongWithSettings\n      }}\n    >\n      {children}\n    </SchoolSettingsContext.Provider>\n  );\n}\n\nexport function useSchoolSettings() {\n  const context = useContext(SchoolSettingsContext);\n  if (context === undefined) {\n    throw new Error('useSchoolSettings must be used within a SchoolSettingsProvider');\n  }\n  return context;\n}\n","size_bytes":2592},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/FinanceSection.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { StudentAccount, PaymentTransaction, Student, SchoolSettings, TeacherSalary, TeacherAdvance, Teacher, SchoolExpense } from '@shared/schema';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { useSchoolSettings } from '@/contexts/SchoolSettingsContext';\nimport { Trash2 } from 'lucide-react';\nimport MonthFilter from './MonthFilter';\nimport { useToast } from '@/hooks/use-toast';\n\nconst convertArabicToEnglishNumbers = (str: string): string => {\n  const arabicNumbers = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];\n  const englishNumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  \n  return str.split('').map(char => {\n    const index = arabicNumbers.indexOf(char);\n    return index !== -1 ? englishNumbers[index] : char;\n  }).join('');\n};\n\nexport default function FinanceSection() {\n  const { currencySymbol, formatDate } = useSchoolSettings();\n  const { toast } = useToast();\n  const currentYear = new Date().getFullYear();\n  const currentMonth = new Date().getMonth() + 1;\n  const [selectedYears, setSelectedYears] = useState<number[]>([currentYear]);\n  const [selectedMonths, setSelectedMonths] = useState<number[]>([currentMonth]);\n  \n  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n  const [selectedStudentId, setSelectedStudentId] = useState('');\n  const [studentSearchTerm, setStudentSearchTerm] = useState('');\n  const [paymentAmount, setPaymentAmount] = useState('');\n  const [paymentDate, setPaymentDate] = useState(new Date().toISOString().split('T')[0]);\n  const [paymentMethod, setPaymentMethod] = useState('cash');\n  const [receiptNumber, setReceiptNumber] = useState('');\n  const [paymentNotes, setPaymentNotes] = useState('');\n  const [viewingStudentId, setViewingStudentId] = useState<string | null>(null);\n\n  const [isSalaryDialogOpen, setIsSalaryDialogOpen] = useState(false);\n  const [isAdvanceDialogOpen, setIsAdvanceDialogOpen] = useState(false);\n  const [selectedTeacherId, setSelectedTeacherId] = useState('');\n  const [salaryMonth, setSalaryMonth] = useState(new Date().toISOString().slice(0, 7));\n  const [baseSalary, setBaseSalary] = useState('');\n  const [bonuses, setBonuses] = useState('');\n  const [deductions, setDeductions] = useState('');\n  const [salaryPaymentDate, setSalaryPaymentDate] = useState(new Date().toISOString().split('T')[0]);\n  const [salaryNotes, setSalaryNotes] = useState('');\n  const [advanceAmount, setAdvanceAmount] = useState('');\n  const [advanceDate, setAdvanceDate] = useState(new Date().toISOString().split('T')[0]);\n  const [advanceNotes, setAdvanceNotes] = useState('');\n\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\n  const [expenseCategory, setExpenseCategory] = useState('supplies');\n  const [expenseDescription, setExpenseDescription] = useState('');\n  const [expenseAmount, setExpenseAmount] = useState('');\n  const [expenseDate, setExpenseDate] = useState(new Date().toISOString().split('T')[0]);\n  const [expensePaymentMethod, setExpensePaymentMethod] = useState('cash');\n  const [expenseReceiptNumber, setExpenseReceiptNumber] = useState('');\n  const [expenseVendorName, setExpenseVendorName] = useState('');\n  const [expenseNotes, setExpenseNotes] = useState('');\n\n  const [accountSearchTerm, setAccountSearchTerm] = useState('');\n  const [accountStatusFilter, setAccountStatusFilter] = useState('all');\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<StudentAccount[]>({\n    queryKey: ['/api/accounting/accounts'],\n  });\n\n  const { data: students = [] } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n  });\n\n  const { data: studentTransactions = [] } = useQuery<PaymentTransaction[]>({\n    queryKey: ['/api/accounting/transactions', viewingStudentId],\n    enabled: !!viewingStudentId,\n  });\n\n  const { data: allTransactions = [] } = useQuery<PaymentTransaction[]>({\n    queryKey: ['/api/accounting/transactions'],\n  });\n\n  const { data: teachers = [] } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n  });\n\n  const { data: teacherSalaries = [] } = useQuery<TeacherSalary[]>({\n    queryKey: ['/api/teacher-salaries'],\n  });\n\n  const { data: teacherAdvances = [] } = useQuery<TeacherAdvance[]>({\n    queryKey: ['/api/teacher-advances'],\n  });\n\n  const { data: schoolExpenses = [] } = useQuery<SchoolExpense[]>({\n    queryKey: ['/api/school-expenses'],\n  });\n\n  const recordPaymentMutation = useMutation({\n    mutationFn: async (data: {\n      studentAccountId: string;\n      studentId: string;\n      amount: string;\n      paymentDate: string;\n      paymentMethod: string;\n      receiptNumber?: string;\n      notes?: string;\n    }) => {\n      return await apiRequest('POST', '/api/accounting/payments', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/accounts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/transactions'] });\n      setIsPaymentDialogOpen(false);\n      setSelectedStudentId('');\n      setStudentSearchTerm('');\n      setPaymentAmount('');\n      setReceiptNumber('');\n      setPaymentNotes('');\n      setPaymentDate(new Date().toISOString().split('T')[0]);\n    },\n  });\n\n  const addSalaryMutation = useMutation({\n    mutationFn: async (data: {\n      teacherId: string;\n      month: string;\n      baseSalary: string;\n      bonuses: string;\n      deductions: string;\n      advancesDeducted: string;\n      netSalary: string;\n      paymentDate?: string;\n      status: string;\n      notes?: string;\n    }) => {\n      return await apiRequest('POST', '/api/teacher-salaries', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-salaries'] });\n      setIsSalaryDialogOpen(false);\n      setSelectedTeacherId('');\n      setSalaryMonth(new Date().toISOString().slice(0, 7));\n      setBaseSalary('');\n      setBonuses('');\n      setDeductions('');\n      setSalaryPaymentDate(new Date().toISOString().split('T')[0]);\n      setSalaryNotes('');\n    },\n  });\n\n  const addAdvanceMutation = useMutation({\n    mutationFn: async (data: {\n      teacherId: string;\n      amount: string;\n      advanceDate: string;\n      notes?: string;\n      status: string;\n    }) => {\n      return await apiRequest('POST', '/api/teacher-advances', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-advances'] });\n      setIsAdvanceDialogOpen(false);\n      setSelectedTeacherId('');\n      setAdvanceAmount('');\n      setAdvanceDate(new Date().toISOString().split('T')[0]);\n      setAdvanceNotes('');\n      toast({\n        title: \"تم إضافة السلفة بنجاح\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      let errorMessage = \"حدث خطأ أثناء إضافة السلفة\";\n      \n      if (error?.error) {\n        errorMessage = error.error;\n      } else if (error?.message) {\n        errorMessage = error.message;\n      } else if (typeof error === 'string') {\n        errorMessage = error;\n      }\n      \n      toast({\n        title: \"خطأ في إضافة السلفة\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addExpenseMutation = useMutation({\n    mutationFn: async (data: {\n      category: string;\n      description: string;\n      amount: string;\n      expenseDate: string;\n      paymentMethod?: string;\n      receiptNumber?: string;\n      vendorName?: string;\n      notes?: string;\n    }) => {\n      return await apiRequest('POST', '/api/school-expenses', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/school-expenses'] });\n      setIsExpenseDialogOpen(false);\n      setExpenseCategory('supplies');\n      setExpenseDescription('');\n      setExpenseAmount('');\n      setExpenseDate(new Date().toISOString().split('T')[0]);\n      setExpensePaymentMethod('cash');\n      setExpenseReceiptNumber('');\n      setExpenseVendorName('');\n      setExpenseNotes('');\n    },\n  });\n\n  const deleteTransactionMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/accounting/transactions/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/accounts'] });\n    },\n  });\n\n  const deleteSalaryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/teacher-salaries/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-salaries'] });\n    },\n  });\n\n  const deleteAdvanceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/teacher-advances/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-advances'] });\n    },\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/school-expenses/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/school-expenses'] });\n    },\n  });\n\n  const quickPaySalaryMutation = useMutation({\n    mutationFn: async (salaryId: string) => {\n      return await apiRequest('PATCH', `/api/teacher-salaries/${salaryId}`, {\n        status: 'paid',\n        paymentDate: new Date().toISOString().split('T')[0],\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-salaries'] });\n    },\n  });\n\n  const quickCreateAndPaySalaryMutation = useMutation({\n    mutationFn: async ({ teacherId, monthlySalary, month }: { \n      teacherId: string; \n      monthlySalary: string;\n      month: string;\n    }) => {\n      return await apiRequest('POST', '/api/teacher-salaries', {\n        teacherId,\n        month,\n        baseSalary: monthlySalary,\n        bonuses: '0',\n        deductions: '0',\n        advancesDeducted: '0',\n        netSalary: monthlySalary,\n        paymentDate: new Date().toISOString().split('T')[0],\n        status: 'paid',\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-salaries'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/teacher-advances'] });\n    },\n  });\n\n  const handlePaymentSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    let account = accounts.find(a => a.studentId === selectedStudentId);\n    \n    if (!account) {\n      const settings = await queryClient.fetchQuery<SchoolSettings>({\n        queryKey: ['/api/school-settings'],\n      });\n      \n      if (!settings) return;\n      \n      const amountPaid = Number(paymentAmount).toFixed(2);\n      \n      const response = await apiRequest('POST', '/api/accounting/accounts', {\n        studentId: selectedStudentId,\n        totalAmountDue: amountPaid,\n        totalPaid: '0.00',\n        currentBalance: amountPaid,\n        academicYear: settings.currentAcademicYear,\n      });\n      \n      const newAccount = await response.json();\n      account = newAccount;\n      \n      await queryClient.invalidateQueries({ queryKey: ['/api/accounting/accounts'] });\n    }\n    \n    if (account) {\n      recordPaymentMutation.mutate({\n        studentAccountId: account.id,\n        studentId: selectedStudentId,\n        amount: Number(paymentAmount).toFixed(2),\n        paymentDate,\n        paymentMethod,\n        receiptNumber: receiptNumber || undefined,\n        notes: paymentNotes || undefined,\n      });\n    }\n  };\n\n  const getStudentName = (studentId: string) => {\n    const student = students.find(s => s.id === studentId);\n    return student?.arabicName || 'غير معروف';\n  };\n\n  const getTeacherName = (teacherId: string) => {\n    const teacher = teachers.find(t => t.id === teacherId);\n    return teacher?.arabicName || 'غير معروف';\n  };\n\n  const handleSalarySubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedTeacherId) {\n      return;\n    }\n    \n    const base = Number(baseSalary);\n    const bonus = Number(bonuses || 0);\n    const deduct = Number(deductions || 0);\n    \n    if (isNaN(base) || base <= 0) {\n      return;\n    }\n    \n    if (isNaN(bonus) || bonus < 0) {\n      return;\n    }\n    \n    if (isNaN(deduct) || deduct < 0) {\n      return;\n    }\n\n    addSalaryMutation.mutate({\n      teacherId: selectedTeacherId,\n      month: salaryMonth,\n      baseSalary: base.toFixed(2),\n      bonuses: bonus.toFixed(2),\n      deductions: deduct.toFixed(2),\n      advancesDeducted: '0.00',\n      netSalary: '0.00',\n      paymentDate: salaryPaymentDate,\n      status: 'pending',\n      notes: salaryNotes || undefined,\n    });\n  };\n\n  const handleAdvanceSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedTeacherId) {\n      return;\n    }\n    \n    const amount = Number(advanceAmount);\n    \n    if (isNaN(amount) || amount <= 0) {\n      return;\n    }\n    \n    addAdvanceMutation.mutate({\n      teacherId: selectedTeacherId,\n      amount: amount.toFixed(2),\n      advanceDate,\n      status: 'pending',\n      notes: advanceNotes || undefined,\n    });\n  };\n\n  const handleExpenseSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const amount = Number(expenseAmount);\n    \n    if (isNaN(amount) || amount <= 0) {\n      return;\n    }\n    \n    addExpenseMutation.mutate({\n      category: expenseCategory,\n      description: expenseDescription,\n      amount: amount.toFixed(2),\n      expenseDate,\n      paymentMethod: expensePaymentMethod || undefined,\n      receiptNumber: expenseReceiptNumber || undefined,\n      vendorName: expenseVendorName || undefined,\n      notes: expenseNotes || undefined,\n    });\n  };\n\n  const filteredStudents = students.filter(student => {\n    if (!studentSearchTerm) return true;\n    const studentName = (student.arabicName || '').toLowerCase();\n    return studentName.includes(studentSearchTerm.toLowerCase());\n  });\n\n  const filteredTransactions = allTransactions.filter(transaction => {\n    if (!transaction.paymentDate) return false;\n    const date = new Date(transaction.paymentDate);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    return selectedYears.includes(year) && selectedMonths.includes(month);\n  });\n\n  const filteredAccounts = accounts\n    .filter(account => {\n      const studentName = getStudentName(account.studentId).toLowerCase();\n      const matchesSearch = !accountSearchTerm || studentName.includes(accountSearchTerm.toLowerCase());\n      \n      if (!matchesSearch) return false;\n      \n      const balance = Number(account.currentBalance);\n      const totalPaid = Number(account.totalPaid);\n      \n      switch (accountStatusFilter) {\n        case 'unpaid':\n          return balance > 0 && totalPaid === 0;\n        case 'partial':\n          return balance > 0 && totalPaid > 0;\n        case 'paid':\n          return balance <= 0 && totalPaid > 0;\n        case 'all':\n        default:\n          return true;\n      }\n    });\n\n  const filteredSalaries = teacherSalaries.filter(salary => {\n    const [yearStr, monthStr] = salary.month.split('-');\n    const year = parseInt(yearStr);\n    const month = parseInt(monthStr);\n    return selectedYears.includes(year) && selectedMonths.includes(month);\n  });\n\n  const filteredAdvances = teacherAdvances.filter(advance => {\n    if (!advance.advanceDate) return false;\n    const date = new Date(advance.advanceDate);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    return selectedYears.includes(year) && selectedMonths.includes(month);\n  });\n\n  const filteredExpenses = schoolExpenses.filter(expense => {\n    if (!expense.expenseDate) return false;\n    const date = new Date(expense.expenseDate);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    return selectedYears.includes(year) && selectedMonths.includes(month);\n  });\n\n  const totalRevenue = filteredTransactions.reduce((sum, t) => sum + Number(t.amount), 0);\n  const totalOutstanding = filteredAccounts.reduce((sum, acc) => sum + Number(acc.currentBalance), 0);\n  const studentsWithBalanceCount = filteredAccounts.filter(acc => Number(acc.currentBalance) > 0).length;\n  const studentsFullyPaid = filteredAccounts.filter(acc => Number(acc.currentBalance) <= 0 && Number(acc.totalPaid) > 0).length;\n  \n  const totalExpenses = filteredExpenses.reduce((sum, expense) => sum + Number(expense.amount), 0);\n  const totalSalaries = filteredSalaries.reduce((sum, salary) => sum + Number(salary.netSalary), 0);\n  const netProfit = totalRevenue - (totalExpenses + totalSalaries);\n  const totalTeacherAdvances = filteredAdvances.reduce((sum, advance) => sum + Number(advance.amount), 0);\n  const pendingSalaries = filteredSalaries.filter(s => s.status === 'pending').length;\n  const paidSalaries = filteredSalaries.filter(s => s.status === 'paid').length;\n\n  const expensesByCategory = filteredExpenses.reduce((acc, expense) => {\n    acc[expense.category] = (acc[expense.category] || 0) + Number(expense.amount);\n    return acc;\n  }, {} as Record<string, number>);\n\n  return (\n    <div className=\"fade-in\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">المحاسبة والرسوم</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">نظام محاسبة شامل لإدارة المدفوعات والرسوم المدرسية</p>\n      </div>\n\n      <MonthFilter\n        selectedYears={selectedYears}\n        selectedMonths={selectedMonths}\n        onYearsChange={setSelectedYears}\n        onMonthsChange={setSelectedMonths}\n      />\n\n      <Tabs defaultValue=\"accounts\" className=\"space-y-6\">\n        <div className=\"flex justify-center\">\n          <TabsList className=\"glass-card\">\n            <TabsTrigger value=\"accounts\" data-testid=\"tab-accounts\">حسابات الطلاب</TabsTrigger>\n            <TabsTrigger value=\"teachers\" data-testid=\"tab-teachers\">حسابات المعلمين</TabsTrigger>\n            <TabsTrigger value=\"expenses\" data-testid=\"tab-expenses\">المصروفات العامة</TabsTrigger>\n            <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">التقارير المالية</TabsTrigger>\n          </TabsList>\n        </div>\n\n        <TabsContent value=\"accounts\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">\n                {totalRevenue.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">إجمالي المحصل ({currencySymbol})</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-red-600\">\n                {totalOutstanding.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">إجمالي المستحقات ({currencySymbol})</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-purple-600\">{studentsFullyPaid}</div>\n              <div className=\"text-sm text-gray-600 dark:text-white\">طلاب مسددين بالكامل</div>\n            </div>\n          </div>\n\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">حسابات الطلاب</h3>\n              <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-record-payment\">💰 تسجيل دفعة</Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>تسجيل دفعة جديدة</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handlePaymentSubmit} className=\"space-y-4\">\n                    <div>\n                      <Label>بحث عن الطالب</Label>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"ابحث بالاسم...\"\n                        value={studentSearchTerm}\n                        onChange={(e) => setStudentSearchTerm(e.target.value)}\n                        data-testid=\"input-search-student\"\n                      />\n                    </div>\n                    <div>\n                      <Label>اختر الطالب</Label>\n                      <Select value={selectedStudentId} onValueChange={setSelectedStudentId} required>\n                        <SelectTrigger data-testid=\"select-student\">\n                          <SelectValue placeholder=\"اختر طالب\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {filteredStudents.length === 0 ? (\n                            <div className=\"p-2 text-center text-gray-500\">\n                              {studentSearchTerm ? 'لا توجد نتائج' : 'لا يوجد طلاب في النظام'}\n                            </div>\n                          ) : (\n                            filteredStudents.map((student) => {\n                              const account = accounts.find(acc => acc.studentId === student.id);\n                              const balance = account ? Number(account.currentBalance) : 0;\n                              return (\n                                <SelectItem key={student.id} value={student.id}>\n                                  {student.arabicName} - رصيد: {balance.toLocaleString()} {currencySymbol}\n                                </SelectItem>\n                              );\n                            })\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>المبلغ المدفوع ({currencySymbol})</Label>\n                      <Input\n                        type=\"text\"\n                        inputMode=\"decimal\"\n                        value={paymentAmount}\n                        onChange={(e) => setPaymentAmount(convertArabicToEnglishNumbers(e.target.value))}\n                        required\n                        data-testid=\"input-payment-amount\"\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label>تاريخ الدفع</Label>\n                      <Input\n                        type=\"date\"\n                        value={paymentDate}\n                        onChange={(e) => setPaymentDate(e.target.value)}\n                        required\n                        data-testid=\"input-payment-date\"\n                      />\n                    </div>\n                    <div>\n                      <Label>طريقة الدفع</Label>\n                      <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                        <SelectTrigger data-testid=\"select-payment-method\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">نقدي</SelectItem>\n                          <SelectItem value=\"bank_transfer\">تحويل بنكي</SelectItem>\n                          <SelectItem value=\"card\">بطاقة</SelectItem>\n                          <SelectItem value=\"check\">شيك</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>رقم الإيصال (اختياري)</Label>\n                      <Input\n                        value={receiptNumber}\n                        onChange={(e) => setReceiptNumber(e.target.value)}\n                        data-testid=\"input-receipt-number\"\n                      />\n                    </div>\n                    <div>\n                      <Label>ملاحظات (اختياري)</Label>\n                      <Input\n                        value={paymentNotes}\n                        onChange={(e) => setPaymentNotes(e.target.value)}\n                        data-testid=\"input-payment-notes\"\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={recordPaymentMutation.isPending}\n                      data-testid=\"button-submit-payment\"\n                    >\n                      {recordPaymentMutation.isPending ? 'جاري التسجيل...' : 'تسجيل الدفعة'}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <div className=\"mb-4 grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>بحث بالاسم</Label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"ابحث عن طالب...\"\n                  value={accountSearchTerm}\n                  onChange={(e) => setAccountSearchTerm(e.target.value)}\n                  data-testid=\"input-search-account\"\n                />\n              </div>\n              <div>\n                <Label>فلتر بحالة السداد</Label>\n                <Select value={accountStatusFilter} onValueChange={setAccountStatusFilter}>\n                  <SelectTrigger data-testid=\"select-account-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">الكل</SelectItem>\n                    <SelectItem value=\"unpaid\">لم يدفع بعد</SelectItem>\n                    <SelectItem value=\"partial\">دفع جزئي</SelectItem>\n                    <SelectItem value=\"paid\">أتم الدفع بالكامل</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {accountsLoading ? (\n              <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">جاري التحميل...</div>\n            ) : filteredAccounts.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">\n                {accountSearchTerm || accountStatusFilter !== 'all' \n                  ? 'لا توجد نتائج تطابق البحث' \n                  : 'لا توجد حسابات مالية للفترة المحددة'}\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الطالب</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">المبلغ الإجمالي</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">المدفوع</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الرصيد المتبقي</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الحالة</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الإجراءات</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {filteredAccounts.map((account) => {\n                      const balance = Number(account.currentBalance);\n                      const totalDue = Number(account.totalAmountDue);\n                      const percentagePaid = totalDue > 0 ? (Number(account.totalPaid) / totalDue) * 100 : 0;\n                      \n                      return (\n                        <tr key={account.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\" data-testid={`row-account-${account.studentId}`}>\n                          <td className=\"px-4 py-4\">\n                            <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                              {getStudentName(account.studentId)}\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-4 text-sm text-gray-600 dark:text-gray-300\">\n                            {Number(account.totalAmountDue).toLocaleString()} {currencySymbol}\n                          </td>\n                          <td className=\"px-4 py-4 text-sm text-green-600 font-medium\">\n                            {Number(account.totalPaid).toLocaleString()} {currencySymbol}\n                          </td>\n                          <td className=\"px-4 py-4 text-sm font-medium\">\n                            <span className={balance > 0 ? 'text-red-600' : 'text-green-600'}>\n                              {balance.toLocaleString()} {currencySymbol}\n                            </span>\n                          </td>\n                          <td className=\"px-4 py-4\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-24 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                                <div\n                                  className=\"bg-green-500 h-2 rounded-full\"\n                                  style={{ width: `${Math.min(percentagePaid, 100)}%` }}\n                                />\n                              </div>\n                              <span className=\"text-xs text-gray-600 dark:text-gray-400\">{Math.round(percentagePaid)}%</span>\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-4\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => setViewingStudentId(account.studentId)}\n                              data-testid={`button-view-${account.studentId}`}\n                            >\n                              عرض التفاصيل\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"teachers\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-red-600\">\n                {totalSalaries.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">إجمالي الرواتب ({currencySymbol})</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-orange-600\">\n                {totalTeacherAdvances.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">إجمالي السلف ({currencySymbol})</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">{paidSalaries}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">رواتب مدفوعة</div>\n            </div>\n          </div>\n\n          <div className=\"glass-card rounded-2xl p-6 mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-4\">حسابات المعلمين - دفع سريع</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">قائمة المعلمين النشطين ورواتبهم للفترة المحددة</p>\n            \n            {teachers.filter(t => t.status === 'active').length === 0 ? (\n              <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">لا يوجد معلمين نشطين</div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">المعلم</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الراتب الشهري</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">السلف المعلقة</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الصافي المتوقع</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">حالة الراتب</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase\">الإجراءات</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {teachers\n                      .filter(t => {\n                        if (t.status !== 'active') return false;\n                        \n                        const hasAnySalary = teacherSalaries.some(s => s.teacherId === t.id);\n                        if (!hasAnySalary) return true;\n                        \n                        const hasFilteredSalary = filteredSalaries.some(s => s.teacherId === t.id);\n                        return hasFilteredSalary;\n                      })\n                      .map((teacher) => {\n                        const currentMonthSalary = filteredSalaries.find(\n                          s => s.teacherId === teacher.id\n                        );\n                        \n                        const teacherPendingAdvances = teacherAdvances.filter(\n                          (a: TeacherAdvance) => a.teacherId === teacher.id && a.status === 'pending'\n                        );\n                        const totalPendingAdvances = teacherPendingAdvances.reduce(\n                          (sum: number, adv: TeacherAdvance) => sum + Number(adv.amount), 0\n                        );\n                        \n                        const expectedNet = currentMonthSalary \n                          ? Number(currentMonthSalary.netSalary)\n                          : Math.max(0, Number(teacher.monthlySalary) - totalPendingAdvances);\n                        \n                        return (\n                          <tr key={teacher.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\" data-testid={`row-teacher-${teacher.id}`}>\n                            <td className=\"px-4 py-4\">\n                              <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                                {teacher.arabicName}\n                              </div>\n                              <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                                {teacher.specialization || 'غير محدد'}\n                              </div>\n                            </td>\n                            <td className=\"px-4 py-4 text-sm text-gray-900 dark:text-gray-300 font-medium\">\n                              {Number(teacher.monthlySalary).toLocaleString()} {currencySymbol}\n                            </td>\n                            <td className=\"px-4 py-4\">\n                              {totalPendingAdvances > 0 ? (\n                                <span className=\"text-sm text-orange-600 font-medium\">\n                                  {totalPendingAdvances.toLocaleString()} {currencySymbol}\n                                </span>\n                              ) : (\n                                <span className=\"text-xs text-gray-400 dark:text-gray-500\">لا توجد سلف</span>\n                              )}\n                            </td>\n                            <td className=\"px-4 py-4 text-sm font-medium\">\n                              <span className={totalPendingAdvances > 0 ? 'text-blue-600' : 'text-gray-900 dark:text-gray-300'}>\n                                {expectedNet.toLocaleString()} {currencySymbol}\n                              </span>\n                            </td>\n                            <td className=\"px-4 py-4\">\n                              {currentMonthSalary ? (\n                                <Badge variant={currentMonthSalary.status === 'paid' ? 'default' : 'secondary'}>\n                                  {currentMonthSalary.status === 'paid' ? 'مدفوع' : 'معلق'}\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"secondary\">لم يُنشأ بعد</Badge>\n                              )}\n                            </td>\n                            <td className=\"px-4 py-4\">\n                              {currentMonthSalary && currentMonthSalary.status === 'paid' ? (\n                                <span className=\"text-xs text-green-600 font-medium\">\n                                  ✓ تم الدفع في {formatDate(currentMonthSalary.paymentDate || '')}\n                                </span>\n                              ) : currentMonthSalary && currentMonthSalary.status === 'pending' ? (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"default\"\n                                  onClick={() => quickPaySalaryMutation.mutate(currentMonthSalary.id)}\n                                  disabled={quickPaySalaryMutation.isPending}\n                                  data-testid={`button-quick-pay-${teacher.id}`}\n                                  className=\"bg-green-600 hover:bg-green-700\"\n                                >\n                                  ✓ دفع الراتب\n                                </Button>\n                              ) : (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"default\"\n                                  onClick={() => {\n                                    const currentMonth = selectedMonths.length === 1 && selectedYears.length === 1\n                                      ? `${selectedYears[0]}-${String(selectedMonths[0]).padStart(2, '0')}`\n                                      : new Date().toISOString().slice(0, 7);\n                                    \n                                    quickCreateAndPaySalaryMutation.mutate({\n                                      teacherId: teacher.id,\n                                      monthlySalary: teacher.monthlySalary,\n                                      month: currentMonth,\n                                    });\n                                  }}\n                                  disabled={quickCreateAndPaySalaryMutation.isPending}\n                                  data-testid={`button-quick-pay-${teacher.id}`}\n                                  className=\"bg-green-600 hover:bg-green-700\"\n                                >\n                                  ✓ دفع الراتب\n                                </Button>\n                              )}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"glass-card rounded-2xl p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">رواتب المعلمين</h3>\n                <Dialog open={isSalaryDialogOpen} onOpenChange={setIsSalaryDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-salary\">إضافة راتب</Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>إضافة راتب معلم</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleSalarySubmit} className=\"space-y-4\">\n                      <div>\n                        <Label>المعلم</Label>\n                        <Select value={selectedTeacherId} onValueChange={setSelectedTeacherId} required>\n                          <SelectTrigger data-testid=\"select-teacher\">\n                            <SelectValue placeholder=\"اختر معلم\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {teachers.map((teacher) => (\n                              <SelectItem key={teacher.id} value={teacher.id}>\n                                {teacher.arabicName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label>الشهر</Label>\n                        <Input\n                          type=\"month\"\n                          value={salaryMonth}\n                          onChange={(e) => setSalaryMonth(e.target.value)}\n                          required\n                          data-testid=\"input-salary-month\"\n                        />\n                      </div>\n                      <div>\n                        <Label>الراتب الأساسي ({currencySymbol})</Label>\n                        <Input\n                          type=\"text\"\n                          inputMode=\"decimal\"\n                          value={baseSalary}\n                          onChange={(e) => setBaseSalary(convertArabicToEnglishNumbers(e.target.value))}\n                          required\n                          data-testid=\"input-base-salary\"\n                          placeholder=\"0.00\"\n                        />\n                      </div>\n                      <div>\n                        <Label>البونص ({currencySymbol})</Label>\n                        <Input\n                          type=\"text\"\n                          inputMode=\"decimal\"\n                          value={bonuses}\n                          onChange={(e) => setBonuses(convertArabicToEnglishNumbers(e.target.value))}\n                          data-testid=\"input-bonuses\"\n                          placeholder=\"0.00\"\n                        />\n                      </div>\n                      <div>\n                        <Label>الاستقطاعات ({currencySymbol})</Label>\n                        <Input\n                          type=\"text\"\n                          inputMode=\"decimal\"\n                          value={deductions}\n                          onChange={(e) => setDeductions(convertArabicToEnglishNumbers(e.target.value))}\n                          data-testid=\"input-deductions\"\n                          placeholder=\"0.00\"\n                        />\n                      </div>\n                      <div>\n                        <Label>تاريخ الدفع</Label>\n                        <Input\n                          type=\"date\"\n                          value={salaryPaymentDate}\n                          onChange={(e) => setSalaryPaymentDate(e.target.value)}\n                          data-testid=\"input-salary-payment-date\"\n                        />\n                      </div>\n                      <div>\n                        <Label>ملاحظات (اختياري)</Label>\n                        <Input\n                          value={salaryNotes}\n                          onChange={(e) => setSalaryNotes(e.target.value)}\n                          data-testid=\"input-salary-notes\"\n                        />\n                      </div>\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={addSalaryMutation.isPending}\n                        data-testid=\"button-submit-salary\"\n                      >\n                        {addSalaryMutation.isPending ? 'جاري الحفظ...' : 'حفظ الراتب'}\n                      </Button>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {filteredSalaries.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">لا توجد رواتب مسجلة</div>\n              ) : (\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {filteredSalaries.slice(0, 10).map((salary) => (\n                    <div\n                      key={salary.id}\n                      className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                      data-testid={`salary-${salary.id}`}\n                    >\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-gray-900 dark:text-white\">\n                            {getTeacherName(salary.teacherId)}\n                          </div>\n                          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {salary.month}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={salary.status === 'paid' ? 'default' : 'secondary'}>\n                            {salary.status === 'paid' ? 'مدفوع' : 'معلق'}\n                          </Badge>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => deleteSalaryMutation.mutate(salary.id)}\n                            disabled={deleteSalaryMutation.isPending}\n                            data-testid={`button-delete-salary-${salary.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                        <div className=\"text-gray-600 dark:text-gray-400\">\n                          الأساسي: {Number(salary.baseSalary).toLocaleString()} {currencySymbol}\n                        </div>\n                        <div className=\"text-green-600\">\n                          البونص: {Number(salary.bonuses).toLocaleString()} {currencySymbol}\n                        </div>\n                        <div className=\"text-red-600\">\n                          الاستقطاعات: {Number(salary.deductions).toLocaleString()} {currencySymbol}\n                        </div>\n                        <div className=\"text-orange-600\">\n                          السلف: {Number(salary.advancesDeducted).toLocaleString()} {currencySymbol}\n                        </div>\n                        <div className=\"text-blue-600 font-medium col-span-2\">\n                          الصافي: {Number(salary.netSalary).toLocaleString()} {currencySymbol}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div className=\"glass-card rounded-2xl p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">سلف المعلمين</h3>\n                <Dialog open={isAdvanceDialogOpen} onOpenChange={setIsAdvanceDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-advance\">إضافة سلفة</Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>إضافة سلفة لمعلم</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleAdvanceSubmit} className=\"space-y-4\">\n                      <div>\n                        <Label>المعلم</Label>\n                        <Select value={selectedTeacherId} onValueChange={setSelectedTeacherId} required>\n                          <SelectTrigger data-testid=\"select-teacher-advance\">\n                            <SelectValue placeholder=\"اختر معلم\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {teachers.map((teacher) => (\n                              <SelectItem key={teacher.id} value={teacher.id}>\n                                {teacher.arabicName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label>المبلغ ({currencySymbol})</Label>\n                        <Input\n                          type=\"text\"\n                          inputMode=\"decimal\"\n                          value={advanceAmount}\n                          onChange={(e) => setAdvanceAmount(convertArabicToEnglishNumbers(e.target.value))}\n                          required\n                          data-testid=\"input-advance-amount\"\n                          placeholder=\"0.00\"\n                        />\n                      </div>\n                      <div>\n                        <Label>تاريخ السلفة</Label>\n                        <Input\n                          type=\"date\"\n                          value={advanceDate}\n                          onChange={(e) => setAdvanceDate(e.target.value)}\n                          required\n                          data-testid=\"input-advance-date\"\n                        />\n                      </div>\n                      <div>\n                        <Label>ملاحظات (اختياري)</Label>\n                        <Input\n                          value={advanceNotes}\n                          onChange={(e) => setAdvanceNotes(e.target.value)}\n                          data-testid=\"input-advance-notes\"\n                        />\n                      </div>\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={addAdvanceMutation.isPending}\n                        data-testid=\"button-submit-advance\"\n                      >\n                        {addAdvanceMutation.isPending ? 'جاري الحفظ...' : 'حفظ السلفة'}\n                      </Button>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {filteredAdvances.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">لا توجد سلف مسجلة</div>\n              ) : (\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {filteredAdvances.slice(0, 10).map((advance) => (\n                    <div\n                      key={advance.id}\n                      className=\"p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg\"\n                      data-testid={`advance-${advance.id}`}\n                    >\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-gray-900 dark:text-white\">\n                            {getTeacherName(advance.teacherId)}\n                          </div>\n                          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {formatDate(advance.advanceDate)}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={advance.status === 'deducted' ? 'default' : 'secondary'}>\n                            {advance.status === 'deducted' ? 'تم الخصم' : 'معلق'}\n                          </Badge>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => deleteAdvanceMutation.mutate(advance.id)}\n                            disabled={deleteAdvanceMutation.isPending}\n                            data-testid={`button-delete-advance-${advance.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"text-orange-600 font-bold text-lg\">\n                        {Number(advance.amount).toLocaleString()} {currencySymbol}\n                      </div>\n                      {advance.notes && (\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">{advance.notes}</div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"expenses\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-blue-600\">\n                {totalExpenses.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">إجمالي المصروفات ({currencySymbol})</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-purple-600\">\n                {filteredExpenses.length}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">عدد المصروفات</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl text-center\">\n              <div className=\"text-3xl font-bold text-orange-600\">\n                {Object.keys(expensesByCategory).length}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">عدد الفئات</div>\n            </div>\n          </div>\n\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">المصروفات العامة</h3>\n              <Dialog open={isExpenseDialogOpen} onOpenChange={setIsExpenseDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-expense\">إضافة مصروف</Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>إضافة مصروف جديد</DialogTitle>\n                    <DialogDescription>أدخل تفاصيل المصروف العام للمدرسة</DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleExpenseSubmit} className=\"space-y-4\">\n                    <div>\n                      <Label>الفئة</Label>\n                      <Select value={expenseCategory} onValueChange={setExpenseCategory}>\n                        <SelectTrigger data-testid=\"select-expense-category\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"utilities\">فواتير (كهرباء، ماء، غاز)</SelectItem>\n                          <SelectItem value=\"maintenance\">صيانة</SelectItem>\n                          <SelectItem value=\"supplies\">لوازم مكتبية ومنظفات</SelectItem>\n                          <SelectItem value=\"transportation\">نقل ومواصلات</SelectItem>\n                          <SelectItem value=\"salaries\">رواتب وأجور</SelectItem>\n                          <SelectItem value=\"rent\">إيجار</SelectItem>\n                          <SelectItem value=\"equipment\">معدات وأجهزة</SelectItem>\n                          <SelectItem value=\"food\">طعام وضيافة</SelectItem>\n                          <SelectItem value=\"marketing\">دعاية وتسويق</SelectItem>\n                          <SelectItem value=\"other\">أخرى</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>الوصف</Label>\n                      <Input\n                        type=\"text\"\n                        value={expenseDescription}\n                        onChange={(e) => setExpenseDescription(e.target.value)}\n                        required\n                        data-testid=\"input-expense-description\"\n                        placeholder=\"مثال: فاتورة الكهرباء - شهر يناير\"\n                      />\n                    </div>\n                    <div>\n                      <Label>المبلغ ({currencySymbol})</Label>\n                      <Input\n                        type=\"text\"\n                        inputMode=\"decimal\"\n                        value={expenseAmount}\n                        onChange={(e) => setExpenseAmount(convertArabicToEnglishNumbers(e.target.value))}\n                        required\n                        data-testid=\"input-expense-amount\"\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label>تاريخ المصروف</Label>\n                      <Input\n                        type=\"date\"\n                        value={expenseDate}\n                        onChange={(e) => setExpenseDate(e.target.value)}\n                        required\n                        data-testid=\"input-expense-date\"\n                      />\n                    </div>\n                    <div>\n                      <Label>طريقة الدفع</Label>\n                      <Select value={expensePaymentMethod} onValueChange={setExpensePaymentMethod}>\n                        <SelectTrigger data-testid=\"select-expense-payment-method\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">نقدي</SelectItem>\n                          <SelectItem value=\"bank_transfer\">تحويل بنكي</SelectItem>\n                          <SelectItem value=\"card\">بطاقة</SelectItem>\n                          <SelectItem value=\"check\">شيك</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>اسم المورد (اختياري)</Label>\n                      <Input\n                        value={expenseVendorName}\n                        onChange={(e) => setExpenseVendorName(e.target.value)}\n                        data-testid=\"input-expense-vendor\"\n                        placeholder=\"اسم الشركة أو المورد\"\n                      />\n                    </div>\n                    <div>\n                      <Label>رقم الإيصال (اختياري)</Label>\n                      <Input\n                        value={expenseReceiptNumber}\n                        onChange={(e) => setExpenseReceiptNumber(e.target.value)}\n                        data-testid=\"input-expense-receipt\"\n                      />\n                    </div>\n                    <div>\n                      <Label>ملاحظات (اختياري)</Label>\n                      <Input\n                        value={expenseNotes}\n                        onChange={(e) => setExpenseNotes(e.target.value)}\n                        data-testid=\"input-expense-notes\"\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={addExpenseMutation.isPending}\n                      data-testid=\"button-submit-expense\"\n                    >\n                      {addExpenseMutation.isPending ? 'جاري الحفظ...' : 'حفظ المصروف'}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {filteredExpenses.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-600\">لا توجد مصروفات مسجلة</div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredExpenses.slice(0, 20).map((expense) => (\n                  <div\n                    key={expense.id}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                    data-testid={`expense-${expense.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {expense.category === 'utilities' && 'فواتير'}\n                          {expense.category === 'maintenance' && 'صيانة'}\n                          {expense.category === 'supplies' && 'لوازم ومنظفات'}\n                          {expense.category === 'transportation' && 'نقل'}\n                          {expense.category === 'salaries' && 'رواتب'}\n                          {expense.category === 'rent' && 'إيجار'}\n                          {expense.category === 'equipment' && 'معدات'}\n                          {expense.category === 'food' && 'طعام'}\n                          {expense.category === 'marketing' && 'تسويق'}\n                          {expense.category === 'other' && 'أخرى'}\n                        </Badge>\n                        <span className=\"font-medium text-gray-900 dark:text-white\">{expense.description}</span>\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {formatDate(expense.expenseDate)}\n                        {expense.vendorName && ` - ${expense.vendorName}`}\n                        {expense.receiptNumber && ` - إيصال: ${expense.receiptNumber}`}\n                      </div>\n                      {expense.notes && (\n                        <div className=\"text-xs text-gray-400 mt-1\">{expense.notes}</div>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"text-red-600 font-bold text-lg\">\n                        {Number(expense.amount).toLocaleString()} {currencySymbol}\n                      </div>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => deleteExpenseMutation.mutate(expense.id)}\n                        disabled={deleteExpenseMutation.isPending}\n                        data-testid={`button-delete-expense-${expense.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-red-500\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"glass-card rounded-2xl p-6\">\n                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-6\">الملخص المالي الشامل</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center p-3 bg-blue-50 rounded-lg\">\n                    <span className=\"text-blue-700\">المبلغ المترتب على الطلاب</span>\n                    <span className=\"font-bold text-lg text-blue-600\">\n                      {filteredAccounts.reduce((sum, acc) => sum + Number(acc.totalAmountDue), 0).toLocaleString()} {currencySymbol}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-green-50 rounded-lg\">\n                    <span className=\"text-green-700\">الإيرادات (المحصل من الطلاب)</span>\n                    <span className=\"font-bold text-lg text-green-600\">\n                      {totalRevenue.toLocaleString()} {currencySymbol}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-yellow-50 rounded-lg\">\n                    <span className=\"text-yellow-700\">الباقي من مدفوعات الطلاب</span>\n                    <span className=\"font-bold text-lg text-yellow-600\">\n                      {totalOutstanding.toLocaleString()} {currencySymbol}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-red-50 rounded-lg\">\n                    <span className=\"text-red-700\">المصروفات العامة</span>\n                    <span className=\"font-bold text-lg text-red-600\">\n                      {totalExpenses.toLocaleString()} {currencySymbol}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-orange-50 rounded-lg\">\n                    <span className=\"text-orange-700\">رواتب المعلمين</span>\n                    <span className=\"font-bold text-lg text-orange-600\">\n                      {totalSalaries.toLocaleString()} {currencySymbol}\n                    </span>\n                  </div>\n                  <div className=\"border-t-2 border-gray-300 pt-3\">\n                    <div className={`flex justify-between items-center p-4 rounded-lg ${netProfit >= 0 ? 'bg-emerald-100' : 'bg-red-100'}`}>\n                      <span className={`font-bold text-lg ${netProfit >= 0 ? 'text-emerald-700' : 'text-red-700'}`}>\n                        الصافي النهائي {netProfit >= 0 ? '(ربح)' : '(خسارة)'}\n                      </span>\n                      <span className={`font-bold text-2xl ${netProfit >= 0 ? 'text-emerald-600' : 'text-red-600'}`}>\n                        {Math.abs(netProfit).toLocaleString()} {currencySymbol}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-4 p-2 bg-gray-100 rounded\">\n                    <div>• الصافي = الإيرادات - (المصروفات + الرواتب)</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"glass-card rounded-2xl p-6\">\n                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-6\">أحدث المدفوعات</h3>\n                <div className=\"space-y-3\">\n                  {filteredTransactions.slice(0, 5).map((transaction) => (\n                    <div key={transaction.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <div>\n                        <div className=\"font-medium text-gray-900 dark:text-white\">\n                          {getStudentName(transaction.studentId)}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {formatDate(transaction.paymentDate)}\n                        </div>\n                      </div>\n                      <div className=\"font-bold text-green-600\">\n                        {Number(transaction.amount).toLocaleString()} {currencySymbol}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Student Financial Report Dialog */}\n      <Dialog open={!!viewingStudentId} onOpenChange={() => setViewingStudentId(null)}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>التقرير المالي - {getStudentName(viewingStudentId || '')}</DialogTitle>\n          </DialogHeader>\n          {viewingStudentId && (\n            <div className=\"space-y-6\">\n              {(() => {\n                const account = accounts.find(a => a.studentId === viewingStudentId);\n                if (!account) return <div>لا توجد بيانات مالية</div>;\n\n                return (\n                  <>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {Number(account.totalAmountDue).toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-blue-700\">المبلغ الإجمالي</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {Number(account.totalPaid).toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-green-700\">المدفوع</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-red-600\">\n                          {Number(account.currentBalance).toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-red-700\">المتبقي</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-bold text-gray-900 dark:text-white mb-4\">سجل المدفوعات</h4>\n                      {studentTransactions.length === 0 ? (\n                        <div className=\"text-center py-4 text-gray-500 dark:text-gray-400\">لا توجد مدفوعات مسجلة</div>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          {studentTransactions.map((transaction) => (\n                            <div\n                              key={transaction.id}\n                              className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                              data-testid={`transaction-${transaction.id}`}\n                            >\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium text-gray-900 dark:text-white\">\n                                  {formatDate(transaction.paymentDate)}\n                                </div>\n                                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                                  {transaction.paymentMethod}\n                                  {transaction.receiptNumber && ` - إيصال: ${transaction.receiptNumber}`}\n                                </div>\n                                {transaction.notes && (\n                                  <div className=\"text-xs text-gray-400 dark:text-gray-500\">{transaction.notes}</div>\n                                )}\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"font-bold text-green-600\">\n                                  {Number(transaction.amount).toLocaleString()} {currencySymbol}\n                                </div>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => deleteTransactionMutation.mutate(transaction.id)}\n                                  disabled={deleteTransactionMutation.isPending}\n                                  data-testid={`button-delete-transaction-${transaction.id}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                </Button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </>\n                );\n              })()}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":74421},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/NewGradesSection.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { Student, Subject, Grade, Class, EducationLevel, User } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { BookOpen, Save, Plus } from 'lucide-react';\nimport { useSchoolSettings } from '@/contexts/SchoolSettingsContext';\n\nconst ASSESSMENT_TYPES = [\n  'مذاكرة',\n  'امتحان نهائي',\n  'واجب',\n  'مشاركة',\n  'اختبار قصير',\n  'مشروع',\n  'نشاط'\n] as const;\n\nconst SEMESTERS = ['الفصل الأول', 'الفصل الثاني', 'الفصل الثالث'] as const;\n\nexport default function NewGradesSection() {\n  const { toast } = useToast();\n  const { formatDate } = useSchoolSettings();\n  \n  // Selection states\n  const [selectedEducationLevel, setSelectedEducationLevel] = useState<string>('');\n  const [selectedGrade, setSelectedGrade] = useState<string>('');\n  const [selectedSection, setSelectedSection] = useState<string>('');\n  const [selectedClassId, setSelectedClassId] = useState<string>('');\n  const [selectedStudent, setSelectedStudent] = useState<string>('');\n  const [selectedSubject, setSelectedSubject] = useState<string>('');\n  const [assessmentType, setAssessmentType] = useState<string>('');\n  const [semester, setSemester] = useState<string>('الفصل الأول');\n  const [score, setScore] = useState<string>('');\n  const [maxScore, setMaxScore] = useState<string>('100');\n  const [date, setDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [notes, setNotes] = useState<string>('');\n\n  // Fetch data\n  const { data: currentUser } = useQuery<User>({\n    queryKey: ['/api/user'],\n  });\n\n  const { data: educationLevels = [] } = useQuery<EducationLevel[]>({\n    queryKey: ['/api/education-levels'],\n  });\n\n  // Fetch classes based on user role - teachers get only their assigned classes\n  const { data: allClasses = [] } = useQuery<Class[]>({\n    queryKey: ['/api/teachers/my-classes'],\n  });\n\n  // Fetch subjects for selected class (only after class is selected)\n  const { data: classSubjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/teachers/my-subjects', selectedClassId],\n    enabled: !!selectedClassId,\n  });\n\n  // Fetch students for selected class (only after class is selected)\n  const { data: classStudents = [] } = useQuery<Student[]>({\n    queryKey: ['/api/teachers/my-students', selectedClassId],\n    enabled: !!selectedClassId,\n  });\n\n  const { data: grades = [] } = useQuery<Grade[]>({\n    queryKey: ['/api/grades'],\n  });\n\n  // Filter classes by selected education level\n  const filteredClassesByLevel = useMemo(() => {\n    if (!selectedEducationLevel) return [];\n    return allClasses.filter(c => c.educationLevelId === selectedEducationLevel);\n  }, [allClasses, selectedEducationLevel]);\n\n  // Get unique grades from filtered classes\n  const availableGrades = useMemo(() => {\n    const grades = new Set(filteredClassesByLevel.map(c => c.grade));\n    return Array.from(grades).sort();\n  }, [filteredClassesByLevel]);\n\n  // Filter classes by selected grade\n  const filteredClassesByGrade = useMemo(() => {\n    if (!selectedGrade) return [];\n    return filteredClassesByLevel.filter(c => c.grade === selectedGrade);\n  }, [filteredClassesByLevel, selectedGrade]);\n\n  // Get unique sections from filtered classes\n  const availableSections = useMemo(() => {\n    const sections = new Set(filteredClassesByGrade.map(c => c.section));\n    return Array.from(sections).sort();\n  }, [filteredClassesByGrade]);\n\n  // Get the selected class object\n  const selectedClass = useMemo(() => {\n    if (!selectedGrade || !selectedSection) return null;\n    return allClasses.find(c => \n      c.educationLevelId === selectedEducationLevel && \n      c.grade === selectedGrade && \n      c.section === selectedSection\n    );\n  }, [allClasses, selectedEducationLevel, selectedGrade, selectedSection]);\n\n  // Use students from the API query (already filtered for the selected class)\n  const filteredStudents = useMemo(() => {\n    if (!selectedClass) return [];\n    return classStudents;\n  }, [classStudents, selectedClass]);\n\n  const addGradeMutation = useMutation({\n    mutationFn: async (data: {\n      studentId: string;\n      subjectId: string;\n      classId: string;\n      semester: string;\n      assessmentType: string;\n      score: string;\n      maxScore: string;\n      date: string;\n      notes?: string;\n    }) => {\n      return await apiRequest('POST', '/api/grades', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/grades'] });\n      toast({\n        title: 'تم الحفظ',\n        description: 'تم حفظ العلامة بنجاح',\n      });\n      // Reset form\n      setSelectedStudent('');\n      setSelectedSubject('');\n      setAssessmentType('');\n      setScore('');\n      setMaxScore('100');\n      setNotes('');\n    },\n    onError: () => {\n      toast({\n        title: 'خطأ',\n        description: 'حدث خطأ أثناء حفظ العلامة',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedClass) {\n      toast({\n        title: 'خطأ',\n        description: 'يرجى اختيار الصف والشعبة أولاً',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!selectedStudent || !selectedSubject || !assessmentType || !score) {\n      toast({\n        title: 'خطأ',\n        description: 'يرجى ملء جميع الحقول المطلوبة',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const scoreNum = parseFloat(score);\n    const maxScoreNum = parseFloat(maxScore);\n\n    if (scoreNum > maxScoreNum) {\n      toast({\n        title: 'خطأ',\n        description: `العلامة التي حصل عليها الطالب (${score}) لا يمكن أن تزيد عن العلامة النهائية (${maxScore})`,\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    addGradeMutation.mutate({\n      studentId: selectedStudent,\n      subjectId: selectedSubject,\n      classId: selectedClass.id,\n      semester,\n      assessmentType,\n      score,\n      maxScore,\n      date,\n      notes,\n    });\n  };\n\n  // Reset dependent fields when selections change\n  const handleEducationLevelChange = (value: string) => {\n    setSelectedEducationLevel(value);\n    setSelectedGrade('');\n    setSelectedSection('');\n    setSelectedClassId('');\n    setSelectedStudent('');\n  };\n\n  const handleGradeChange = (value: string) => {\n    setSelectedGrade(value);\n    setSelectedSection('');\n    setSelectedClassId('');\n    setSelectedStudent('');\n  };\n\n  const handleSectionChange = (value: string) => {\n    setSelectedSection(value);\n    setSelectedStudent('');\n    \n    // Find and set the selected class ID when section changes\n    const classData = allClasses.find(c => \n      c.educationLevelId === selectedEducationLevel && \n      c.grade === selectedGrade && \n      c.section === value\n    );\n    if (classData) {\n      setSelectedClassId(classData.id);\n    }\n  };\n\n  const selectedStudentData = classStudents.find((s: Student) => s.id === selectedStudent);\n  const studentGrades = grades.filter((g: Grade) => g.studentId === selectedStudent);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Plus className=\"h-5 w-5\" />\n            إدخال علامة جديدة\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Step 1: Select Education Level, Grade, Section */}\n            <div className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-700 rounded-lg p-4 mb-4\">\n              <h3 className=\"text-lg font-semibold text-purple-900 dark:text-purple-200 mb-3\">\n                الخطوة 1: اختر الصف والشعبة\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {/* Education Level Selection */}\n                <div className=\"space-y-2\">\n                  <Label>المرحلة الدراسية *</Label>\n                  <Select value={selectedEducationLevel} onValueChange={handleEducationLevelChange}>\n                    <SelectTrigger data-testid=\"select-education-level\" className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\">\n                      <SelectValue placeholder=\"اختر المرحلة\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {educationLevels.map((level) => (\n                        <SelectItem key={level.id} value={level.id}>\n                          {level.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Grade Selection */}\n                <div className=\"space-y-2\">\n                  <Label>الصف *</Label>\n                  <Select \n                    value={selectedGrade} \n                    onValueChange={handleGradeChange}\n                    disabled={!selectedEducationLevel}\n                  >\n                    <SelectTrigger data-testid=\"select-grade\" className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\">\n                      <SelectValue placeholder={selectedEducationLevel ? \"اختر الصف\" : \"اختر المرحلة أولاً\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableGrades.map((grade) => (\n                        <SelectItem key={grade} value={grade}>\n                          {grade}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Section Selection */}\n                <div className=\"space-y-2\">\n                  <Label>الشعبة *</Label>\n                  <Select \n                    value={selectedSection} \n                    onValueChange={handleSectionChange}\n                    disabled={!selectedGrade}\n                  >\n                    <SelectTrigger data-testid=\"select-section\" className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\">\n                      <SelectValue placeholder={selectedGrade ? \"اختر الشعبة\" : \"اختر الصف أولاً\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableSections.map((section) => (\n                        <SelectItem key={section} value={section}>\n                          {section}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            {/* Step 2: Student and Grade Details */}\n            {selectedClass && (\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4 mb-4\">\n                <h3 className=\"text-lg font-semibold text-blue-900 dark:text-blue-200 mb-3\">\n                  الخطوة 2: بيانات العلامة\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {/* Student Selection */}\n                  <div className=\"space-y-2\">\n                    <Label>اسم الطالب *</Label>\n                    <Select value={selectedStudent} onValueChange={setSelectedStudent}>\n                      <SelectTrigger data-testid=\"select-student\" className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\">\n                        <SelectValue placeholder={filteredStudents.length > 0 ? \"اختر الطالب\" : \"لا يوجد طلاب في هذه الشعبة\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {filteredStudents.map((student) => (\n                          <SelectItem key={student.id} value={student.id}>\n                            {student.arabicName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Subject Selection */}\n                  <div className=\"space-y-2\">\n                    <Label>المادة الدراسية *</Label>\n                    <Select value={selectedSubject} onValueChange={setSelectedSubject}>\n                      <SelectTrigger data-testid=\"select-subject\" className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\">\n                        <SelectValue placeholder=\"اختر المادة\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {classSubjects.map((subject: Subject) => (\n                          <SelectItem key={subject.id} value={subject.id}>\n                            {subject.arabicName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Assessment Type */}\n                  <div className=\"space-y-2\">\n                    <Label>نوع الامتحان *</Label>\n                    <Select value={assessmentType} onValueChange={setAssessmentType}>\n                      <SelectTrigger data-testid=\"select-assessment-type\" className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\">\n                        <SelectValue placeholder=\"اختر نوع الامتحان\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {ASSESSMENT_TYPES.map((type) => (\n                          <SelectItem key={type} value={type}>\n                            {type}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Semester */}\n                  <div className=\"space-y-2\">\n                    <Label>الفصل الدراسي</Label>\n                    <Select value={semester} onValueChange={setSemester}>\n                      <SelectTrigger data-testid=\"select-semester\" className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {SEMESTERS.map((sem) => (\n                          <SelectItem key={sem} value={sem}>\n                            {sem}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Score */}\n                  <div className=\"space-y-2\">\n                    <Label>العلامة *</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.5\"\n                      min=\"0\"\n                      value={score}\n                      onChange={(e) => setScore(e.target.value)}\n                      placeholder=\"أدخل العلامة\"\n                      data-testid=\"input-score\"\n                      className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\"\n                    />\n                  </div>\n\n                  {/* Max Score */}\n                  <div className=\"space-y-2\">\n                    <Label>العلامة العظمى</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.5\"\n                      min=\"0\"\n                      value={maxScore}\n                      onChange={(e) => setMaxScore(e.target.value)}\n                      data-testid=\"input-max-score\"\n                      className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\"\n                    />\n                  </div>\n\n                  {/* Date */}\n                  <div className=\"space-y-2\">\n                    <Label>التاريخ</Label>\n                    <Input\n                      type=\"date\"\n                      value={date}\n                      onChange={(e) => setDate(e.target.value)}\n                      data-testid=\"input-date\"\n                      className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\"\n                    />\n                  </div>\n\n                  {/* Notes */}\n                  <div className=\"space-y-2\">\n                    <Label>ملاحظات</Label>\n                    <Input\n                      type=\"text\"\n                      value={notes}\n                      onChange={(e) => setNotes(e.target.value)}\n                      placeholder=\"ملاحظات إضافية\"\n                      data-testid=\"input-notes\"\n                      className=\"bg-white dark:bg-white text-gray-900 dark:text-gray-900\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={addGradeMutation.isPending || !selectedClass}\n              data-testid=\"button-save-grade\"\n            >\n              <Save className=\"h-4 w-4 ml-2\" />\n              حفظ العلامة\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Student Grades Summary */}\n      {selectedStudentData && studentGrades.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              علامات الطالب: {selectedStudentData.arabicName}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {studentGrades.map((grade: Grade) => {\n                const subject = classSubjects.find((s: Subject) => s.id === grade.subjectId);\n                return (\n                  <div\n                    key={grade.id}\n                    className=\"flex items-center justify-between p-3 border rounded-md\"\n                    data-testid={`grade-record-${grade.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <p className=\"font-semibold\">{subject?.arabicName}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {grade.assessmentType} - {grade.semester}\n                      </p>\n                    </div>\n                    <div className=\"text-left\">\n                      <p className=\"text-lg font-bold\">\n                        {grade.score} / {grade.maxScore}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {formatDate(grade.date)}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":19562},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/examples/StatCard.tsx":{"content":"import StatCard from '../StatCard';\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 p-6 gradient-primary-bg min-h-screen\">\n      <StatCard \n        title=\"إجمالي الطلاب\" \n        value=\"450\" \n        subtitle=\"+12 هذا الشهر\" \n        icon=\"👥\" \n        gradient=\"primary\" \n      />\n      <StatCard \n        title=\"المعلمين النشطين\" \n        value=\"45\" \n        subtitle=\"معلم مؤهل\" \n        icon=\"👨‍🏫\" \n        gradient=\"success\" \n      />\n      <StatCard \n        title=\"معدل الحضور\" \n        value=\"94%\" \n        subtitle=\"ممتاز\" \n        icon=\"✅\" \n        gradient=\"warning\" \n      />\n      <StatCard \n        title=\"الإيرادات الشهرية\" \n        value=\"540,000\" \n        subtitle=\"ريال سعودي\" \n        icon=\"💰\" \n        gradient=\"info\" \n      />\n    </div>\n  );\n}\n","size_bytes":930},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 240 10% 15%;\n\n  --border: 240 6% 88%;\n\n  --card: 0 0% 99%;\n\n  --card-foreground: 240 10% 15%;\n\n  --card-border: 240 5% 93%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 240 10% 15%;\n\n  --sidebar-border: 240 4% 90%;\n\n  --sidebar-primary: 250 60% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 8% 92%;\n\n  --sidebar-accent-foreground: 240 10% 20%;\n\n  --sidebar-ring: 250 60% 60%;\n\n  --popover: 0 0% 94%;\n\n  --popover-foreground: 240 10% 15%;\n\n  --popover-border: 240 4% 88%;\n\n  --primary: 250 60% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 240 6% 90%;\n\n  --secondary-foreground: 240 10% 20%;\n\n  --muted: 240 8% 92%;\n\n  --muted-foreground: 240 8% 35%;\n\n  --accent: 240 10% 90%;\n\n  --accent-foreground: 240 10% 20%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 240 8% 75%;\n  --ring: 250 60% 60%;\n  --chart-1: 250 60% 50%;\n  --chart-2: 165 70% 35%;\n  --chart-3: 340 75% 55%;\n  --chart-4: 195 80% 45%;\n  --chart-5: 280 65% 50%;\n\n  --font-sans: 'Cairo', 'Segoe UI', Tahoma, sans-serif;\n  \n  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --gradient-success: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n  --gradient-warning: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n  --gradient-info: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 10% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 10% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(240 10% 15% / 0.06), 0px 1px 2px -1px hsl(240 10% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(240 10% 15% / 0.08), 0px 2px 4px -2px hsl(240 10% 15% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(240 10% 15% / 0.10), 0px 3px 6px -3px hsl(240 10% 15% / 0.08);\n  --shadow-lg: 0px 10px 20px -3px hsl(240 10% 15% / 0.12), 0px 4px 8px -4px hsl(240 10% 15% / 0.10);\n  --shadow-xl: 0px 20px 32px -4px hsl(240 10% 15% / 0.15), 0px 8px 16px -6px hsl(240 10% 15% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 10% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .15);\n  --badge-outline: rgba(255,255,255, .08);\n\n  --opaque-button-border-intensity: 8;\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .05);\n  --elevate-2: rgba(255,255,255, .10);\n\n  --background: 220 15% 12%;\n\n  --foreground: 0 0% 96%;\n\n  --border: 220 10% 28%;\n\n  --card: 220 15% 16%;\n\n  --card-foreground: 0 0% 96%;\n\n  --card-border: 220 10% 30%;\n\n  --sidebar: 220 15% 14%;\n\n  --sidebar-foreground: 0 0% 92%;\n\n  --sidebar-border: 220 10% 26%;\n\n  --sidebar-primary: 250 60% 58%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 15% 22%;\n\n  --sidebar-accent-foreground: 0 0% 96%;\n\n  --sidebar-ring: 250 60% 60%;\n\n  --popover: 220 15% 17%;\n\n  --popover-foreground: 0 0% 96%;\n\n  --popover-border: 220 10% 30%;\n\n  --primary: 250 60% 58%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 15% 24%;\n\n  --secondary-foreground: 0 0% 92%;\n\n  --muted: 220 15% 22%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 220 15% 26%;\n\n  --accent-foreground: 0 0% 96%;\n\n  --destructive: 0 65% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 10% 28%;\n  --ring: 250 60% 60%;\n  --chart-1: 250 60% 60%;\n  --chart-2: 165 70% 45%;\n  --chart-3: 340 75% 65%;\n  --chart-4: 195 80% 55%;\n  --chart-5: 280 65% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.15);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.28), 0px 2px 4px -2px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.32), 0px 3px 6px -3px hsl(0 0% 0% / 0.24);\n  --shadow-lg: 0px 10px 20px -3px hsl(0 0% 0% / 0.36), 0px 4px 8px -4px hsl(0 0% 0% / 0.28);\n  --shadow-xl: 0px 20px 32px -4px hsl(0 0% 0% / 0.40), 0px 8px 16px -6px hsl(0 0% 0% / 0.32);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.45);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .glass-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  }\n\n  .dark .glass-card {\n    background: rgba(30, 41, 59, 0.85);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);\n  }\n\n  .gradient-primary-bg {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  }\n  \n  .gradient-success-bg {\n    background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n  }\n  \n  .gradient-warning-bg {\n    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n  }\n  \n  .gradient-info-bg {\n    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n  }\n\n  .card-hover-effect {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .card-hover-effect:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 20px 40px rgba(0,0,0,0.15);\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  .fade-in {\n    animation: fadeIn 0.5s ease-out;\n  }\n\n  @keyframes pulse-notification {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n  }\n\n  .notification-pulse {\n    animation: pulse-notification 2s infinite;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* تنسيقات شريط التمرير المخصصة - تصميم زجاجي محسّن */\n  *::-webkit-scrollbar {\n    width: 12px;\n    height: 12px;\n  }\n\n  *::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.08);\n    border-radius: 12px;\n    margin: 4px;\n  }\n\n  *::-webkit-scrollbar-thumb {\n    background: linear-gradient(180deg, rgba(102, 126, 234, 0.6) 0%, rgba(118, 75, 162, 0.6) 100%);\n    border-radius: 12px;\n    border: 2px solid rgba(255, 255, 255, 0.1);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n  }\n\n  *::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(180deg, rgba(102, 126, 234, 0.8) 0%, rgba(118, 75, 162, 0.8) 100%);\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.5);\n    transform: scale(1.05);\n  }\n\n  *::-webkit-scrollbar-thumb:active {\n    background: linear-gradient(180deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);\n    box-shadow: 0 6px 16px rgba(102, 126, 234, 0.6);\n  }\n\n  /* Firefox */\n  * {\n    scrollbar-width: thin;\n    scrollbar-color: rgba(102, 126, 234, 0.6) rgba(255, 255, 255, 0.08);\n  }\n\n  /* تأثير انتقال سلس للتمرير */\n  html {\n    scroll-behavior: smooth;\n  }\n}","size_bytes":11137},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"ابدأ_هنا.md":{"content":"# 🚀 دليل البدء السريع - نشر نظام إدارة المدرسة\n\n## 📦 ملفات المشروع الجاهزة للنشر\n\nتم تجهيز جميع الملفات اللازمة لنشر المشروع على VPS:\n\n### ✅ الملفات الأساسية:\n- **database_backup.sql** (65 KB) - نسخة احتياطية كاملة من قاعدة البيانات مع جميع البيانات\n- **deploy.sh** - سكريبت نشر تلقائي لـ HestiaCP  \n- **.env.example** - مثال على ملف المتغيرات البيئية\n- **package.json** - جميع التبعيات المطلوبة\n\n### 📚 ملفات التوثيق:\n- **DEPLOYMENT_README.md** - دليل النشر السريع (إنجليزي)\n- **VPS_DEPLOYMENT.md** - دليل تفصيلي شامل للنشر\n- **هذا الملف** - تعليمات البدء السريع (عربي)\n\n---\n\n## 🎯 خيارات النشر\n\n### الخيار 1️⃣: نشر تلقائي على HestiaCP (موصى به)\n\n#### الخطوات:\n\n**1. تعديل ملف النشر:**\n```bash\nnano deploy.sh\n```\n\nعدّل المتغيرات التالية:\n```bash\nVPS_USER=\"admin\"                    # اسم المستخدم في VPS\nVPS_HOST=\"192.168.1.100\"           # IP الخادم أو Domain\nDOMAIN=\"school.example.com\"         # النطاق الخاص بك\nDB_NAME=\"school_db\"                 # اسم قاعدة البيانات\nDB_USER=\"school_user\"               # مستخدم قاعدة البيانات\nDB_PASS=\"كلمة_مرور_قوية_جداً\"      # كلمة المرور\n```\n\n**2. تشغيل السكريبت:**\n```bash\nchmod +x deploy.sh\n./deploy.sh\n```\n\n**3. إعداد Proxy في HestiaCP:**\n- افتح لوحة HestiaCP\n- Web → [اختر النطاق] → Edit\n- Advanced Options → Proxy Template → **NodeJS**\n- Save ✅\n\n**✨ انتهى! موقعك جاهز على:** `https://school.example.com`\n\n---\n\n### الخيار 2️⃣: نشر يدوي (لأي VPS)\n\n#### المتطلبات:\n- Ubuntu 20.04 أو أحدث\n- Node.js 20.x\n- PostgreSQL 14+\n- Nginx\n- PM2\n\n#### الخطوات السريعة:\n\n**1. تثبيت المتطلبات:**\n```bash\n# Node.js 20\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt install -y nodejs postgresql nginx\n\n# PM2\nsudo npm install -g pm2\n```\n\n**2. إعداد قاعدة البيانات:**\n```bash\nsudo -u postgres psql\n\nCREATE DATABASE school_management;\nCREATE USER school_admin WITH PASSWORD 'كلمة_مرور_قوية';\nGRANT ALL PRIVILEGES ON DATABASE school_management TO school_admin;\n\\q\n\n# استيراد البيانات\npsql -U school_admin -d school_management < database_backup.sql\n```\n\n**3. رفع ملفات المشروع:**\n```bash\n# من جهازك المحلي\nscp -r /path/to/project/* user@vps-ip:/var/www/school/\n```\n\n**4. تكوين وتشغيل:**\n```bash\ncd /var/www/school\n\n# إنشاء ملف .env\ncp .env.example .env\nnano .env\n# عدّل DATABASE_URL و SESSION_SECRET\n\n# تثبيت وبناء\nnpm install\nnpm run build\nnpm run db:push --force\n\n# تشغيل\npm2 start npm --name school -- start\npm2 save\npm2 startup\n```\n\n**5. إعداد Nginx:**\n```bash\nsudo nano /etc/nginx/sites-available/school\n```\n\nأضف:\n```nginx\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n```bash\nsudo ln -s /etc/nginx/sites-available/school /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n**6. SSL مجاني (اختياري):**\n```bash\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d your-domain.com\n```\n\n---\n\n## 🔐 ملاحظات أمنية مهمة\n\n### ⚠️ يجب تغيير:\n1. **كلمة مرور قاعدة البيانات** في deploy.sh أو يدوياً\n2. **SESSION_SECRET** في ملف .env (استخدم مفتاح عشوائي طويل)\n3. **كلمات مرور المستخدمين** الافتراضية في النظام\n\n### 🛡️ تأمين الخادم:\n```bash\n# Firewall\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp  \nsudo ufw allow 443/tcp\nsudo ufw enable\n\n# تحديثات أمنية\nsudo apt update && sudo apt upgrade -y\n```\n\n---\n\n## 📊 إدارة التطبيق\n\n### مراقبة الحالة:\n```bash\npm2 status                  # حالة التطبيق\npm2 logs school            # السجلات المباشرة\npm2 monit                  # مراقبة الموارد\n```\n\n### التحكم:\n```bash\npm2 restart school         # إعادة تشغيل\npm2 stop school           # إيقاف\npm2 start school          # تشغيل\n```\n\n### نسخ احتياطي منتظم:\n```bash\n# نسخ قاعدة البيانات\npg_dump -U school_admin school_management > backup_$(date +%Y%m%d).sql\n```\n\n---\n\n## 🆘 حل المشاكل\n\n### التطبيق لا يعمل؟\n```bash\npm2 logs school --lines 100    # تحقق من الأخطاء\n```\n\n### مشكلة في قاعدة البيانات؟\n```bash\nsudo -u postgres psql\n\\l                            # عرض القواعد\n\\c school_management          # الاتصال\n\\dt                           # عرض الجداول\n```\n\n### Nginx لا يعمل؟\n```bash\nsudo nginx -t                 # فحص التكوين\nsudo tail -f /var/log/nginx/error.log\n```\n\n---\n\n## 📞 للمساعدة الإضافية\n\n- **الدليل الشامل:** `VPS_DEPLOYMENT.md`\n- **دليل سريع:** `DEPLOYMENT_README.md`\n- **سجلات النظام:** `/var/log/` أو `pm2 logs`\n\n---\n\n## ✨ معلومات المشروع\n\n**نظام إدارة المدرسة - الإصدار 1.0**\n\n### المميزات:\n✅ إدارة الطلاب والمعلمين\n✅ حضور وغياب المعلمين مع خصم تلقائي\n✅ إدخال ودرجات الطلاب\n✅ المحاسبة والرسوم المدرسية\n✅ تقارير وإحصائيات شاملة\n✅ واجهة عربية كاملة مع دعم الوضع الليلي\n\n**تم التطوير بواسطة:** TRENDIFY PLUS\n\n---\n\n**📌 ملاحظة:** تأكد من عمل نسخ احتياطية منتظمة لقاعدة البيانات!\n","size_bytes":6301},"VPS_DEPLOYMENT.md":{"content":"# دليل نشر نظام إدارة المدرسة على VPS\n\n## المتطلبات الأساسية\n\n### على VPS:\n- Ubuntu 20.04 أو أحدث\n- Node.js 20.x\n- PostgreSQL 14 أو أحدث\n- Nginx (للـ reverse proxy)\n- PM2 (لإدارة العمليات)\n\n## خطوات النشر\n\n### 1. تجهيز الخادم\n\n```bash\n# تحديث النظام\nsudo apt update && sudo apt upgrade -y\n\n# تثبيت Node.js 20\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# تثبيت PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# تثبيت PM2 عالمياً\nsudo npm install -g pm2\n\n# تثبيت Nginx\nsudo apt install -y nginx\n```\n\n### 2. إعداد قاعدة البيانات\n\n```bash\n# الدخول إلى PostgreSQL\nsudo -u postgres psql\n\n# إنشاء قاعدة بيانات ومستخدم\nCREATE DATABASE school_management;\nCREATE USER school_admin WITH ENCRYPTED PASSWORD 'your_secure_password';\nGRANT ALL PRIVILEGES ON DATABASE school_management TO school_admin;\n\\q\n\n# استيراد النسخة الاحتياطية\npsql -U school_admin -d school_management < database_backup.sql\n```\n\n### 3. رفع المشروع\n\n```bash\n# إنشاء مجلد للمشروع\nsudo mkdir -p /var/www/school-management\nsudo chown -R $USER:$USER /var/www/school-management\ncd /var/www/school-management\n\n# رفع ملفات المشروع (استخدم scp أو git)\n# مثال باستخدام scp من جهازك المحلي:\n# scp -r /path/to/project/* user@your-vps-ip:/var/www/school-management/\n```\n\n### 4. تكوين المتغيرات البيئية\n\n```bash\n# إنشاء ملف .env\ncat > .env << 'EOF'\nNODE_ENV=production\nPORT=5000\nDATABASE_URL=postgresql://school_admin:your_secure_password@localhost:5432/school_management\nSESSION_SECRET=your_very_long_random_secret_key_here\nEOF\n```\n\n### 5. تثبيت التبعيات وبناء المشروع\n\n```bash\n# تثبيت التبعيات\nnpm install --production\n\n# بناء المشروع\nnpm run build\n```\n\n### 6. تشغيل التطبيق باستخدام PM2\n\n```bash\n# تشغيل التطبيق\npm2 start npm --name \"school-management\" -- start\n\n# حفظ التكوين للتشغيل التلقائي عند إعادة التشغيل\npm2 save\npm2 startup\n\n# التحقق من الحالة\npm2 status\npm2 logs school-management\n```\n\n### 7. إعداد Nginx كـ Reverse Proxy\n\n```bash\n# إنشاء ملف تكوين Nginx\nsudo nano /etc/nginx/sites-available/school-management\n```\n\nأضف المحتوى التالي:\n\n```nginx\nserver {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n```bash\n# تفعيل التكوين\nsudo ln -s /etc/nginx/sites-available/school-management /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n### 8. تثبيت SSL (اختياري لكن موصى به)\n\n```bash\n# تثبيت Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# الحصول على شهادة SSL\nsudo certbot --nginx -d your-domain.com -d www.your-domain.com\n```\n\n## الأوامر المفيدة\n\n### إدارة التطبيق:\n```bash\npm2 restart school-management    # إعادة تشغيل\npm2 stop school-management        # إيقاف\npm2 start school-management       # تشغيل\npm2 logs school-management        # عرض السجلات\npm2 monit                          # مراقبة الأداء\n```\n\n### نسخ احتياطي للقاعدة:\n```bash\npg_dump -U school_admin school_management > backup_$(date +%Y%m%d_%H%M%S).sql\n```\n\n### استعادة من نسخة احتياطية:\n```bash\npsql -U school_admin -d school_management < backup_file.sql\n```\n\n## الأمان\n\n1. **تغيير كلمات المرور الافتراضية**\n2. **تفعيل Firewall:**\n   ```bash\n   sudo ufw allow 22/tcp\n   sudo ufw allow 80/tcp\n   sudo ufw allow 443/tcp\n   sudo ufw enable\n   ```\n3. **تحديث النظام بانتظام:**\n   ```bash\n   sudo apt update && sudo apt upgrade -y\n   ```\n\n## استكشاف الأخطاء\n\n### التطبيق لا يعمل:\n```bash\npm2 logs school-management --lines 100\n```\n\n### مشاكل قاعدة البيانات:\n```bash\nsudo -u postgres psql\n\\l                          # عرض القواعد\n\\c school_management        # الاتصال بالقاعدة\n\\dt                         # عرض الجداول\n```\n\n### مشاكل Nginx:\n```bash\nsudo nginx -t               # فحص التكوين\nsudo tail -f /var/log/nginx/error.log\n```\n\n## ملاحظات مهمة\n\n- **النسخ الاحتياطي**: قم بعمل نسخ احتياطية منتظمة لقاعدة البيانات\n- **المراقبة**: راقب استخدام الموارد (CPU, RAM, Disk)\n- **التحديثات**: حدّث التبعيات بانتظام: `npm update`\n- **السجلات**: تحقق من السجلات بشكل دوري\n","size_bytes":5289},"DEPLOYMENT_README.md":{"content":"# دليل النشر السريع - نظام إدارة المدرسة\n\n## 📦 الملفات المتوفرة للنشر\n\n1. **database_backup.sql** - نسخة احتياطية كاملة من قاعدة البيانات\n2. **deploy.sh** - سكريبت نشر تلقائي لـ HestiaCP\n3. **VPS_DEPLOYMENT.md** - دليل تفصيلي للنشر اليدوي\n4. **.env.example** - مثال على ملف المتغيرات البيئية\n\n## 🚀 طريقة النشر السريع (HestiaCP)\n\n### الخطوة 1: تعديل ملف deploy.sh\n\nافتح ملف `deploy.sh` وعدّل المتغيرات التالية:\n\n```bash\nVPS_USER=\"admin\"                    # مستخدم VPS الخاص بك\nVPS_HOST=\"your-vps-ip.com\"         # IP أو Domain الـ VPS\nDOMAIN=\"yourdomain.com\"             # النطاق الخاص بك\nDB_NAME=\"school_db\"                 # اسم قاعدة البيانات\nDB_USER=\"school_user\"               # مستخدم قاعدة البيانات\nDB_PASS=\"yourStrongPassword\"        # كلمة مرور قوية\n```\n\n### الخطوة 2: تشغيل سكريبت النشر\n\n```bash\nchmod +x deploy.sh\n./deploy.sh\n```\n\n### الخطوة 3: إعداد Proxy في HestiaCP\n\n1. افتح لوحة HestiaCP\n2. اذهب إلى **Web** → اختر النطاق → **Edit**\n3. في **Advanced Options** → اختر **Proxy Template** → **NodeJS**\n4. احفظ التغييرات\n\n## 📝 طريقة النشر اليدوي (أي VPS)\n\nراجع ملف **VPS_DEPLOYMENT.md** للحصول على تعليمات تفصيلية شاملة.\n\n## 🗄️ استيراد قاعدة البيانات\n\n### على VPS:\n\n```bash\n# إنشاء قاعدة البيانات\nsudo -u postgres psql\nCREATE DATABASE school_management;\nCREATE USER school_admin WITH ENCRYPTED PASSWORD 'your_password';\nGRANT ALL PRIVILEGES ON DATABASE school_management TO school_admin;\n\\q\n\n# استيراد النسخة الاحتياطية\npsql -U school_admin -d school_management < database_backup.sql\n```\n\n## ⚙️ المتغيرات البيئية المطلوبة\n\nأنشئ ملف `.env` من `.env.example`:\n\n```bash\ncp .env.example .env\nnano .env\n```\n\nعدّل القيم التالية:\n- `DATABASE_URL` - رابط الاتصال بقاعدة البيانات\n- `SESSION_SECRET` - مفتاح عشوائي طويل (32 حرف على الأقل)\n- `NODE_ENV=production`\n\n## 🔧 بناء وتشغيل المشروع\n\n```bash\n# تثبيت التبعيات\nnpm install\n\n# بناء المشروع\nnpm run build\n\n# تطبيق تغييرات قاعدة البيانات\nnpm run db:push --force\n\n# تشغيل التطبيق\nnpm start\n\n# أو باستخدام PM2 (موصى به)\npm2 start npm --name \"school-management\" -- start\npm2 save\npm2 startup\n```\n\n## 🔐 الأمان\n\n### تغيير كلمات المرور الافتراضية\nتأكد من تغيير جميع كلمات المرور في:\n- قاعدة البيانات\n- ملف `.env`\n- لوحة HestiaCP\n\n### تفعيل Firewall\n\n```bash\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n```\n\n### الحصول على SSL مجاني\n\n```bash\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d yourdomain.com\n```\n\n## 📊 مراقبة التطبيق\n\n```bash\n# عرض حالة التطبيق\npm2 status\n\n# عرض السجلات المباشرة\npm2 logs school-management\n\n# مراقبة الموارد\npm2 monit\n\n# إعادة تشغيل التطبيق\npm2 restart school-management\n```\n\n## 🆘 استكشاف الأخطاء\n\n### التطبيق لا يعمل؟\n\n1. تحقق من السجلات: `pm2 logs school-management`\n2. تحقق من اتصال قاعدة البيانات\n3. تأكد من صحة متغيرات البيئة في `.env`\n\n### مشاكل قاعدة البيانات؟\n\n```bash\n# التحقق من قاعدة البيانات\nsudo -u postgres psql -l\n\n# الاتصال بقاعدة البيانات\npsql -U school_admin -d school_management\n\n# عرض الجداول\n\\dt\n```\n\n## 📞 الدعم\n\nللمساعدة الإضافية، راجع:\n- `VPS_DEPLOYMENT.md` - دليل النشر الكامل\n- سجلات التطبيق: `pm2 logs`\n- سجلات النظام: `/var/log/nginx/error.log`\n\n---\n\n**ملاحظة**: هذا النظام تم تطويره بواسطة **TRENDIFY PLUS**\n","size_bytes":4314},"AUTHENTICATION.md":{"content":"# نظام المصادقة - School Management System\n\n## نظرة عامة\n\nتم بناء نظام مصادقة متكامل وآمن للنظام المدرسي باستخدام Passport.js مع Local Strategy، يتضمن ثلاثة أنواع من المستخدمين بصلاحيات مختلفة.\n\n## الأدوار الثلاثة للمستخدمين\n\n### 1. إدارة المدرسة (Admin)\n**الصلاحيات:**\n- وصول كامل لجميع أجزاء النظام\n- إدارة الطلاب والمعلمين\n- إدارة الصفوف والمواد\n- إدارة الحضور والدرجات\n- إدارة الحسابات المالية\n- إدارة إعدادات المدرسة\n- إنشاء وتعديل حسابات المستخدمين\n\n### 2. المعلمون (Teacher)\n**الصلاحيات:**\n- إضافة وتعديل درجات الطلاب المسجلين لديهم\n- عرض معلومات الطلاب في صفوفهم\n- عرض حضور الطلاب\n- عرض المواد التي يدرسونها\n\n**القيود:**\n- لا يمكنهم حذف أو تعديل معلومات الطلاب\n- لا يمكنهم الوصول للحسابات المالية\n- لا يمكنهم تعديل إعدادات النظام\n\n### 3. الأهالي (Parent)\n**الصلاحيات:**\n- الاطلاع على تقارير أولادهم فقط\n- عرض درجات أولادهم\n- عرض حضور أولادهم\n- طباعة التقارير الدراسية\n\n**القيود:**\n- لا يمكنهم تعديل أي بيانات\n- لا يمكنهم عرض معلومات طلاب آخرين\n\n## البنية التقنية\n\n### Backend\n\n#### 1. قاعدة البيانات\n**جدول Users:**\n```sql\nCREATE TABLE users (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL, -- Hashed with scrypt\n  role user_role NOT NULL DEFAULT 'admin',\n  full_name TEXT,\n  email TEXT,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n**جدول Teacher_Users (ربط المعلمين):**\n```sql\nCREATE TABLE teacher_users (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR UNIQUE REFERENCES users(id),\n  teacher_id VARCHAR UNIQUE REFERENCES teachers(id),\n  created_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n**جدول Parent_Students (ربط الأهالي بالطلاب):**\n```sql\nCREATE TABLE parent_students (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id),\n  student_id VARCHAR REFERENCES students(id),\n  created_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n#### 2. تشفير كلمات المرور\n- استخدام **scrypt** من Node.js crypto module\n- كل كلمة مرور يتم تشفيرها مع salt عشوائي\n- لا يمكن استرجاع كلمة المرور الأصلية\n\n```typescript\n// في server/auth.ts\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n```\n\n#### 3. إدارة الجلسات (Sessions)\n- استخدام **express-session** مع **connect-pg-simple**\n- تخزين الجلسات في PostgreSQL\n- مدة الجلسة: 30 يوماً\n- تشفير cookie في بيئة الإنتاج\n\n```typescript\nconst sessionSettings: session.SessionOptions = {\n  store: new PostgresSessionStore({ \n    pool, \n    createTableIfMissing: true \n  }),\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n  },\n};\n```\n\n#### 4. Passport.js Strategy\n```typescript\npassport.use(\n  new LocalStrategy(async (username, password, done) => {\n    try {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      }\n      return done(null, user);\n    } catch (error) {\n      return done(error);\n    }\n  }),\n);\n```\n\n### Frontend\n\n#### 1. AuthContext & useAuth Hook\n```typescript\n// في client/src/hooks/use-auth.tsx\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  // user, isLoading, loginMutation, logoutMutation, registerMutation\n  return context;\n}\n```\n\n#### 2. ProtectedRoute Component\n```typescript\n// في client/src/lib/protected-route.tsx\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  allowedRoles, // اختياري - لتقييد الوصول حسب الدور\n}) {\n  const { user, isLoading } = useAuth();\n  \n  if (isLoading) return <LoadingScreen />;\n  if (!user) return <Redirect to=\"/auth\" />;\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    return <UnauthorizedScreen />;\n  }\n  \n  return <Component />;\n}\n```\n\n#### 3. صفحة المصادقة (AuthPage)\n- تبويبات لتسجيل الدخول وإنشاء حساب جديد\n- تصميم عربي RTL كامل\n- Hero section مع شرح مزايا النظام\n- رسائل خطأ واضحة بالعربية\n\n## API Endpoints\n\n### POST /api/register\nإنشاء حساب جديد (للأهالي فقط - الإدارة تنشئ حسابات المعلمين والإداريين)\n\n**⚠️ مهم:** التسجيل الذاتي يسمح فقط بإنشاء حسابات للأهالي. يتم فرض role=\"parent\" تلقائياً.\n\n**Request Body:**\n```json\n{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"fullName\": \"string\",\n  \"email\": \"string\" (optional)\n}\n```\n\n**Response:** User object (بدون حقل password)\n\n### POST /api/login\nتسجيل الدخول\n\n**Request Body:**\n```json\n{\n  \"username\": \"string\",\n  \"password\": \"string\"\n}\n```\n\n**Response:** User object (بدون حقل password)\n\n### POST /api/logout\nتسجيل الخروج\n\n**Response:** 200 OK\n\n### GET /api/user\nالحصول على المستخدم الحالي\n\n**Response:** User object (بدون حقل password) أو 401 إذا لم يكن مسجل الدخول\n\n## Middleware للحماية\n\n### 1. requireAuth\nيتحقق من تسجيل الدخول فقط\n\n```typescript\nfunction requireAuth(req, res, next) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"يجب تسجيل الدخول أولاً\" });\n  }\n  next();\n}\n```\n\n### 2. requireAdmin\nيتحقق من صلاحيات الإدارة\n\n```typescript\nfunction requireAdmin(req, res, next) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"يجب تسجيل الدخول أولاً\" });\n  }\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ error: \"غير مصرح بهذا الإجراء\" });\n  }\n  next();\n}\n```\n\n### 3. requireTeacher\nيتحقق من صلاحيات المعلم\n\n```typescript\nfunction requireTeacher(req, res, next) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"يجب تسجيل الدخول أولاً\" });\n  }\n  if (req.user.role !== 'teacher' && req.user.role !== 'admin') {\n    return res.status(403).json({ error: \"غير مصرح بهذا الإجراء\" });\n  }\n  next();\n}\n```\n\n## بيانات الاعتماد الافتراضية\n\n### Admin Account\n```\nUsername: admin\nPassword: admin123\nRole: admin\nFull Name: مدير النظام\nEmail: admin@school.com\n```\n\n**⚠️ مهم:** يجب تغيير كلمة المرور بعد أول تسجيل دخول في بيئة الإنتاج!\n\n## متغيرات البيئة المطلوبة\n\n```env\n# في ملف .env\nSESSION_SECRET=your-very-secret-session-key-here-change-in-production\nDATABASE_URL=your-database-connection-string\nNODE_ENV=production # or development\n```\n\n**⚠️ مهم:** \n- **SESSION_SECRET إلزامي** - النظام لن يعمل بدونه\n- استخدم مفتاح سري قوي وطويل (32+ حرف)\n- يمكن توليد مفتاح قوي باستخدام: `openssl rand -base64 32`\n- لا تشارك المفتاح السري مع أحد\n\n## إنشاء Admin User الأول\n\n### الطريقة الوحيدة: استخدام Seed Script\n```bash\nnpx tsx server/seed-admin.ts\n```\n\n**ملاحظة:** التسجيل الذاتي من خلال واجهة `/auth` يسمح فقط بإنشاء حسابات للأهالي (role=\"parent\"). \nلإنشاء حسابات للمعلمين أو الإداريين، يجب استخدام Seed Script أو إنشائها من لوحة التحكم بواسطة Admin.\n\n## الأمان والحماية\n\n### ✅ ما تم تطبيقه:\n1. ✅ تشفير كلمات المرور باستخدام scrypt\n2. ✅ حماية CSRF عبر session tokens\n3. ✅ HttpOnly cookies للحماية من XSS\n4. ✅ Secure cookies في الإنتاج (HTTPS فقط)\n5. ✅ Password hashing with random salt\n6. ✅ Session expiry (30 days)\n7. ✅ Role-based access control\n8. ✅ Protected routes على الفرونت إند والباك إند\n9. ✅ Schema validation للـ registration endpoint\n10. ✅ إزالة password من جميع API responses\n11. ✅ فرض role=\"parent\" للتسجيل الذاتي\n12. ✅ SESSION_SECRET مطلوب وإلزامي\n\n### 🔒 التوصيات للإنتاج:\n1. 🔐 استخدم HTTPS دائماً\n2. 🔑 غيّر SESSION_SECRET قبل النشر\n3. 👤 غيّر كلمة مرور admin الافتراضية\n4. 📧 فعّل التحقق من البريد الإلكتروني\n5. 🔄 أضف نظام استرجاع كلمة المرور\n6. 🕐 قلل مدة الجلسة للمستخدمين الحساسين\n7. 📊 راقب محاولات تسجيل الدخول الفاشلة\n8. 🚫 أضف Rate Limiting للحماية من Brute Force\n\n## الاختبار\n\nتم اختبار النظام بالكامل باستخدام Playwright:\n\n✅ إعادة التوجيه التلقائي للمستخدمين غير المسجلين  \n✅ تسجيل الدخول بنجاح  \n✅ إعادة التوجيه للـ Dashboard بعد تسجيل الدخول  \n✅ تسجيل الخروج  \n✅ حماية المسارات من الوصول غير المصرح  \n\n## الدعم الفني\n\nللمساعدة أو الاستفسارات:\n- راجع ملف `replit.md` للتفاصيل التقنية\n- راجع `server/auth.ts` للكود الخاص بالمصادقة\n- راجع `client/src/hooks/use-auth.tsx` للاستخدام في الفرونت إند\n","size_bytes":10641},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User, InsertUser } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<User, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<User, Error, RegisterData>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\ntype RegisterData = InsertUser;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<User | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      if (!res.ok) {\n        throw new Error(\"اسم المستخدم أو كلمة المرور غير صحيحة\");\n      }\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"تم تسجيل الدخول بنجاح\",\n        description: `مرحباً ${user.fullName || user.username}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"فشل تسجيل الدخول\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(text || \"فشل إنشاء الحساب\");\n      }\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"تم إنشاء الحساب بنجاح\",\n        description: `مرحباً ${user.fullName || user.username}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"فشل إنشاء الحساب\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"تم تسجيل الخروج\",\n        description: \"نراك قريباً\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"حدث خطأ\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3473},"client/src/components/UsersSection.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { User, Student, Teacher, ParentStudent, TeacherUser } from '@shared/schema';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Card } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { UserPlus, Trash2, Shield, Users as UsersIcon, Edit, Key } from 'lucide-react';\nimport { Checkbox } from '@/components/ui/checkbox';\n\ntype UserFormData = {\n  username: string;\n  password: string;\n  fullName: string;\n  email: string;\n  role: 'admin' | 'teacher' | 'parent';\n  teacherId?: string;\n  guardianName?: string;\n  studentIds?: string[];\n  relationship?: string;\n};\n\nexport default function UsersSection() {\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isResetPasswordDialogOpen, setIsResetPasswordDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [newPassword, setNewPassword] = useState('');\n  const [guardianSearchQuery, setGuardianSearchQuery] = useState('');\n  \n  const [formData, setFormData] = useState<UserFormData>({\n    username: '',\n    password: '',\n    fullName: '',\n    email: '',\n    role: 'parent',\n    studentIds: [],\n    relationship: 'parent',\n  });\n\n  // Always call hooks first (React rules)\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n    enabled: currentUser?.role === 'admin',\n  });\n\n  const { data: students = [] } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n    enabled: currentUser?.role === 'admin',\n  });\n\n  const { data: teachers = [] } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n    enabled: currentUser?.role === 'admin',\n  });\n\n  // Check if current user is admin\n  if (currentUser?.role !== 'admin') {\n    return (\n      <div className=\"p-8 text-center\">\n        <h2 className=\"text-2xl font-bold mb-4\">غير مصرح</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">ليس لديك صلاحية للوصول إلى هذه الصفحة</p>\n      </div>\n    );\n  }\n\n  // Get unique parent names from students\n  const parentNames = Array.from(new Set(students.map(s => s.parentName).filter(Boolean)));\n  const filteredParentNames = parentNames.filter(name => \n    name.toLowerCase().includes(guardianSearchQuery.toLowerCase())\n  );\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: UserFormData) => {\n      const res = await apiRequest('POST', '/api/users', data);\n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(text || 'فشل إنشاء المستخدم');\n      }\n      const user = await res.json();\n\n      // Link teacher if role is teacher\n      if (data.role === 'teacher' && data.teacherId) {\n        await apiRequest('POST', '/api/teacher-users', {\n          userId: user.id,\n          teacherId: data.teacherId,\n        });\n      }\n\n      // Link students if role is parent\n      if (data.role === 'parent' && data.studentIds && data.studentIds.length > 0) {\n        await apiRequest('POST', '/api/parent-students', {\n          userId: user.id,\n          studentIds: data.studentIds,\n          relationship: data.relationship || 'parent',\n        });\n      }\n\n      return user;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'تم إنشاء المستخدم',\n        description: 'تم إنشاء المستخدم بنجاح',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'خطأ',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, data }: { userId: string; data: Partial<UserFormData> }) => {\n      const res = await apiRequest('PATCH', `/api/users/${userId}`, data);\n      if (!res.ok) throw new Error('فشل تحديث المستخدم');\n      const user = await res.json();\n\n      // Update teacher link if role is teacher\n      if (data.role === 'teacher' && data.teacherId) {\n        await apiRequest('POST', '/api/teacher-users', {\n          userId,\n          teacherId: data.teacherId,\n        });\n      }\n\n      // Update student links if role is parent\n      if (data.role === 'parent' && data.studentIds) {\n        await apiRequest('POST', '/api/parent-students', {\n          userId,\n          studentIds: data.studentIds,\n          relationship: data.relationship || 'parent',\n        });\n      }\n\n      return user;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsEditDialogOpen(false);\n      setEditingUser(null);\n      toast({\n        title: 'تم تحديث المستخدم',\n        description: 'تم تحديث بيانات المستخدم بنجاح',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'خطأ',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ userId, newPassword }: { userId: string; newPassword: string }) => {\n      const res = await apiRequest('POST', `/api/users/${userId}/reset-password`, { newPassword });\n      if (!res.ok) throw new Error('فشل إعادة تعيين كلمة المرور');\n      return await res.json();\n    },\n    onSuccess: () => {\n      setIsResetPasswordDialogOpen(false);\n      setEditingUser(null);\n      setNewPassword('');\n      toast({\n        title: 'تم إعادة تعيين كلمة المرور',\n        description: 'تم إعادة تعيين كلمة المرور بنجاح',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'خطأ',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest('DELETE', `/api/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: 'تم حذف المستخدم',\n        description: 'تم حذف المستخدم بنجاح',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'خطأ',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      username: '',\n      password: '',\n      fullName: '',\n      email: '',\n      role: 'parent',\n      studentIds: [],\n      relationship: 'parent',\n    });\n    setGuardianSearchQuery('');\n  };\n\n  const handleEdit = async (user: User) => {\n    setEditingUser(user);\n    \n    // Load linked data based on role\n    let teacherId = undefined;\n    let studentIds: string[] = [];\n    let relationship = 'parent';\n\n    if (user.role === 'teacher') {\n      const res = await apiRequest('GET', `/api/teacher-users/${user.id}`);\n      if (res.ok) {\n        const teacherUser: TeacherUser = await res.json();\n        if (teacherUser) teacherId = teacherUser.teacherId;\n      }\n    } else if (user.role === 'parent') {\n      const res = await apiRequest('GET', `/api/parent-students/${user.id}`);\n      if (res.ok) {\n        const parentStudents: ParentStudent[] = await res.json();\n        studentIds = parentStudents.map(ps => ps.studentId);\n        if (parentStudents.length > 0) relationship = parentStudents[0].relationship;\n      }\n    }\n\n    setFormData({\n      username: user.username,\n      password: '',\n      fullName: user.fullName || '',\n      email: user.email || '',\n      role: user.role,\n      teacherId,\n      guardianName: user.fullName || '',\n      studentIds,\n      relationship,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createUserMutation.mutate(formData);\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingUser) return;\n    \n    const updateData: Partial<UserFormData> = {\n      username: formData.username,\n      fullName: formData.fullName,\n      email: formData.email,\n      role: formData.role,\n      teacherId: formData.teacherId,\n      studentIds: formData.studentIds,\n      relationship: formData.relationship,\n    };\n    \n    updateUserMutation.mutate({ userId: editingUser.id, data: updateData });\n  };\n\n  const handleResetPassword = () => {\n    if (!editingUser || !newPassword) return;\n    resetPasswordMutation.mutate({ userId: editingUser.id, newPassword });\n  };\n\n  // Auto-fill student IDs when parent name is selected\n  useEffect(() => {\n    if (formData.role === 'parent' && formData.guardianName) {\n      const relatedStudents = students\n        .filter(s => s.parentName === formData.guardianName)\n        .map(s => s.id);\n      setFormData(prev => ({ ...prev, studentIds: relatedStudents }));\n    }\n  }, [formData.guardianName, formData.role, students]);\n\n  const getRoleBadge = (role: string) => {\n    const badges = {\n      admin: { label: 'إدارة', color: 'bg-red-500' },\n      teacher: { label: 'معلم', color: 'bg-blue-500' },\n      parent: { label: 'ولي أمر', color: 'bg-green-500' },\n    };\n    const badge = badges[role as keyof typeof badges] || badges.parent;\n    return (\n      <span className={`${badge.color} text-white text-xs px-2 py-1 rounded-full`}>\n        {badge.label}\n      </span>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8 text-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 pt-16\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-3 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl\">\n            <UsersIcon className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">إدارة المستخدمين</h1>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">إنشاء وإدارة حسابات المستخدمين</p>\n          </div>\n        </div>\n        <Button\n          onClick={() => {\n            resetForm();\n            setIsDialogOpen(true);\n          }}\n          className=\"flex items-center gap-2\"\n          data-testid=\"button-add-user\"\n        >\n          <UserPlus className=\"w-4 h-4\" />\n          إنشاء مستخدم جديد\n        </Button>\n      </div>\n\n      {/* Users List */}\n      <div className=\"grid gap-4\">\n        {users.map((user) => (\n          <Card key={user.id} className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 rounded-full\">\n                  <Shield className=\"w-6 h-6 text-gray-700 dark:text-gray-300\" />\n                </div>\n                <div>\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white\">{user.fullName || user.username}</h3>\n                    {getRoleBadge(user.role)}\n                  </div>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">@{user.username}</p>\n                  {user.email && (\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">{user.email}</p>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleEdit(user)}\n                  className=\"hover-elevate\"\n                  data-testid={`button-edit-user-${user.id}`}\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setEditingUser(user);\n                    setNewPassword('');\n                    setIsResetPasswordDialogOpen(true);\n                  }}\n                  className=\"hover-elevate\"\n                  data-testid={`button-reset-password-${user.id}`}\n                >\n                  <Key className=\"w-4 h-4\" />\n                </Button>\n                {user.id !== currentUser.id && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      if (confirm('هل أنت متأكد من حذف هذا المستخدم؟')) {\n                        deleteUserMutation.mutate(user.id);\n                      }\n                    }}\n                    className=\"text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950\"\n                    data-testid={`button-delete-user-${user.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Create User Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent dir=\"rtl\" className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>إنشاء مستخدم جديد</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmit}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">الصلاحيات</Label>\n                <Select\n                  value={formData.role}\n                  onValueChange={(value: 'admin' | 'teacher' | 'parent') =>\n                    setFormData({ ...formData, role: value })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-user-role\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">إدارة - وصول كامل</SelectItem>\n                    <SelectItem value=\"teacher\">معلم - إضافة علامات الطلاب</SelectItem>\n                    <SelectItem value=\"parent\">ولي أمر - عرض تقارير الأبناء</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Teacher Selection */}\n              {formData.role === 'teacher' && (\n                <div className=\"space-y-2 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                  <Label htmlFor=\"teacherId\">المعلم</Label>\n                  <Select\n                    value={formData.teacherId}\n                    onValueChange={(value) => setFormData({ ...formData, teacherId: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-teacher\">\n                      <SelectValue placeholder=\"اختر المعلم\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {teachers.map((teacher) => (\n                        <SelectItem key={teacher.id} value={teacher.id}>\n                          {teacher.arabicName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Parent-Student Linking */}\n              {formData.role === 'parent' && (\n                <div className=\"space-y-4 p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"guardianName\">اسم ولي الأمر</Label>\n                    <Input\n                      id=\"guardianName\"\n                      value={guardianSearchQuery}\n                      onChange={(e) => setGuardianSearchQuery(e.target.value)}\n                      placeholder=\"ابحث عن اسم ولي الأمر\"\n                      data-testid=\"input-guardian-search\"\n                    />\n                    {filteredParentNames.length > 0 && guardianSearchQuery && (\n                      <div className=\"border rounded-md max-h-40 overflow-y-auto\">\n                        {filteredParentNames.map((name) => (\n                          <button\n                            key={name}\n                            type=\"button\"\n                            onClick={() => {\n                              setFormData({ ...formData, guardianName: name });\n                              setGuardianSearchQuery(name);\n                            }}\n                            className=\"w-full text-right px-3 py-2 hover-elevate\"\n                          >\n                            {name}\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                    {formData.guardianName && (\n                      <p className=\"text-sm text-green-700 dark:text-green-300\">\n                        محدد: {formData.guardianName}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>الطلاب التابعون</Label>\n                    <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded-md p-3\">\n                      {students.map((student) => (\n                        <div key={student.id} className=\"flex items-center gap-2\">\n                          <Checkbox\n                            id={`student-${student.id}`}\n                            checked={formData.studentIds?.includes(student.id)}\n                            onCheckedChange={(checked) => {\n                              const newStudentIds = checked\n                                ? [...(formData.studentIds || []), student.id]\n                                : (formData.studentIds || []).filter(id => id !== student.id);\n                              setFormData({ ...formData, studentIds: newStudentIds });\n                            }}\n                            data-testid={`checkbox-student-${student.id}`}\n                          />\n                          <Label htmlFor={`student-${student.id}`} className=\"cursor-pointer\">\n                            {student.arabicName} - {student.parentName}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      محدد: {formData.studentIds?.length || 0} طالب\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"relationship\">الصلة</Label>\n                    <Select\n                      value={formData.relationship}\n                      onValueChange={(value) => setFormData({ ...formData, relationship: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-relationship\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"parent\">والد/والدة</SelectItem>\n                        <SelectItem value=\"father\">أب</SelectItem>\n                        <SelectItem value=\"mother\">أم</SelectItem>\n                        <SelectItem value=\"guardian\">ولي أمر</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">الاسم الكامل</Label>\n                <Input\n                  id=\"fullName\"\n                  value={formData.fullName}\n                  onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                  required\n                  data-testid=\"input-user-fullname\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">اسم المستخدم</Label>\n                <Input\n                  id=\"username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                  required\n                  data-testid=\"input-user-username\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">كلمة المرور</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                  data-testid=\"input-user-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">البريد الإلكتروني (اختياري)</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  data-testid=\"input-user-email\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                data-testid=\"button-cancel-user\"\n              >\n                إلغاء\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createUserMutation.isPending}\n                data-testid=\"button-submit-user\"\n              >\n                {createUserMutation.isPending ? 'جاري الإنشاء...' : 'إنشاء المستخدم'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit User Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent dir=\"rtl\" className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>تعديل المستخدم</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleEditSubmit}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-role\">الصلاحيات</Label>\n                <Select\n                  value={formData.role}\n                  onValueChange={(value: 'admin' | 'teacher' | 'parent') =>\n                    setFormData({ ...formData, role: value })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-edit-user-role\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">إدارة - وصول كامل</SelectItem>\n                    <SelectItem value=\"teacher\">معلم - إضافة علامات الطلاب</SelectItem>\n                    <SelectItem value=\"parent\">ولي أمر - عرض تقارير الأبناء</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Teacher Selection for Edit */}\n              {formData.role === 'teacher' && (\n                <div className=\"space-y-2 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                  <Label htmlFor=\"edit-teacherId\">المعلم</Label>\n                  <Select\n                    value={formData.teacherId}\n                    onValueChange={(value) => setFormData({ ...formData, teacherId: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-teacher\">\n                      <SelectValue placeholder=\"اختر المعلم\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {teachers.map((teacher) => (\n                        <SelectItem key={teacher.id} value={teacher.id}>\n                          {teacher.arabicName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Parent-Student Linking for Edit */}\n              {formData.role === 'parent' && (\n                <div className=\"space-y-4 p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                  <div className=\"space-y-2\">\n                    <Label>الطلاب التابعون</Label>\n                    <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded-md p-3\">\n                      {students.map((student) => (\n                        <div key={student.id} className=\"flex items-center gap-2\">\n                          <Checkbox\n                            id={`edit-student-${student.id}`}\n                            checked={formData.studentIds?.includes(student.id)}\n                            onCheckedChange={(checked) => {\n                              const newStudentIds = checked\n                                ? [...(formData.studentIds || []), student.id]\n                                : (formData.studentIds || []).filter(id => id !== student.id);\n                              setFormData({ ...formData, studentIds: newStudentIds });\n                            }}\n                            data-testid={`checkbox-edit-student-${student.id}`}\n                          />\n                          <Label htmlFor={`edit-student-${student.id}`} className=\"cursor-pointer\">\n                            {student.arabicName} - {student.parentName}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      محدد: {formData.studentIds?.length || 0} طالب\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-relationship\">الصلة</Label>\n                    <Select\n                      value={formData.relationship}\n                      onValueChange={(value) => setFormData({ ...formData, relationship: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-edit-relationship\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"parent\">والد/والدة</SelectItem>\n                        <SelectItem value=\"father\">أب</SelectItem>\n                        <SelectItem value=\"mother\">أم</SelectItem>\n                        <SelectItem value=\"guardian\">ولي أمر</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-fullName\">الاسم الكامل</Label>\n                <Input\n                  id=\"edit-fullName\"\n                  value={formData.fullName}\n                  onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                  required\n                  data-testid=\"input-edit-user-fullname\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-username\">اسم المستخدم</Label>\n                <Input\n                  id=\"edit-username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                  required\n                  data-testid=\"input-edit-user-username\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-email\">البريد الإلكتروني (اختياري)</Label>\n                <Input\n                  id=\"edit-email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  data-testid=\"input-edit-user-email\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDialogOpen(false)}\n                data-testid=\"button-cancel-edit\"\n              >\n                إلغاء\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateUserMutation.isPending}\n                data-testid=\"button-submit-edit\"\n              >\n                {updateUserMutation.isPending ? 'جاري التحديث...' : 'تحديث المستخدم'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Reset Password Dialog */}\n      <Dialog open={isResetPasswordDialogOpen} onOpenChange={setIsResetPasswordDialogOpen}>\n        <DialogContent dir=\"rtl\" className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>إعادة تعيين كلمة المرور</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              إعادة تعيين كلمة المرور للمستخدم: <strong>{editingUser?.fullName || editingUser?.username}</strong>\n            </p>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"newPassword\">كلمة المرور الجديدة</Label>\n              <Input\n                id=\"newPassword\"\n                type=\"password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                placeholder=\"أدخل كلمة المرور الجديدة (6 أحرف على الأقل)\"\n                data-testid=\"input-new-password\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setIsResetPasswordDialogOpen(false);\n                setNewPassword('');\n              }}\n              data-testid=\"button-cancel-reset\"\n            >\n              إلغاء\n            </Button>\n            <Button\n              onClick={handleResetPassword}\n              disabled={resetPasswordMutation.isPending || !newPassword || newPassword.length < 6}\n              data-testid=\"button-submit-reset\"\n            >\n              {resetPasswordMutation.isPending ? 'جاري الإعادة...' : 'إعادة تعيين'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":31796},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as DbUser, insertUserSchema } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\ndeclare global {\n  namespace Express {\n    interface User extends DbUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  try {\n    const [hashed, salt] = stored.split(\".\");\n    \n    // Check if salt exists (password format is correct)\n    if (!salt || !hashed) {\n      return false;\n    }\n    \n    const hashedBuf = Buffer.from(hashed, \"hex\");\n    const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n    return timingSafeEqual(hashedBuf, suppliedBuf);\n  } catch (error) {\n    // If password format is invalid, return false\n    console.error(\"Password comparison error:\", error);\n    return false;\n  }\n}\n\nexport { hashPassword, comparePasswords };\n\nexport function setupAuth(app: Express) {\n  // Require SESSION_SECRET in environment\n  if (!process.env.SESSION_SECRET) {\n    throw new Error(\"SESSION_SECRET environment variable is required\");\n  }\n\n  const PostgresSessionStore = connectPg(session);\n  \n  const sessionSettings: session.SessionOptions = {\n    store: new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    }),\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        }\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Register endpoint removed - all users created by admin only\n\n  // Login endpoint\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    // Remove password from response\n    const { password, ...userWithoutPassword } = req.user!;\n    res.status(200).json(userWithoutPassword);\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    // Remove password from response\n    const { password, ...userWithoutPassword } = req.user!;\n    res.json(userWithoutPassword);\n  });\n}\n","size_bytes":3538},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  allowedRoles,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n  allowedRoles?: ('admin' | 'teacher' | 'parent')[];\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // Check role-based access\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold mb-4\">غير مصرح</h1>\n            <p className=\"text-gray-600\">ليس لديك صلاحية للوصول إلى هذه الصفحة</p>\n          </div>\n        </div>\n      </Route>\n    );\n  }\n\n  return <Route path={path}><Component /></Route>;\n}\n","size_bytes":1257},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Redirect } from \"wouter\";\nimport { GraduationCap } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation } = useAuth();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white flex items-center justify-center p-4\" dir=\"rtl\">\n      <div className=\"w-full max-w-6xl grid md:grid-cols-2 gap-8 items-center\">\n        {/* Hero Section */}\n        <div className=\"hidden md:flex flex-col items-center justify-center text-center space-y-6 p-8\">\n          <div className=\"w-32 h-32 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n            <GraduationCap className=\"w-20 h-20 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              مدرسة النور الأهلية\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              نظام إدارة مدرسي متكامل\n            </p>\n          </div>\n          <div className=\"space-y-2 text-gray-600 dark:text-gray-400\">\n            <p>✨ إدارة الطلاب والمعلمين</p>\n            <p>📊 متابعة الدرجات والحضور</p>\n            <p>💰 إدارة المحاسبة والرسوم</p>\n            <p>📱 إشعارات فورية للأهالي</p>\n          </div>\n        </div>\n\n        {/* Login Form */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>تسجيل الدخول</CardTitle>\n              <CardDescription>أدخل بياناتك للوصول إلى لوحة التحكم</CardDescription>\n            </CardHeader>\n            <form onSubmit={handleLogin}>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-username\">اسم المستخدم</Label>\n                  <Input\n                    id=\"login-username\"\n                    value={loginData.username}\n                    onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                    required\n                    data-testid=\"input-login-username\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">كلمة المرور</Label>\n                  <Input\n                    id=\"login-password\"\n                    type=\"password\"\n                    value={loginData.password}\n                    onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"جاري تسجيل الدخول...\" : \"تسجيل الدخول\"}\n                </Button>\n              </CardFooter>\n            </form>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3894},"server/seed-admin.ts":{"content":"import { hashPassword } from \"./auth\";\nimport { storage } from \"./storage\";\n\nasync function seedAdmin() {\n  try {\n    // Check if admin user already exists\n    const existing = await storage.getUserByUsername(\"admin\");\n    if (existing) {\n      console.log(\"Admin user already exists\");\n      return;\n    }\n\n    // Create admin user\n    const hashedPassword = await hashPassword(\"admin123\");\n    const admin = await storage.createUser({\n      username: \"admin\",\n      password: hashedPassword,\n      role: \"admin\",\n      fullName: \"مدير النظام\",\n      email: \"admin@school.com\",\n    });\n\n    console.log(\"✅ Admin user created successfully!\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: admin123\");\n    console.log(\"Role: admin\");\n  } catch (error) {\n    console.error(\"Error creating admin user:\", error);\n  }\n  \n  process.exit(0);\n}\n\nseedAdmin();\n","size_bytes":880},"client/src/components/TeacherAssignmentsSection.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport type { Teacher, Class, Subject, SectionSubjectTeacher } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Plus, Trash2, UserPlus } from 'lucide-react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\n\nexport default function TeacherAssignmentsSection() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedTeacher, setSelectedTeacher] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [assignmentToDelete, setAssignmentToDelete] = useState<string | null>(null);\n\n  // Fetch all data\n  const { data: teachers = [] } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n  });\n\n  const { data: classes = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: subjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/subjects'],\n  });\n\n  const { data: assignments = [], isLoading } = useQuery<SectionSubjectTeacher[]>({\n    queryKey: ['/api/section-subject-teachers'],\n  });\n\n  // Create assignment mutation\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: { teacherId: string; classId: string; subjectId: string }) => {\n      return await apiRequest('POST', '/api/section-subject-teachers', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/section-subject-teachers'] });\n      toast({\n        title: 'تم التعيين',\n        description: 'تم تعيين المعلم للمادة بنجاح',\n      });\n      setIsDialogOpen(false);\n      setSelectedTeacher('');\n      setSelectedClass('');\n      setSelectedSubject('');\n    },\n    onError: () => {\n      toast({\n        title: 'خطأ',\n        description: 'حدث خطأ أثناء تعيين المعلم',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete assignment mutation\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/section-subject-teachers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/section-subject-teachers'] });\n      toast({\n        title: 'تم الحذف',\n        description: 'تم حذف التعيين بنجاح',\n      });\n      setDeleteDialogOpen(false);\n      setAssignmentToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: 'خطأ',\n        description: 'حدث خطأ أثناء حذف التعيين',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedTeacher || !selectedClass || !selectedSubject) {\n      toast({\n        title: 'خطأ',\n        description: 'يرجى ملء جميع الحقول',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Check if assignment already exists\n    const existingAssignment = assignments.find(\n      a => a.teacherId === selectedTeacher && \n           a.classId === selectedClass && \n           a.subjectId === selectedSubject\n    );\n\n    if (existingAssignment) {\n      toast({\n        title: 'تحذير',\n        description: 'هذا التعيين موجود بالفعل',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    createAssignmentMutation.mutate({\n      teacherId: selectedTeacher,\n      classId: selectedClass,\n      subjectId: selectedSubject,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    setAssignmentToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (assignmentToDelete) {\n      deleteAssignmentMutation.mutate(assignmentToDelete);\n    }\n  };\n\n  // Helper function to get teacher name\n  const getTeacherName = (teacherId: string) => {\n    const teacher = teachers.find(t => t.id === teacherId);\n    return teacher?.arabicName || 'غير معروف';\n  };\n\n  // Helper function to get class name\n  const getClassName = (classId: string) => {\n    const classData = classes.find(c => c.id === classId);\n    if (!classData) return 'غير معروف';\n    return `${classData.grade} - ${classData.section}`;\n  };\n\n  // Helper function to get subject name\n  const getSubjectName = (subjectId: string) => {\n    const subject = subjects.find(s => s.id === subjectId);\n    return subject?.arabicName || 'غير معروف';\n  };\n\n  // Group assignments by teacher\n  const assignmentsByTeacher = teachers.map(teacher => ({\n    teacher,\n    assignments: assignments.filter(a => a.teacherId === teacher.id),\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          تعيين المعلمين للمواد\n        </h2>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-assignment\">\n              <Plus className=\"h-4 w-4 ml-2\" />\n              تعيين جديد\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>تعيين معلم لمادة في شعبة</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>المعلم *</Label>\n                <Select value={selectedTeacher} onValueChange={setSelectedTeacher}>\n                  <SelectTrigger data-testid=\"select-teacher\">\n                    <SelectValue placeholder=\"اختر المعلم\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {teachers.map((teacher) => (\n                      <SelectItem key={teacher.id} value={teacher.id}>\n                        {teacher.arabicName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>الشعبة *</Label>\n                <Select value={selectedClass} onValueChange={setSelectedClass}>\n                  <SelectTrigger data-testid=\"select-class\">\n                    <SelectValue placeholder=\"اختر الشعبة\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {classes.map((classData) => (\n                      <SelectItem key={classData.id} value={classData.id}>\n                        {classData.grade} - {classData.section}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>المادة *</Label>\n                <Select value={selectedSubject} onValueChange={setSelectedSubject}>\n                  <SelectTrigger data-testid=\"select-subject-assignment\">\n                    <SelectValue placeholder=\"اختر المادة\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {subjects.map((subject) => (\n                      <SelectItem key={subject.id} value={subject.id}>\n                        {subject.arabicName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex gap-2 justify-end\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  إلغاء\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createAssignmentMutation.isPending}\n                  data-testid=\"button-submit-assignment\"\n                >\n                  <UserPlus className=\"h-4 w-4 ml-2\" />\n                  تعيين المعلم\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">جاري التحميل...</div>\n      ) : assignments.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-8\">\n            <div className=\"text-center text-gray-600 dark:text-gray-400\">\n              لا توجد تعيينات للمعلمين حالياً\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {assignmentsByTeacher\n            .filter(item => item.assignments.length > 0)\n            .map(({ teacher, assignments: teacherAssignments }) => (\n              <Card key={teacher.id}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">\n                    {teacher.arabicName}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {teacherAssignments.map((assignment) => (\n                      <div\n                        key={assignment.id}\n                        className=\"flex items-center justify-between p-3 border rounded-md bg-white dark:bg-gray-800\"\n                        data-testid={`assignment-${assignment.id}`}\n                      >\n                        <div>\n                          <p className=\"font-medium text-gray-900 dark:text-white\">\n                            {getSubjectName(assignment.subjectId)}\n                          </p>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {getClassName(assignment.classId)}\n                          </p>\n                        </div>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"icon\"\n                          onClick={() => handleDelete(assignment.id)}\n                          data-testid={`button-delete-assignment-${assignment.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n            <AlertDialogDescription>\n              هل أنت متأكد من حذف هذا التعيين؟ لن يتمكن المعلم من الوصول لهذه المادة في هذه الشعبة.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>إلغاء</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              حذف\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":12103}},"version":2}